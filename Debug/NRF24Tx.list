
NRF24Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008040  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080081e0  080081e0  000181e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080082b8  080082b8  000182b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080082c0  080082c0  000182c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001c4  20000000  080082c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005650  200001c4  0800848c  000201c4  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20005814  0800848c  00025814  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201c4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00024dd5  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000048b4  00000000  00000000  00044fc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000016f0  00000000  00000000  00049880  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001508  00000000  00000000  0004af70  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000acfe  00000000  00000000  0004c478  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00006c39  00000000  00000000  00057176  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0005ddaf  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005f38  00000000  00000000  0005de2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001c4 	.word	0x200001c4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080081c8 	.word	0x080081c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001c8 	.word	0x200001c8
 80001dc:	080081c8 	.word	0x080081c8

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b97a 	b.w	80004ec <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	468c      	mov	ip, r1
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	9e08      	ldr	r6, [sp, #32]
 800021c:	2b00      	cmp	r3, #0
 800021e:	d151      	bne.n	80002c4 <__udivmoddi4+0xb4>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d96d      	bls.n	8000302 <__udivmoddi4+0xf2>
 8000226:	fab2 fe82 	clz	lr, r2
 800022a:	f1be 0f00 	cmp.w	lr, #0
 800022e:	d00b      	beq.n	8000248 <__udivmoddi4+0x38>
 8000230:	f1ce 0c20 	rsb	ip, lr, #32
 8000234:	fa01 f50e 	lsl.w	r5, r1, lr
 8000238:	fa20 fc0c 	lsr.w	ip, r0, ip
 800023c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000240:	ea4c 0c05 	orr.w	ip, ip, r5
 8000244:	fa00 f40e 	lsl.w	r4, r0, lr
 8000248:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800024c:	0c25      	lsrs	r5, r4, #16
 800024e:	fbbc f8fa 	udiv	r8, ip, sl
 8000252:	fa1f f987 	uxth.w	r9, r7
 8000256:	fb0a cc18 	mls	ip, sl, r8, ip
 800025a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800025e:	fb08 f309 	mul.w	r3, r8, r9
 8000262:	42ab      	cmp	r3, r5
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x6c>
 8000266:	19ed      	adds	r5, r5, r7
 8000268:	f108 32ff 	add.w	r2, r8, #4294967295
 800026c:	f080 8123 	bcs.w	80004b6 <__udivmoddi4+0x2a6>
 8000270:	42ab      	cmp	r3, r5
 8000272:	f240 8120 	bls.w	80004b6 <__udivmoddi4+0x2a6>
 8000276:	f1a8 0802 	sub.w	r8, r8, #2
 800027a:	443d      	add	r5, r7
 800027c:	1aed      	subs	r5, r5, r3
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb5 f0fa 	udiv	r0, r5, sl
 8000284:	fb0a 5510 	mls	r5, sl, r0, r5
 8000288:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800028c:	fb00 f909 	mul.w	r9, r0, r9
 8000290:	45a1      	cmp	r9, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x98>
 8000294:	19e4      	adds	r4, r4, r7
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 810a 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 800029e:	45a1      	cmp	r9, r4
 80002a0:	f240 8107 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	eba4 0409 	sub.w	r4, r4, r9
 80002ac:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002b0:	2100      	movs	r1, #0
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	d061      	beq.n	800037a <__udivmoddi4+0x16a>
 80002b6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ba:	2300      	movs	r3, #0
 80002bc:	6034      	str	r4, [r6, #0]
 80002be:	6073      	str	r3, [r6, #4]
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d907      	bls.n	80002d8 <__udivmoddi4+0xc8>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	d054      	beq.n	8000376 <__udivmoddi4+0x166>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e886 0021 	stmia.w	r6, {r0, r5}
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	f040 808e 	bne.w	80003fe <__udivmoddi4+0x1ee>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xdc>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2d0>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0503 	sbc.w	r5, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	46ac      	mov	ip, r5
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d03f      	beq.n	800037a <__udivmoddi4+0x16a>
 80002fa:	e886 1010 	stmia.w	r6, {r4, ip}
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	b912      	cbnz	r2, 800030a <__udivmoddi4+0xfa>
 8000304:	2701      	movs	r7, #1
 8000306:	fbb7 f7f2 	udiv	r7, r7, r2
 800030a:	fab7 fe87 	clz	lr, r7
 800030e:	f1be 0f00 	cmp.w	lr, #0
 8000312:	d134      	bne.n	800037e <__udivmoddi4+0x16e>
 8000314:	1beb      	subs	r3, r5, r7
 8000316:	0c3a      	lsrs	r2, r7, #16
 8000318:	fa1f fc87 	uxth.w	ip, r7
 800031c:	2101      	movs	r1, #1
 800031e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000322:	0c25      	lsrs	r5, r4, #16
 8000324:	fb02 3318 	mls	r3, r2, r8, r3
 8000328:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800032c:	fb0c f308 	mul.w	r3, ip, r8
 8000330:	42ab      	cmp	r3, r5
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x134>
 8000334:	19ed      	adds	r5, r5, r7
 8000336:	f108 30ff 	add.w	r0, r8, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x132>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f200 80d1 	bhi.w	80004e4 <__udivmoddi4+0x2d4>
 8000342:	4680      	mov	r8, r0
 8000344:	1aed      	subs	r5, r5, r3
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb5 f0f2 	udiv	r0, r5, r2
 800034c:	fb02 5510 	mls	r5, r2, r0, r5
 8000350:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000354:	fb0c fc00 	mul.w	ip, ip, r0
 8000358:	45a4      	cmp	ip, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x15c>
 800035c:	19e4      	adds	r4, r4, r7
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x15a>
 8000364:	45a4      	cmp	ip, r4
 8000366:	f200 80b8 	bhi.w	80004da <__udivmoddi4+0x2ca>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 040c 	sub.w	r4, r4, ip
 8000370:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000374:	e79d      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000376:	4631      	mov	r1, r6
 8000378:	4630      	mov	r0, r6
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	f1ce 0420 	rsb	r4, lr, #32
 8000382:	fa05 f30e 	lsl.w	r3, r5, lr
 8000386:	fa07 f70e 	lsl.w	r7, r7, lr
 800038a:	fa20 f804 	lsr.w	r8, r0, r4
 800038e:	0c3a      	lsrs	r2, r7, #16
 8000390:	fa25 f404 	lsr.w	r4, r5, r4
 8000394:	ea48 0803 	orr.w	r8, r8, r3
 8000398:	fbb4 f1f2 	udiv	r1, r4, r2
 800039c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003a0:	fb02 4411 	mls	r4, r2, r1, r4
 80003a4:	fa1f fc87 	uxth.w	ip, r7
 80003a8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003ac:	fb01 f30c 	mul.w	r3, r1, ip
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1bc>
 80003b8:	19ed      	adds	r5, r5, r7
 80003ba:	f101 30ff 	add.w	r0, r1, #4294967295
 80003be:	f080 808a 	bcs.w	80004d6 <__udivmoddi4+0x2c6>
 80003c2:	42ab      	cmp	r3, r5
 80003c4:	f240 8087 	bls.w	80004d6 <__udivmoddi4+0x2c6>
 80003c8:	3902      	subs	r1, #2
 80003ca:	443d      	add	r5, r7
 80003cc:	1aeb      	subs	r3, r5, r3
 80003ce:	fa1f f588 	uxth.w	r5, r8
 80003d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003d6:	fb02 3310 	mls	r3, r2, r0, r3
 80003da:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003de:	fb00 f30c 	mul.w	r3, r0, ip
 80003e2:	42ab      	cmp	r3, r5
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1e6>
 80003e6:	19ed      	adds	r5, r5, r7
 80003e8:	f100 38ff 	add.w	r8, r0, #4294967295
 80003ec:	d26f      	bcs.n	80004ce <__udivmoddi4+0x2be>
 80003ee:	42ab      	cmp	r3, r5
 80003f0:	d96d      	bls.n	80004ce <__udivmoddi4+0x2be>
 80003f2:	3802      	subs	r0, #2
 80003f4:	443d      	add	r5, r7
 80003f6:	1aeb      	subs	r3, r5, r3
 80003f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fc:	e78f      	b.n	800031e <__udivmoddi4+0x10e>
 80003fe:	f1c1 0720 	rsb	r7, r1, #32
 8000402:	fa22 f807 	lsr.w	r8, r2, r7
 8000406:	408b      	lsls	r3, r1
 8000408:	fa05 f401 	lsl.w	r4, r5, r1
 800040c:	ea48 0303 	orr.w	r3, r8, r3
 8000410:	fa20 fe07 	lsr.w	lr, r0, r7
 8000414:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000418:	40fd      	lsrs	r5, r7
 800041a:	ea4e 0e04 	orr.w	lr, lr, r4
 800041e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000422:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000426:	fb0c 5519 	mls	r5, ip, r9, r5
 800042a:	fa1f f883 	uxth.w	r8, r3
 800042e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000432:	fb09 f408 	mul.w	r4, r9, r8
 8000436:	42ac      	cmp	r4, r5
 8000438:	fa02 f201 	lsl.w	r2, r2, r1
 800043c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x244>
 8000442:	18ed      	adds	r5, r5, r3
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d243      	bcs.n	80004d2 <__udivmoddi4+0x2c2>
 800044a:	42ac      	cmp	r4, r5
 800044c:	d941      	bls.n	80004d2 <__udivmoddi4+0x2c2>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	441d      	add	r5, r3
 8000454:	1b2d      	subs	r5, r5, r4
 8000456:	fa1f fe8e 	uxth.w	lr, lr
 800045a:	fbb5 f0fc 	udiv	r0, r5, ip
 800045e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000462:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45a0      	cmp	r8, r4
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x26e>
 800046e:	18e4      	adds	r4, r4, r3
 8000470:	f100 35ff 	add.w	r5, r0, #4294967295
 8000474:	d229      	bcs.n	80004ca <__udivmoddi4+0x2ba>
 8000476:	45a0      	cmp	r8, r4
 8000478:	d927      	bls.n	80004ca <__udivmoddi4+0x2ba>
 800047a:	3802      	subs	r0, #2
 800047c:	441c      	add	r4, r3
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba4 0408 	sub.w	r4, r4, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454c      	cmp	r4, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	464d      	mov	r5, r9
 8000490:	d315      	bcc.n	80004be <__udivmoddi4+0x2ae>
 8000492:	d012      	beq.n	80004ba <__udivmoddi4+0x2aa>
 8000494:	b156      	cbz	r6, 80004ac <__udivmoddi4+0x29c>
 8000496:	ebba 030e 	subs.w	r3, sl, lr
 800049a:	eb64 0405 	sbc.w	r4, r4, r5
 800049e:	fa04 f707 	lsl.w	r7, r4, r7
 80004a2:	40cb      	lsrs	r3, r1
 80004a4:	431f      	orrs	r7, r3
 80004a6:	40cc      	lsrs	r4, r1
 80004a8:	6037      	str	r7, [r6, #0]
 80004aa:	6074      	str	r4, [r6, #4]
 80004ac:	2100      	movs	r1, #0
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	4618      	mov	r0, r3
 80004b4:	e6f8      	b.n	80002a8 <__udivmoddi4+0x98>
 80004b6:	4690      	mov	r8, r2
 80004b8:	e6e0      	b.n	800027c <__udivmoddi4+0x6c>
 80004ba:	45c2      	cmp	sl, r8
 80004bc:	d2ea      	bcs.n	8000494 <__udivmoddi4+0x284>
 80004be:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c2:	eb69 0503 	sbc.w	r5, r9, r3
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7e4      	b.n	8000494 <__udivmoddi4+0x284>
 80004ca:	4628      	mov	r0, r5
 80004cc:	e7d7      	b.n	800047e <__udivmoddi4+0x26e>
 80004ce:	4640      	mov	r0, r8
 80004d0:	e791      	b.n	80003f6 <__udivmoddi4+0x1e6>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e7be      	b.n	8000454 <__udivmoddi4+0x244>
 80004d6:	4601      	mov	r1, r0
 80004d8:	e778      	b.n	80003cc <__udivmoddi4+0x1bc>
 80004da:	3802      	subs	r0, #2
 80004dc:	443c      	add	r4, r7
 80004de:	e745      	b.n	800036c <__udivmoddi4+0x15c>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xe6>
 80004e4:	f1a8 0802 	sub.w	r8, r8, #2
 80004e8:	443d      	add	r5, r7
 80004ea:	e72b      	b.n	8000344 <__udivmoddi4+0x134>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f4:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_Init+0x40>)
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <HAL_Init+0x40>)
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000500:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <HAL_Init+0x40>)
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_Init+0x40>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800050a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800050c:	4a08      	ldr	r2, [pc, #32]	; (8000530 <HAL_Init+0x40>)
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_Init+0x40>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000516:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000518:	2003      	movs	r0, #3
 800051a:	f000 f917 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051e:	2000      	movs	r0, #0
 8000520:	f006 ff5e 	bl	80073e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000524:	f006 fed8 	bl	80072d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000528:	2300      	movs	r3, #0
}
 800052a:	4618      	mov	r0, r3
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40023c00 	.word	0x40023c00

08000534 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <HAL_IncTick+0x20>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b06      	ldr	r3, [pc, #24]	; (8000558 <HAL_IncTick+0x24>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4413      	add	r3, r2
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <HAL_IncTick+0x24>)
 8000546:	6013      	str	r3, [r2, #0]
}
 8000548:	bf00      	nop
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000000 	.word	0x20000000
 8000558:	20003f38 	.word	0x20003f38

0800055c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;
 8000560:	4b03      	ldr	r3, [pc, #12]	; (8000570 <HAL_GetTick+0x14>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20003f38 	.word	0x20003f38

08000574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b084      	sub	sp, #16
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff ffee 	bl	800055c <HAL_GetTick>
 8000580:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800058c:	d005      	beq.n	800059a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_Delay+0x40>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	461a      	mov	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4413      	add	r3, r2
 8000598:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800059a:	bf00      	nop
 800059c:	f7ff ffde 	bl	800055c <HAL_GetTick>
 80005a0:	4602      	mov	r2, r0
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	1ad2      	subs	r2, r2, r3
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d3f7      	bcc.n	800059c <HAL_Delay+0x28>
  {
  }
}
 80005ac:	bf00      	nop
 80005ae:	3710      	adds	r7, #16
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	20000000 	.word	0x20000000

080005b8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <NVIC_SetPriorityGrouping+0x44>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <NVIC_SetPriorityGrouping+0x44>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <NVIC_GetPriorityGrouping+0x18>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	f003 0307 	and.w	r3, r3, #7
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000626:	4909      	ldr	r1, [pc, #36]	; (800064c <NVIC_EnableIRQ+0x30>)
 8000628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062c:	095b      	lsrs	r3, r3, #5
 800062e:	79fa      	ldrb	r2, [r7, #7]
 8000630:	f002 021f 	and.w	r2, r2, #31
 8000634:	2001      	movs	r0, #1
 8000636:	fa00 f202 	lsl.w	r2, r0, r2
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	e000e100 	.word	0xe000e100

08000650 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	6039      	str	r1, [r7, #0]
 800065a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 800065c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000660:	2b00      	cmp	r3, #0
 8000662:	da0b      	bge.n	800067c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000664:	490d      	ldr	r1, [pc, #52]	; (800069c <NVIC_SetPriority+0x4c>)
 8000666:	79fb      	ldrb	r3, [r7, #7]
 8000668:	f003 030f 	and.w	r3, r3, #15
 800066c:	3b04      	subs	r3, #4
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	b2d2      	uxtb	r2, r2
 8000672:	0112      	lsls	r2, r2, #4
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	440b      	add	r3, r1
 8000678:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800067a:	e009      	b.n	8000690 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800067c:	4908      	ldr	r1, [pc, #32]	; (80006a0 <NVIC_SetPriority+0x50>)
 800067e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000682:	683a      	ldr	r2, [r7, #0]
 8000684:	b2d2      	uxtb	r2, r2
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	b2d2      	uxtb	r2, r2
 800068a:	440b      	add	r3, r1
 800068c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000690:	bf00      	nop
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr
 800069c:	e000ed00 	.word	0xe000ed00
 80006a0:	e000e100 	.word	0xe000e100

080006a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b089      	sub	sp, #36	; 0x24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f003 0307 	and.w	r3, r3, #7
 80006b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	f1c3 0307 	rsb	r3, r3, #7
 80006be:	2b04      	cmp	r3, #4
 80006c0:	bf28      	it	cs
 80006c2:	2304      	movcs	r3, #4
 80006c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006c6:	69fb      	ldr	r3, [r7, #28]
 80006c8:	3304      	adds	r3, #4
 80006ca:	2b06      	cmp	r3, #6
 80006cc:	d902      	bls.n	80006d4 <NVIC_EncodePriority+0x30>
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3b03      	subs	r3, #3
 80006d2:	e000      	b.n	80006d6 <NVIC_EncodePriority+0x32>
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006d8:	2201      	movs	r2, #1
 80006da:	69bb      	ldr	r3, [r7, #24]
 80006dc:	fa02 f303 	lsl.w	r3, r2, r3
 80006e0:	1e5a      	subs	r2, r3, #1
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	401a      	ands	r2, r3
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ea:	2101      	movs	r1, #1
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	fa01 f303 	lsl.w	r3, r1, r3
 80006f2:	1e59      	subs	r1, r3, #1
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006f8:	4313      	orrs	r3, r2
         );
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3724      	adds	r7, #36	; 0x24
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
	...

08000708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000718:	d301      	bcc.n	800071e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800071a:	2301      	movs	r3, #1
 800071c:	e00f      	b.n	800073e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <SysTick_Config+0x40>)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000726:	210f      	movs	r1, #15
 8000728:	f04f 30ff 	mov.w	r0, #4294967295
 800072c:	f7ff ff90 	bl	8000650 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	4b05      	ldr	r3, [pc, #20]	; (8000748 <SysTick_Config+0x40>)
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000736:	4b04      	ldr	r3, [pc, #16]	; (8000748 <SysTick_Config+0x40>)
 8000738:	2207      	movs	r2, #7
 800073a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800073c:	2300      	movs	r3, #0
}
 800073e:	4618      	mov	r0, r3
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	e000e010 	.word	0xe000e010

0800074c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000754:	6878      	ldr	r0, [r7, #4]
 8000756:	f7ff ff2f 	bl	80005b8 <NVIC_SetPriorityGrouping>
}
 800075a:	bf00      	nop
 800075c:	3708      	adds	r7, #8
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000762:	b580      	push	{r7, lr}
 8000764:	b086      	sub	sp, #24
 8000766:	af00      	add	r7, sp, #0
 8000768:	4603      	mov	r3, r0
 800076a:	60b9      	str	r1, [r7, #8]
 800076c:	607a      	str	r2, [r7, #4]
 800076e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000774:	f7ff ff44 	bl	8000600 <NVIC_GetPriorityGrouping>
 8000778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800077a:	687a      	ldr	r2, [r7, #4]
 800077c:	68b9      	ldr	r1, [r7, #8]
 800077e:	6978      	ldr	r0, [r7, #20]
 8000780:	f7ff ff90 	bl	80006a4 <NVIC_EncodePriority>
 8000784:	4602      	mov	r2, r0
 8000786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800078a:	4611      	mov	r1, r2
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff ff5f 	bl	8000650 <NVIC_SetPriority>
}
 8000792:	bf00      	nop
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b082      	sub	sp, #8
 800079e:	af00      	add	r7, sp, #0
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	4618      	mov	r0, r3
 80007aa:	f7ff ff37 	bl	800061c <NVIC_EnableIRQ>
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff ffa2 	bl	8000708 <SysTick_Config>
 80007c4:	4603      	mov	r3, r0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b04      	cmp	r3, #4
 80007dc:	d106      	bne.n	80007ec <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80007de:	4a09      	ldr	r2, [pc, #36]	; (8000804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80007ea:	e005      	b.n	80007f8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80007ec:	4a05      	ldr	r2, [pc, #20]	; (8000804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f023 0304 	bic.w	r3, r3, #4
 80007f6:	6013      	str	r3, [r2, #0]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000808:	b480      	push	{r7}
 800080a:	b089      	sub	sp, #36	; 0x24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000816:	2300      	movs	r3, #0
 8000818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800081e:	2300      	movs	r3, #0
 8000820:	61fb      	str	r3, [r7, #28]
 8000822:	e159      	b.n	8000ad8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000824:	2201      	movs	r2, #1
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	697b      	ldr	r3, [r7, #20]
 8000834:	4013      	ands	r3, r2
 8000836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000838:	693a      	ldr	r2, [r7, #16]
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	429a      	cmp	r2, r3
 800083e:	f040 8148 	bne.w	8000ad2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	2b02      	cmp	r3, #2
 8000848:	d003      	beq.n	8000852 <HAL_GPIO_Init+0x4a>
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	2b12      	cmp	r3, #18
 8000850:	d123      	bne.n	800089a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	08da      	lsrs	r2, r3, #3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	3208      	adds	r2, #8
 800085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800085e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	220f      	movs	r2, #15
 800086a:	fa02 f303 	lsl.w	r3, r2, r3
 800086e:	43db      	mvns	r3, r3
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	4013      	ands	r3, r2
 8000874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	691a      	ldr	r2, [r3, #16]
 800087a:	69fb      	ldr	r3, [r7, #28]
 800087c:	f003 0307 	and.w	r3, r3, #7
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	fa02 f303 	lsl.w	r3, r2, r3
 8000886:	69ba      	ldr	r2, [r7, #24]
 8000888:	4313      	orrs	r3, r2
 800088a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	08da      	lsrs	r2, r3, #3
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3208      	adds	r2, #8
 8000894:	69b9      	ldr	r1, [r7, #24]
 8000896:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	2203      	movs	r2, #3
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	43db      	mvns	r3, r3
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	4013      	ands	r3, r2
 80008b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	f003 0203 	and.w	r2, r3, #3
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	fa02 f303 	lsl.w	r3, r2, r3
 80008c2:	69ba      	ldr	r2, [r7, #24]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	69ba      	ldr	r2, [r7, #24]
 80008cc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d00b      	beq.n	80008ee <HAL_GPIO_Init+0xe6>
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d007      	beq.n	80008ee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	2b11      	cmp	r3, #17
 80008e4:	d003      	beq.n	80008ee <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b12      	cmp	r3, #18
 80008ec:	d130      	bne.n	8000950 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	005b      	lsls	r3, r3, #1
 80008f8:	2203      	movs	r2, #3
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4013      	ands	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	fa02 f303 	lsl.w	r3, r2, r3
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	4313      	orrs	r3, r2
 8000916:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	69ba      	ldr	r2, [r7, #24]
 800091c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000924:	2201      	movs	r2, #1
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	69ba      	ldr	r2, [r7, #24]
 8000930:	4013      	ands	r3, r2
 8000932:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	091b      	lsrs	r3, r3, #4
 800093a:	f003 0201 	and.w	r2, r3, #1
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	69ba      	ldr	r2, [r7, #24]
 8000946:	4313      	orrs	r3, r2
 8000948:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	68db      	ldr	r3, [r3, #12]
 8000954:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	2203      	movs	r2, #3
 800095c:	fa02 f303 	lsl.w	r3, r2, r3
 8000960:	43db      	mvns	r3, r3
 8000962:	69ba      	ldr	r2, [r7, #24]
 8000964:	4013      	ands	r3, r2
 8000966:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	689a      	ldr	r2, [r3, #8]
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	69ba      	ldr	r2, [r7, #24]
 8000976:	4313      	orrs	r3, r2
 8000978:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	69ba      	ldr	r2, [r7, #24]
 800097e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	685b      	ldr	r3, [r3, #4]
 8000984:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000988:	2b00      	cmp	r3, #0
 800098a:	f000 80a2 	beq.w	8000ad2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4a56      	ldr	r2, [pc, #344]	; (8000aec <HAL_GPIO_Init+0x2e4>)
 8000994:	4b55      	ldr	r3, [pc, #340]	; (8000aec <HAL_GPIO_Init+0x2e4>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099c:	6453      	str	r3, [r2, #68]	; 0x44
 800099e:	4b53      	ldr	r3, [pc, #332]	; (8000aec <HAL_GPIO_Init+0x2e4>)
 80009a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009aa:	4a51      	ldr	r2, [pc, #324]	; (8000af0 <HAL_GPIO_Init+0x2e8>)
 80009ac:	69fb      	ldr	r3, [r7, #28]
 80009ae:	089b      	lsrs	r3, r3, #2
 80009b0:	3302      	adds	r3, #2
 80009b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009b8:	69fb      	ldr	r3, [r7, #28]
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	220f      	movs	r2, #15
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	69ba      	ldr	r2, [r7, #24]
 80009ca:	4013      	ands	r3, r2
 80009cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a48      	ldr	r2, [pc, #288]	; (8000af4 <HAL_GPIO_Init+0x2ec>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d019      	beq.n	8000a0a <HAL_GPIO_Init+0x202>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a47      	ldr	r2, [pc, #284]	; (8000af8 <HAL_GPIO_Init+0x2f0>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d013      	beq.n	8000a06 <HAL_GPIO_Init+0x1fe>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a46      	ldr	r2, [pc, #280]	; (8000afc <HAL_GPIO_Init+0x2f4>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d00d      	beq.n	8000a02 <HAL_GPIO_Init+0x1fa>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a45      	ldr	r2, [pc, #276]	; (8000b00 <HAL_GPIO_Init+0x2f8>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0x1f6>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a44      	ldr	r2, [pc, #272]	; (8000b04 <HAL_GPIO_Init+0x2fc>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_GPIO_Init+0x1f2>
 80009f6:	2304      	movs	r3, #4
 80009f8:	e008      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 80009fa:	2307      	movs	r3, #7
 80009fc:	e006      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 80009fe:	2303      	movs	r3, #3
 8000a00:	e004      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 8000a02:	2302      	movs	r3, #2
 8000a04:	e002      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 8000a06:	2301      	movs	r3, #1
 8000a08:	e000      	b.n	8000a0c <HAL_GPIO_Init+0x204>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	69fa      	ldr	r2, [r7, #28]
 8000a0e:	f002 0203 	and.w	r2, r2, #3
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	4093      	lsls	r3, r2
 8000a16:	69ba      	ldr	r2, [r7, #24]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a1c:	4934      	ldr	r1, [pc, #208]	; (8000af0 <HAL_GPIO_Init+0x2e8>)
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	69ba      	ldr	r2, [r7, #24]
 8000a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a2a:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	43db      	mvns	r3, r3
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	4013      	ands	r3, r2
 8000a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d003      	beq.n	8000a4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a46:	69ba      	ldr	r2, [r7, #24]
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a4e:	4a2e      	ldr	r2, [pc, #184]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000a50:	69bb      	ldr	r3, [r7, #24]
 8000a52:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	43db      	mvns	r3, r3
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	4013      	ands	r3, r2
 8000a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d003      	beq.n	8000a78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a70:	69ba      	ldr	r2, [r7, #24]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a78:	4a23      	ldr	r2, [pc, #140]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000a7a:	69bb      	ldr	r3, [r7, #24]
 8000a7c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a7e:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a84:	693b      	ldr	r3, [r7, #16]
 8000a86:	43db      	mvns	r3, r3
 8000a88:	69ba      	ldr	r2, [r7, #24]
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a9a:	69ba      	ldr	r2, [r7, #24]
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aa2:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aae:	693b      	ldr	r3, [r7, #16]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	69ba      	ldr	r2, [r7, #24]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d003      	beq.n	8000acc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000acc:	4a0e      	ldr	r2, [pc, #56]	; (8000b08 <HAL_GPIO_Init+0x300>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	61fb      	str	r3, [r7, #28]
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	2b0f      	cmp	r3, #15
 8000adc:	f67f aea2 	bls.w	8000824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ae0:	bf00      	nop
 8000ae2:	3724      	adds	r7, #36	; 0x24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40013800 	.word	0x40013800
 8000af4:	40020000 	.word	0x40020000
 8000af8:	40020400 	.word	0x40020400
 8000afc:	40020800 	.word	0x40020800
 8000b00:	40020c00 	.word	0x40020c00
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40013c00 	.word	0x40013c00

08000b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	807b      	strh	r3, [r7, #2]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b1c:	787b      	ldrb	r3, [r7, #1]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d003      	beq.n	8000b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b22:	887a      	ldrh	r2, [r7, #2]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b28:	e003      	b.n	8000b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	041a      	lsls	r2, r3, #16
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	619a      	str	r2, [r3, #24]
}
 8000b32:	bf00      	nop
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b083      	sub	sp, #12
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	6078      	str	r0, [r7, #4]
 8000b46:	460b      	mov	r3, r1
 8000b48:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	695a      	ldr	r2, [r3, #20]
 8000b4e:	887b      	ldrh	r3, [r7, #2]
 8000b50:	405a      	eors	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	615a      	str	r2, [r3, #20]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 8000b62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b64:	b08f      	sub	sp, #60	; 0x3c
 8000b66:	af0a      	add	r7, sp, #40	; 0x28
 8000b68:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d101      	bne.n	8000b78 <HAL_PCD_Init+0x16>
  {
    return HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	e0f7      	b.n	8000d68 <HAL_PCD_Init+0x206>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f006 fdc5 	bl	8007710 <HAL_PCD_MspInit>

  /* Disable the Interrupts */
 __HAL_PCD_DISABLE(hpcd);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f002 f9f2 	bl	8002f74 <USB_DisableGlobalInt>
 
 /*Init the Core (common init.) */
 USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	603b      	str	r3, [r7, #0]
 8000b96:	687e      	ldr	r6, [r7, #4]
 8000b98:	466d      	mov	r5, sp
 8000b9a:	f106 0410 	add.w	r4, r6, #16
 8000b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ba4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ba6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000baa:	e885 0003 	stmia.w	r5, {r0, r1}
 8000bae:	1d33      	adds	r3, r6, #4
 8000bb0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000bb2:	6838      	ldr	r0, [r7, #0]
 8000bb4:	f002 f97c 	bl	8002eb0 <USB_CoreInit>
 
 /* Force Device Mode*/
 USB_SetCurrentMode(hpcd->Instance , USB_OTG_DEVICE_MODE);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 f9e9 	bl	8002f96 <USB_SetCurrentMode>
 
 /* Init endpoints structures */
 for (i = 0U; i < 15U; i++)
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	e04c      	b.n	8000c64 <HAL_PCD_Init+0x102>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1U;
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	1a9b      	subs	r3, r3, r2
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	440b      	add	r3, r1
 8000bd8:	3339      	adds	r3, #57	; 0x39
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].num = i;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	b2d8      	uxtb	r0, r3
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	4613      	mov	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	440b      	add	r3, r1
 8000bf0:	3338      	adds	r3, #56	; 0x38
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	b298      	uxth	r0, r3
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	68fa      	ldr	r2, [r7, #12]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	1a9b      	subs	r3, r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	440b      	add	r3, r1
 8000c08:	333e      	adds	r3, #62	; 0x3e
 8000c0a:	4602      	mov	r2, r0
 8000c0c:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	4613      	mov	r3, r2
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	1a9b      	subs	r3, r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	333b      	adds	r3, #59	; 0x3b
 8000c1e:	2200      	movs	r2, #0
 8000c20:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].maxpacket = 0U;
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	68fa      	ldr	r2, [r7, #12]
 8000c26:	4613      	mov	r3, r2
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	1a9b      	subs	r3, r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	440b      	add	r3, r1
 8000c30:	3340      	adds	r3, #64	; 0x40
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_buff = 0U;
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4613      	mov	r3, r2
 8000c3c:	00db      	lsls	r3, r3, #3
 8000c3e:	1a9b      	subs	r3, r3, r2
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	440b      	add	r3, r1
 8000c44:	3344      	adds	r3, #68	; 0x44
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
   hpcd->IN_ep[i].xfer_len = 0U;
 8000c4a:	6879      	ldr	r1, [r7, #4]
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	440b      	add	r3, r1
 8000c58:	334c      	adds	r3, #76	; 0x4c
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 for (i = 0U; i < 15U; i++)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3301      	adds	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2b0e      	cmp	r3, #14
 8000c68:	d9af      	bls.n	8000bca <HAL_PCD_Init+0x68>
 }
 
 for (i = 0U; i < 15U; i++)
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	e05a      	b.n	8000d26 <HAL_PCD_Init+0x1c4>
 {
   hpcd->OUT_ep[i].is_in = 0U;
 8000c70:	6879      	ldr	r1, [r7, #4]
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4613      	mov	r3, r2
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	1a9b      	subs	r3, r3, r2
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	440b      	add	r3, r1
 8000c7e:	f203 13f9 	addw	r3, r3, #505	; 0x1f9
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].num = i;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	b2d8      	uxtb	r0, r3
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	68fa      	ldr	r2, [r7, #12]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	1a9b      	subs	r3, r3, r2
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	440b      	add	r3, r1
 8000c98:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	701a      	strb	r2, [r3, #0]
   hpcd->IN_ep[i].tx_fifo_num = i;
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	b298      	uxth	r0, r3
 8000ca4:	6879      	ldr	r1, [r7, #4]
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	4613      	mov	r3, r2
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	1a9b      	subs	r3, r3, r2
 8000cae:	009b      	lsls	r3, r3, #2
 8000cb0:	440b      	add	r3, r1
 8000cb2:	333e      	adds	r3, #62	; 0x3e
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	801a      	strh	r2, [r3, #0]
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000cb8:	6879      	ldr	r1, [r7, #4]
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4613      	mov	r3, r2
 8000cbe:	00db      	lsls	r3, r3, #3
 8000cc0:	1a9b      	subs	r3, r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	f203 13fb 	addw	r3, r3, #507	; 0x1fb
 8000cca:	2200      	movs	r2, #0
 8000ccc:	701a      	strb	r2, [r3, #0]
   hpcd->OUT_ep[i].maxpacket = 0U;
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	68fa      	ldr	r2, [r7, #12]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	00db      	lsls	r3, r3, #3
 8000cd6:	1a9b      	subs	r3, r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	440b      	add	r3, r1
 8000cdc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_buff = 0U;
 8000ce4:	6879      	ldr	r1, [r7, #4]
 8000ce6:	68fa      	ldr	r2, [r7, #12]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	00db      	lsls	r3, r3, #3
 8000cec:	1a9b      	subs	r3, r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	440b      	add	r3, r1
 8000cf2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
   hpcd->OUT_ep[i].xfer_len = 0U;
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	00db      	lsls	r3, r3, #3
 8000d02:	1a9b      	subs	r3, r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	440b      	add	r3, r1
 8000d08:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
   
   hpcd->Instance->DIEPTXF[i] = 0U;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	3340      	adds	r3, #64	; 0x40
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	4413      	add	r3, r2
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
 for (i = 0U; i < 15U; i++)
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	3301      	adds	r3, #1
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	2b0e      	cmp	r3, #14
 8000d2a:	d9a1      	bls.n	8000c70 <HAL_PCD_Init+0x10e>
 }
 
 /* Init Device */
 USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	603b      	str	r3, [r7, #0]
 8000d32:	687e      	ldr	r6, [r7, #4]
 8000d34:	466d      	mov	r5, sp
 8000d36:	f106 0410 	add.w	r4, r6, #16
 8000d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d46:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d4a:	1d33      	adds	r3, r6, #4
 8000d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d4e:	6838      	ldr	r0, [r7, #0]
 8000d50:	f002 f948 	bl	8002fe4 <USB_DevInit>
 
 hpcd->State= HAL_PCD_STATE_READY;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2201      	movs	r2, #1
 8000d58:	f883 23b9 	strb.w	r2, [r3, #953]	; 0x3b9
 {
   HAL_PCDEx_ActivateBCD(hpcd);
 }
#endif /* USB_OTG_GCCFG_BCDEN */
 
 USB_DevDisconnect (hpcd->Instance);  
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 f969 	bl	8004038 <USB_DevDisconnect>
 return HAL_OK;
 8000d66:	2300      	movs	r3, #0
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d70 <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd); 
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d101      	bne.n	8000d86 <HAL_PCD_Start+0x16>
 8000d82:	2302      	movs	r3, #2
 8000d84:	e012      	b.n	8000dac <HAL_PCD_Start+0x3c>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DevConnect (hpcd->Instance);  
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f003 f939 	bl	800400a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 f8d8 	bl	8002f52 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8000daa:	2300      	movs	r3, #0
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}

08000db4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08c      	sub	sp, #48	; 0x30
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	623b      	str	r3, [r7, #32]
  uint32_t i = 0U, ep_intr = 0U, epint = 0U, epnum = 0U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fifoemptymsk = 0U, temp = 0U;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61bb      	str	r3, [r7, #24]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  uint32_t hclk = 180000000U;
 8000dda:	4b7c      	ldr	r3, [pc, #496]	; (8000fcc <HAL_PCD_IRQHandler+0x218>)
 8000ddc:	613b      	str	r3, [r7, #16]
  
  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f003 f9ca 	bl	800417c <USB_GetMode>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	f040 8468 	bne.w	80016c0 <HAL_PCD_IRQHandler+0x90c>
  {    
    /* avoid spurious interrupt */
    if(__HAL_PCD_IS_INVALID_INTERRUPT(hpcd)) 
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 f936 	bl	8004066 <USB_ReadInterrupts>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	f000 845e 	beq.w	80016be <HAL_PCD_IRQHandler+0x90a>
    {
      return;
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f003 f92d 	bl	8004066 <USB_ReadInterrupts>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d107      	bne.n	8000e26 <HAL_PCD_IRQHandler+0x72>
    {
     /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	6812      	ldr	r2, [r2, #0]
 8000e1e:	6952      	ldr	r2, [r2, #20]
 8000e20:	f002 0202 	and.w	r2, r2, #2
 8000e24:	615a      	str	r2, [r3, #20]
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f003 f91b 	bl	8004066 <USB_ReadInterrupts>
 8000e30:	4603      	mov	r3, r0
 8000e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000e3a:	f040 80b2 	bne.w	8000fa2 <HAL_PCD_IRQHandler+0x1ee>
    {
      epnum = 0U;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
      
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f003 f922 	bl	8004090 <USB_ReadDevAllOutEpInterrupt>
 8000e4c:	62b8      	str	r0, [r7, #40]	; 0x28
      
      while ( ep_intr )
 8000e4e:	e0a4      	b.n	8000f9a <HAL_PCD_IRQHandler+0x1e6>
      {
        if (ep_intr & 0x1U)
 8000e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 8099 	beq.w	8000f8e <HAL_PCD_IRQHandler+0x1da>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, epnum);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e62:	b2d2      	uxtb	r2, r2
 8000e64:	4611      	mov	r1, r2
 8000e66:	4618      	mov	r0, r3
 8000e68:	f003 f942 	bl	80040f0 <USB_ReadDevOutEPInterrupt>
 8000e6c:	61f8      	str	r0, [r7, #28]
          
          if(( epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0301 	and.w	r3, r3, #1
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d06b      	beq.n	8000f50 <HAL_PCD_IRQHandler+0x19c>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8000e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7a:	015a      	lsls	r2, r3, #5
 8000e7c:	6a3b      	ldr	r3, [r7, #32]
 8000e7e:	4413      	add	r3, r2
 8000e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000e84:	461a      	mov	r2, r3
 8000e86:	2301      	movs	r3, #1
 8000e88:	6093      	str	r3, [r2, #8]
            
            if(hpcd->Init.dma_enable == 1U)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d13c      	bne.n	8000f0c <HAL_PCD_IRQHandler+0x158>
            {
              hpcd->OUT_ep[epnum].xfer_count = hpcd->OUT_ep[epnum].maxpacket- (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ); 
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e96:	4613      	mov	r3, r2
 8000e98:	00db      	lsls	r3, r3, #3
 8000e9a:	1a9b      	subs	r3, r3, r2
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	440b      	add	r3, r1
 8000ea0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea8:	0159      	lsls	r1, r3, #5
 8000eaa:	6a3b      	ldr	r3, [r7, #32]
 8000eac:	440b      	add	r3, r1
 8000eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000eb8:	1ad1      	subs	r1, r2, r3
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	1a9b      	subs	r3, r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4403      	add	r3, r0
 8000ec8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8000ecc:	6019      	str	r1, [r3, #0]
              hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;            
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	1a9b      	subs	r3, r3, r2
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	440b      	add	r3, r1
 8000edc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000ee0:	6819      	ldr	r1, [r3, #0]
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ee6:	4613      	mov	r3, r2
 8000ee8:	00db      	lsls	r3, r3, #3
 8000eea:	1a9b      	subs	r3, r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	4403      	add	r3, r0
 8000ef0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4419      	add	r1, r3
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000efc:	4613      	mov	r3, r2
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	1a9b      	subs	r3, r3, r2
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	4403      	add	r3, r0
 8000f06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000f0a:	6019      	str	r1, [r3, #0]
            }
            
            HAL_PCD_DataOutStageCallback(hpcd, epnum);
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4619      	mov	r1, r3
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f006 fc4c 	bl	80077b0 <HAL_PCD_DataOutStageCallback>
            if(hpcd->Init.dma_enable == 1U)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691b      	ldr	r3, [r3, #16]
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	d117      	bne.n	8000f50 <HAL_PCD_IRQHandler+0x19c>
            {
              if((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8000f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d114      	bne.n	8000f50 <HAL_PCD_IRQHandler+0x19c>
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	440b      	add	r3, r1
 8000f34:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d108      	bne.n	8000f50 <HAL_PCD_IRQHandler+0x19c>
              {
                 /* this is ZLP, so prepare EP0 for next setup */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6818      	ldr	r0, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8000f48:	461a      	mov	r2, r3
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	f003 f95a 	bl	8004204 <USB_EP0_OutStart>
              }              
            }
          }
          
          if(( epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0308 	and.w	r3, r3, #8
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00b      	beq.n	8000f72 <HAL_PCD_IRQHandler+0x1be>
          {
            /* Inform the upper layer that a setup packet is available */
            HAL_PCD_SetupStageCallback(hpcd);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f006 fc16 	bl	800778c <HAL_PCD_SetupStageCallback>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8000f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f62:	015a      	lsls	r2, r3, #5
 8000f64:	6a3b      	ldr	r3, [r7, #32]
 8000f66:	4413      	add	r3, r2
 8000f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	2308      	movs	r3, #8
 8000f70:	6093      	str	r3, [r2, #8]
          }
          
          if(( epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	f003 0310 	and.w	r3, r3, #16
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d008      	beq.n	8000f8e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8000f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f7e:	015a      	lsls	r2, r3, #5
 8000f80:	6a3b      	ldr	r3, [r7, #32]
 8000f82:	4413      	add	r3, r2
 8000f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8000f88:	461a      	mov	r2, r3
 8000f8a:	2310      	movs	r3, #16
 8000f8c:	6093      	str	r3, [r2, #8]
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
          }
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        }
        epnum++;
 8000f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f90:	3301      	adds	r3, #1
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8000f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f96:	085b      	lsrs	r3, r3, #1
 8000f98:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 8000f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f47f af57 	bne.w	8000e50 <HAL_PCD_IRQHandler+0x9c>
      }
    }
    
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 f85d 	bl	8004066 <USB_ReadInterrupts>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000fb6:	f040 80c5 	bne.w	8001144 <HAL_PCD_IRQHandler+0x390>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 f87e 	bl	80040c0 <USB_ReadDevAllInEpInterrupt>
 8000fc4:	62b8      	str	r0, [r7, #40]	; 0x28
      
      epnum = 0U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
      
      while ( ep_intr )
 8000fca:	e0b7      	b.n	800113c <HAL_PCD_IRQHandler+0x388>
 8000fcc:	0aba9500 	.word	0x0aba9500
      {
        if (ep_intr & 0x1U) /* In ITR */
 8000fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 80aa 	beq.w	8001130 <HAL_PCD_IRQHandler+0x37c>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, epnum);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f003 f89e 	bl	8004128 <USB_ReadDevInEPInterrupt>
 8000fec:	61f8      	str	r0, [r7, #28]

           if(( epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d05a      	beq.n	80010ae <HAL_PCD_IRQHandler+0x2fa>
          {
            fifoemptymsk = 0x1U << epnum;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	61bb      	str	r3, [r7, #24]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001002:	6a3b      	ldr	r3, [r7, #32]
 8001004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001008:	4619      	mov	r1, r3
 800100a:	6a3b      	ldr	r3, [r7, #32]
 800100c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	43db      	mvns	r3, r3
 8001016:	4013      	ands	r3, r2
 8001018:	634b      	str	r3, [r1, #52]	; 0x34
            
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	015a      	lsls	r2, r3, #5
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	4413      	add	r3, r2
 8001022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001026:	461a      	mov	r2, r3
 8001028:	2301      	movs	r3, #1
 800102a:	6093      	str	r3, [r2, #8]
            
            if (hpcd->Init.dma_enable == 1U)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	691b      	ldr	r3, [r3, #16]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d11b      	bne.n	800106c <HAL_PCD_IRQHandler+0x2b8>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket; 
 8001034:	6879      	ldr	r1, [r7, #4]
 8001036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001038:	4613      	mov	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	1a9b      	subs	r3, r3, r2
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	440b      	add	r3, r1
 8001042:	3344      	adds	r3, #68	; 0x44
 8001044:	6819      	ldr	r1, [r3, #0]
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800104a:	4613      	mov	r3, r2
 800104c:	00db      	lsls	r3, r3, #3
 800104e:	1a9b      	subs	r3, r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4403      	add	r3, r0
 8001054:	3340      	adds	r3, #64	; 0x40
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4419      	add	r1, r3
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800105e:	4613      	mov	r3, r2
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	4403      	add	r3, r0
 8001068:	3344      	adds	r3, #68	; 0x44
 800106a:	6019      	str	r1, [r3, #0]
            }
                                      
            HAL_PCD_DataInStageCallback(hpcd, epnum);
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4619      	mov	r1, r3
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f006 fbb7 	bl	80077e6 <HAL_PCD_DataInStageCallback>

            if (hpcd->Init.dma_enable == 1U)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d116      	bne.n	80010ae <HAL_PCD_IRQHandler+0x2fa>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	2b00      	cmp	r3, #0
 8001084:	d113      	bne.n	80010ae <HAL_PCD_IRQHandler+0x2fa>
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800108a:	4613      	mov	r3, r2
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	1a9b      	subs	r3, r3, r2
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	440b      	add	r3, r1
 8001094:	334c      	adds	r3, #76	; 0x4c
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d108      	bne.n	80010ae <HAL_PCD_IRQHandler+0x2fa>
              {
                /* prepare to rx more setup packets */
                USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80010a6:	461a      	mov	r2, r3
 80010a8:	2101      	movs	r1, #1
 80010aa:	f003 f8ab 	bl	8004204 <USB_EP0_OutStart>
              }
            }           
          }
           if(( epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d008      	beq.n	80010ca <HAL_PCD_IRQHandler+0x316>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80010b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ba:	015a      	lsls	r2, r3, #5
 80010bc:	6a3b      	ldr	r3, [r7, #32]
 80010be:	4413      	add	r3, r2
 80010c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010c4:	461a      	mov	r2, r3
 80010c6:	2308      	movs	r3, #8
 80010c8:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d008      	beq.n	80010e6 <HAL_PCD_IRQHandler+0x332>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80010d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d6:	015a      	lsls	r2, r3, #5
 80010d8:	6a3b      	ldr	r3, [r7, #32]
 80010da:	4413      	add	r3, r2
 80010dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010e0:	461a      	mov	r2, r3
 80010e2:	2310      	movs	r3, #16
 80010e4:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d008      	beq.n	8001102 <HAL_PCD_IRQHandler+0x34e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80010f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f2:	015a      	lsls	r2, r3, #5
 80010f4:	6a3b      	ldr	r3, [r7, #32]
 80010f6:	4413      	add	r3, r2
 80010f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80010fc:	461a      	mov	r2, r3
 80010fe:	2340      	movs	r3, #64	; 0x40
 8001100:	6093      	str	r3, [r2, #8]
          }
          if(( epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	f003 0302 	and.w	r3, r3, #2
 8001108:	2b00      	cmp	r3, #0
 800110a:	d008      	beq.n	800111e <HAL_PCD_IRQHandler+0x36a>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	015a      	lsls	r2, r3, #5
 8001110:	6a3b      	ldr	r3, [r7, #32]
 8001112:	4413      	add	r3, r2
 8001114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001118:	461a      	mov	r2, r3
 800111a:	2302      	movs	r3, #2
 800111c:	6093      	str	r3, [r2, #8]
          }       
          if(( epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_PCD_IRQHandler+0x37c>
          {
            PCD_WriteEmptyTxFifo(hpcd , epnum);
 8001128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fcf1 	bl	8001b12 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	3301      	adds	r3, #1
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001138:	085b      	lsrs	r3, r3, #1
 800113a:	62bb      	str	r3, [r7, #40]	; 0x28
      while ( ep_intr )
 800113c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800113e:	2b00      	cmp	r3, #0
 8001140:	f47f af46 	bne.w	8000fd0 <HAL_PCD_IRQHandler+0x21c>
      }
    }
    
    /* Handle Resume Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f002 ff8c 	bl	8004066 <USB_ReadInterrupts>
 800114e:	4603      	mov	r3, r0
 8001150:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001154:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001158:	d115      	bne.n	8001186 <HAL_PCD_IRQHandler+0x3d2>
    {    
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800115a:	6a3b      	ldr	r3, [r7, #32]
 800115c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001160:	461a      	mov	r2, r3
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	6053      	str	r3, [r2, #4]
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
      }
      else
#endif /* USB_OTG_GLPMCFG_LPMEN */
      {
        HAL_PCD_ResumeCallback(hpcd);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f006 fbb1 	bl	80078d8 <HAL_PCD_ResumeCallback>
      }
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	6952      	ldr	r2, [r2, #20]
 8001180:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001184:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Suspend Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f002 ff6b 	bl	8004066 <USB_ReadInterrupts>
 8001190:	4603      	mov	r3, r0
 8001192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800119a:	d112      	bne.n	80011c2 <HAL_PCD_IRQHandler+0x40e>
    {
      if((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d102      	bne.n	80011b2 <HAL_PCD_IRQHandler+0x3fe>
      {
        
        HAL_PCD_SuspendCallback(hpcd);
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f006 fb6b 	bl	8007888 <HAL_PCD_SuspendCallback>
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	6952      	ldr	r2, [r2, #20]
 80011bc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80011c0:	615a      	str	r2, [r3, #20]
      }
    }
#endif /* USB_OTG_GLPMCFG_LPMEN */

    /* Handle Reset Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f002 ff4d 	bl	8004066 <USB_ReadInterrupts>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011d6:	f040 8091 	bne.w	80012fc <HAL_PCD_IRQHandler+0x548>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG; 
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011e0:	461a      	mov	r2, r3
 80011e2:	6a3b      	ldr	r3, [r7, #32]
 80011e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f023 0301 	bic.w	r3, r3, #1
 80011ee:	6053      	str	r3, [r2, #4]
      USB_FlushTxFifo(hpcd->Instance , 0x10U);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2110      	movs	r1, #16
 80011f6:	4618      	mov	r0, r3
 80011f8:	f002 f826 	bl	8003248 <USB_FlushTxFifo>
      
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011fc:	2300      	movs	r3, #0
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001200:	e014      	b.n	800122c <HAL_PCD_IRQHandler+0x478>
      {
        USBx_INEP(i)->DIEPINT = 0xFFU;
 8001202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001204:	015a      	lsls	r2, r3, #5
 8001206:	6a3b      	ldr	r3, [r7, #32]
 8001208:	4413      	add	r3, r2
 800120a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800120e:	461a      	mov	r2, r3
 8001210:	23ff      	movs	r3, #255	; 0xff
 8001212:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPINT = 0xFFU;
 8001214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001216:	015a      	lsls	r2, r3, #5
 8001218:	6a3b      	ldr	r3, [r7, #32]
 800121a:	4413      	add	r3, r2
 800121c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001220:	461a      	mov	r2, r3
 8001222:	23ff      	movs	r3, #255	; 0xff
 8001224:	6093      	str	r3, [r2, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001228:	3301      	adds	r3, #1
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001232:	429a      	cmp	r2, r3
 8001234:	d8e5      	bhi.n	8001202 <HAL_PCD_IRQHandler+0x44e>
      }
      USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8001236:	6a3b      	ldr	r3, [r7, #32]
 8001238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800123c:	461a      	mov	r2, r3
 800123e:	f04f 33ff 	mov.w	r3, #4294967295
 8001242:	6193      	str	r3, [r2, #24]
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800124a:	461a      	mov	r2, r3
 800124c:	6a3b      	ldr	r3, [r7, #32]
 800124e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001258:	61d3      	str	r3, [r2, #28]
      
      if(hpcd->Init.use_dedicated_ep1)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	2b00      	cmp	r3, #0
 8001260:	d018      	beq.n	8001294 <HAL_PCD_IRQHandler+0x4e0>
      {
        USBx_DEVICE->DOUTEP1MSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM); 
 8001262:	6a3b      	ldr	r3, [r7, #32]
 8001264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001268:	461a      	mov	r2, r3
 800126a:	6a3b      	ldr	r3, [r7, #32]
 800126c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001274:	f043 030b 	orr.w	r3, r3, #11
 8001278:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);  
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001282:	461a      	mov	r2, r3
 8001284:	6a3b      	ldr	r3, [r7, #32]
 8001286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	f043 030b 	orr.w	r3, r3, #11
 8001290:	6453      	str	r3, [r2, #68]	; 0x44
 8001292:	e015      	b.n	80012c0 <HAL_PCD_IRQHandler+0x50c>
      else
      {
#ifdef USB_OTG_DOEPINT_OTEPSPR
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM | USB_OTG_DOEPMSK_OTEPSPRM);
#else
        USBx_DEVICE->DOEPMSK |= (USB_OTG_DOEPMSK_STUPM | USB_OTG_DOEPMSK_XFRCM | USB_OTG_DOEPMSK_EPDM);
 8001294:	6a3b      	ldr	r3, [r7, #32]
 8001296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800129a:	461a      	mov	r2, r3
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	f043 030b 	orr.w	r3, r3, #11
 80012a8:	6153      	str	r3, [r2, #20]
#endif /* USB_OTG_DOEPINT_OTEPSPR */
        USBx_DEVICE->DIEPMSK |= (USB_OTG_DIEPMSK_TOM | USB_OTG_DIEPMSK_XFRCM | USB_OTG_DIEPMSK_EPDM);
 80012aa:	6a3b      	ldr	r3, [r7, #32]
 80012ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012b0:	461a      	mov	r2, r3
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	f043 030b 	orr.w	r3, r3, #11
 80012be:	6113      	str	r3, [r2, #16]
      }
      
      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80012c0:	6a3b      	ldr	r3, [r7, #32]
 80012c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012c6:	461a      	mov	r2, r3
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80012d4:	6013      	str	r3, [r2, #0]
      
      /* setup EP0 to receive SETUP packets */
      USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	b2d9      	uxtb	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80012e6:	461a      	mov	r2, r3
 80012e8:	f002 ff8c 	bl	8004204 <USB_EP0_OutStart>
        
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	687a      	ldr	r2, [r7, #4]
 80012f2:	6812      	ldr	r2, [r2, #0]
 80012f4:	6952      	ldr	r2, [r2, #20]
 80012f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80012fa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Enumeration done Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f002 feb0 	bl	8004066 <USB_ReadInterrupts>
 8001306:	4603      	mov	r3, r0
 8001308:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800130c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001310:	f040 80da 	bne.w	80014c8 <HAL_PCD_IRQHandler+0x714>
    {
      USB_ActivateSetup(hpcd->Instance);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f002 ff3d 	bl	8004198 <USB_ActivateSetup>
      hpcd->Instance->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	6812      	ldr	r2, [r2, #0]
 8001326:	68d2      	ldr	r2, [r2, #12]
 8001328:	f422 5270 	bic.w	r2, r2, #15360	; 0x3c00
 800132c:	60da      	str	r2, [r3, #12]
      
      if ( USB_GetDevSpeed(hpcd->Instance) == USB_OTG_SPEED_HIGH)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f001 ffe8 	bl	8003308 <USB_GetDevSpeed>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10f      	bne.n	800135e <HAL_PCD_IRQHandler+0x5aa>
      {
        hpcd->Init.speed            = USB_OTG_SPEED_HIGH;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_HS_MAX_PACKET_SIZE ;    
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134a:	615a      	str	r2, [r3, #20]
        hpcd->Instance->GUSBCFG |= (uint32_t)((USBD_HS_TRDT_VALUE << 10U) & USB_OTG_GUSBCFG_TRDT);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	68d2      	ldr	r2, [r2, #12]
 8001356:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	e0a9      	b.n	80014b2 <HAL_PCD_IRQHandler+0x6fe>
      }
      else
      {
        hpcd->Init.speed            = USB_OTG_SPEED_FULL;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2203      	movs	r2, #3
 8001362:	60da      	str	r2, [r3, #12]
        hpcd->Init.ep0_mps          = USB_OTG_FS_MAX_PACKET_SIZE ;  
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2240      	movs	r2, #64	; 0x40
 8001368:	615a      	str	r2, [r3, #20]
        used by application. In the low AHB frequency range it is used to stretch enough the USB response 
        time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access 
        latency to the Data FIFO */
        
        /* Get hclk frequency value */
        hclk = HAL_RCC_GetHCLKFreq();
 800136a:	f001 f8ad 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 800136e:	6138      	str	r0, [r7, #16]
        
        if((hclk >= 14200000U)&&(hclk < 15000000U))
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	4a7b      	ldr	r2, [pc, #492]	; (8001560 <HAL_PCD_IRQHandler+0x7ac>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d90c      	bls.n	8001392 <HAL_PCD_IRQHandler+0x5de>
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	4a7a      	ldr	r2, [pc, #488]	; (8001564 <HAL_PCD_IRQHandler+0x7b0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d808      	bhi.n	8001392 <HAL_PCD_IRQHandler+0x5de>
        {
          /* hclk Clock Range between 14.2-15 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xFU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	68d2      	ldr	r2, [r2, #12]
 800138a:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
 800138e:	60da      	str	r2, [r3, #12]
 8001390:	e08f      	b.n	80014b2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 15000000U)&&(hclk < 16000000U))
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	4a73      	ldr	r2, [pc, #460]	; (8001564 <HAL_PCD_IRQHandler+0x7b0>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d90c      	bls.n	80013b4 <HAL_PCD_IRQHandler+0x600>
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	4a72      	ldr	r2, [pc, #456]	; (8001568 <HAL_PCD_IRQHandler+0x7b4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d808      	bhi.n	80013b4 <HAL_PCD_IRQHandler+0x600>
        {
          /* hclk Clock Range between 15-16 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xEU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	6812      	ldr	r2, [r2, #0]
 80013aa:	68d2      	ldr	r2, [r2, #12]
 80013ac:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	e07e      	b.n	80014b2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 16000000U)&&(hclk < 17200000U))
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	4a6c      	ldr	r2, [pc, #432]	; (8001568 <HAL_PCD_IRQHandler+0x7b4>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d90c      	bls.n	80013d6 <HAL_PCD_IRQHandler+0x622>
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4a6b      	ldr	r2, [pc, #428]	; (800156c <HAL_PCD_IRQHandler+0x7b8>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d808      	bhi.n	80013d6 <HAL_PCD_IRQHandler+0x622>
        {
          /* hclk Clock Range between 16-17.2 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xDU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6812      	ldr	r2, [r2, #0]
 80013cc:	68d2      	ldr	r2, [r2, #12]
 80013ce:	f442 5250 	orr.w	r2, r2, #13312	; 0x3400
 80013d2:	60da      	str	r2, [r3, #12]
 80013d4:	e06d      	b.n	80014b2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 17200000U)&&(hclk < 18500000U))
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	4a64      	ldr	r2, [pc, #400]	; (800156c <HAL_PCD_IRQHandler+0x7b8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d90c      	bls.n	80013f8 <HAL_PCD_IRQHandler+0x644>
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4a63      	ldr	r2, [pc, #396]	; (8001570 <HAL_PCD_IRQHandler+0x7bc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d808      	bhi.n	80013f8 <HAL_PCD_IRQHandler+0x644>
        {
          /* hclk Clock Range between 17.2-18.5 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xCU << 10U) & USB_OTG_GUSBCFG_TRDT);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	68d2      	ldr	r2, [r2, #12]
 80013f0:	f442 5240 	orr.w	r2, r2, #12288	; 0x3000
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	e05c      	b.n	80014b2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 18500000U)&&(hclk < 20000000U))
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	4a5d      	ldr	r2, [pc, #372]	; (8001570 <HAL_PCD_IRQHandler+0x7bc>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d90c      	bls.n	800141a <HAL_PCD_IRQHandler+0x666>
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	4a5c      	ldr	r2, [pc, #368]	; (8001574 <HAL_PCD_IRQHandler+0x7c0>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d808      	bhi.n	800141a <HAL_PCD_IRQHandler+0x666>
        {
          /* hclk Clock Range between 18.5-20 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xBU << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	68d2      	ldr	r2, [r2, #12]
 8001412:	f442 5230 	orr.w	r2, r2, #11264	; 0x2c00
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	e04b      	b.n	80014b2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 20000000U)&&(hclk < 21800000U))
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	4a55      	ldr	r2, [pc, #340]	; (8001574 <HAL_PCD_IRQHandler+0x7c0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d90c      	bls.n	800143c <HAL_PCD_IRQHandler+0x688>
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4a54      	ldr	r2, [pc, #336]	; (8001578 <HAL_PCD_IRQHandler+0x7c4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d808      	bhi.n	800143c <HAL_PCD_IRQHandler+0x688>
        {
          /* hclk Clock Range between 20-21.8 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0xAU << 10U) & USB_OTG_GUSBCFG_TRDT);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	68d2      	ldr	r2, [r2, #12]
 8001434:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	e03a      	b.n	80014b2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 21800000U)&&(hclk < 24000000U))
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4a4e      	ldr	r2, [pc, #312]	; (8001578 <HAL_PCD_IRQHandler+0x7c4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d90c      	bls.n	800145e <HAL_PCD_IRQHandler+0x6aa>
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4a4d      	ldr	r2, [pc, #308]	; (800157c <HAL_PCD_IRQHandler+0x7c8>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d808      	bhi.n	800145e <HAL_PCD_IRQHandler+0x6aa>
        {
          /* hclk Clock Range between 21.8-24 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x9U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	68d2      	ldr	r2, [r2, #12]
 8001456:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 800145a:	60da      	str	r2, [r3, #12]
 800145c:	e029      	b.n	80014b2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 24000000U)&&(hclk < 27700000U))
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	4a46      	ldr	r2, [pc, #280]	; (800157c <HAL_PCD_IRQHandler+0x7c8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d90c      	bls.n	8001480 <HAL_PCD_IRQHandler+0x6cc>
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4a45      	ldr	r2, [pc, #276]	; (8001580 <HAL_PCD_IRQHandler+0x7cc>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d808      	bhi.n	8001480 <HAL_PCD_IRQHandler+0x6cc>
        {
          /* hclk Clock Range between 24-27.7 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x8U << 10U) & USB_OTG_GUSBCFG_TRDT);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	687a      	ldr	r2, [r7, #4]
 8001474:	6812      	ldr	r2, [r2, #0]
 8001476:	68d2      	ldr	r2, [r2, #12]
 8001478:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800147c:	60da      	str	r2, [r3, #12]
 800147e:	e018      	b.n	80014b2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else if((hclk >= 27700000U)&&(hclk < 32000000U))
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	4a3f      	ldr	r2, [pc, #252]	; (8001580 <HAL_PCD_IRQHandler+0x7cc>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d90c      	bls.n	80014a2 <HAL_PCD_IRQHandler+0x6ee>
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4a3e      	ldr	r2, [pc, #248]	; (8001584 <HAL_PCD_IRQHandler+0x7d0>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d808      	bhi.n	80014a2 <HAL_PCD_IRQHandler+0x6ee>
        {
          /* hclk Clock Range between 27.7-32 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x7U << 10U) & USB_OTG_GUSBCFG_TRDT);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	68d2      	ldr	r2, [r2, #12]
 800149a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800149e:	60da      	str	r2, [r3, #12]
 80014a0:	e007      	b.n	80014b2 <HAL_PCD_IRQHandler+0x6fe>
        }
        
        else /* if(hclk >= 32000000) */
        {
          /* hclk Clock Range between 32-180 MHz */
          hpcd->Instance->GUSBCFG |= (uint32_t)((0x6U << 10U) & USB_OTG_GUSBCFG_TRDT);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	6812      	ldr	r2, [r2, #0]
 80014aa:	68d2      	ldr	r2, [r2, #12]
 80014ac:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 80014b0:	60da      	str	r2, [r3, #12]
        }  
      }
      
      HAL_PCD_ResetCallback(hpcd);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f006 f9bf 	bl	8007836 <HAL_PCD_ResetCallback>
      
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6812      	ldr	r2, [r2, #0]
 80014c0:	6952      	ldr	r2, [r2, #20]
 80014c2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80014c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f002 fdca 	bl	8004066 <USB_ReadInterrupts>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	2b10      	cmp	r3, #16
 80014da:	d174      	bne.n	80015c6 <HAL_PCD_IRQHandler+0x812>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	6992      	ldr	r2, [r2, #24]
 80014e6:	f022 0210 	bic.w	r2, r2, #16
 80014ea:	619a      	str	r2, [r3, #24]
      
      temp = USBx->GRXSTSP;
 80014ec:	6a3b      	ldr	r3, [r7, #32]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	617b      	str	r3, [r7, #20]
      
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f003 020f 	and.w	r2, r3, #15
 80014f8:	4613      	mov	r3, r2
 80014fa:	00db      	lsls	r3, r3, #3
 80014fc:	1a9b      	subs	r3, r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
      
      if(((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_DATA_UPDT)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	0c5b      	lsrs	r3, r3, #17
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	2b02      	cmp	r3, #2
 8001514:	d138      	bne.n	8001588 <HAL_PCD_IRQHandler+0x7d4>
      {
        if((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001516:	697a      	ldr	r2, [r7, #20]
 8001518:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800151c:	4013      	ands	r3, r2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d049      	beq.n	80015b6 <HAL_PCD_IRQHandler+0x802>
        {
          USB_ReadPacket(USBx, ep->xfer_buff, (temp & USB_OTG_GRXSTSP_BCNT) >> 4U);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	68d9      	ldr	r1, [r3, #12]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	091b      	lsrs	r3, r3, #4
 800152a:	b29b      	uxth	r3, r3
 800152c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001530:	b29b      	uxth	r3, r3
 8001532:	461a      	mov	r2, r3
 8001534:	6a38      	ldr	r0, [r7, #32]
 8001536:	f002 fc3d 	bl	8003db4 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001546:	441a      	add	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	699a      	ldr	r2, [r3, #24]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001558:	441a      	add	r2, r3
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	619a      	str	r2, [r3, #24]
 800155e:	e02a      	b.n	80015b6 <HAL_PCD_IRQHandler+0x802>
 8001560:	00d8acbf 	.word	0x00d8acbf
 8001564:	00e4e1bf 	.word	0x00e4e1bf
 8001568:	00f423ff 	.word	0x00f423ff
 800156c:	0106737f 	.word	0x0106737f
 8001570:	011a499f 	.word	0x011a499f
 8001574:	01312cff 	.word	0x01312cff
 8001578:	014ca43f 	.word	0x014ca43f
 800157c:	016e35ff 	.word	0x016e35ff
 8001580:	01a6ab1f 	.word	0x01a6ab1f
 8001584:	01e847ff 	.word	0x01e847ff
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17U) ==  STS_SETUP_UPDT)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	0c5b      	lsrs	r3, r3, #17
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	2b06      	cmp	r3, #6
 8001592:	d110      	bne.n	80015b6 <HAL_PCD_IRQHandler+0x802>
      {
        USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 800159a:	2208      	movs	r2, #8
 800159c:	4619      	mov	r1, r3
 800159e:	6a38      	ldr	r0, [r7, #32]
 80015a0:	f002 fc08 	bl	8003db4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4U;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	699a      	ldr	r2, [r3, #24]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	091b      	lsrs	r3, r3, #4
 80015ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015b0:	441a      	add	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	619a      	str	r2, [r3, #24]
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6812      	ldr	r2, [r2, #0]
 80015be:	6992      	ldr	r2, [r2, #24]
 80015c0:	f042 0210 	orr.w	r2, r2, #16
 80015c4:	619a      	str	r2, [r3, #24]
    }
    
    /* Handle SOF Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f002 fd4b 	bl	8004066 <USB_ReadInterrupts>
 80015d0:	4603      	mov	r3, r0
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d10a      	bne.n	80015f0 <HAL_PCD_IRQHandler+0x83c>
    {
      HAL_PCD_SOFCallback(hpcd);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f006 f91d 	bl	800781a <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	6952      	ldr	r2, [r2, #20]
 80015ea:	f002 0208 	and.w	r2, r2, #8
 80015ee:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle Incomplete ISO IN Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f002 fd36 	bl	8004066 <USB_ReadInterrupts>
 80015fa:	4603      	mov	r3, r0
 80015fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001600:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001604:	d10d      	bne.n	8001622 <HAL_PCD_IRQHandler+0x86e>
    {
      HAL_PCD_ISOINIncompleteCallback(hpcd, epnum);
 8001606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001608:	b2db      	uxtb	r3, r3
 800160a:	4619      	mov	r1, r3
 800160c:	6878      	ldr	r0, [r7, #4]
 800160e:	f006 f983 	bl	8007918 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	6952      	ldr	r2, [r2, #20]
 800161c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001620:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Incomplete ISO OUT Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f002 fd1d 	bl	8004066 <USB_ReadInterrupts>
 800162c:	4603      	mov	r3, r0
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001636:	d10d      	bne.n	8001654 <HAL_PCD_IRQHandler+0x8a0>
    {
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, epnum);
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	b2db      	uxtb	r3, r3
 800163c:	4619      	mov	r1, r3
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f006 f958 	bl	80078f4 <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	6952      	ldr	r2, [r2, #20]
 800164e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001652:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Connection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fd04 	bl	8004066 <USB_ReadInterrupts>
 800165e:	4603      	mov	r3, r0
 8001660:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001668:	d10a      	bne.n	8001680 <HAL_PCD_IRQHandler+0x8cc>
    {
      HAL_PCD_ConnectCallback(hpcd);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f006 f966 	bl	800793c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	687a      	ldr	r2, [r7, #4]
 8001676:	6812      	ldr	r2, [r2, #0]
 8001678:	6952      	ldr	r2, [r2, #20]
 800167a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800167e:	615a      	str	r2, [r3, #20]
    } 
    
    /* Handle Disconnection event Interrupt */
    if(__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4618      	mov	r0, r3
 8001686:	f002 fcee 	bl	8004066 <USB_ReadInterrupts>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b04      	cmp	r3, #4
 8001692:	d115      	bne.n	80016c0 <HAL_PCD_IRQHandler+0x90c>
    {
      temp = hpcd->Instance->GOTGINT;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	617b      	str	r3, [r7, #20]
      
      if((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d002      	beq.n	80016ac <HAL_PCD_IRQHandler+0x8f8>
      {
        HAL_PCD_DisconnectCallback(hpcd);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f006 f956 	bl	8007958 <HAL_PCD_DisconnectCallback>
      }
      hpcd->Instance->GOTGINT |= temp;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6812      	ldr	r2, [r2, #0]
 80016b4:	6851      	ldr	r1, [r2, #4]
 80016b6:	697a      	ldr	r2, [r7, #20]
 80016b8:	430a      	orrs	r2, r1
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	e000      	b.n	80016c0 <HAL_PCD_IRQHandler+0x90c>
      return;
 80016be:	bf00      	nop
    }
  }
}
 80016c0:	3730      	adds	r7, #48	; 0x30
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop

080016c8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd); 
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_PCD_SetAddress+0x1a>
 80016de:	2302      	movs	r3, #2
 80016e0:	e00f      	b.n	8001702 <HAL_PCD_SetAddress+0x3a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_SetDevAddress(hpcd->Instance, address);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	78fa      	ldrb	r2, [r7, #3]
 80016f0:	4611      	mov	r1, r2
 80016f2:	4618      	mov	r0, r3
 80016f4:	f002 fc63 	bl	8003fbe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2200      	movs	r2, #0
 80016fc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b084      	sub	sp, #16
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	4608      	mov	r0, r1
 8001714:	4611      	mov	r1, r2
 8001716:	461a      	mov	r2, r3
 8001718:	4603      	mov	r3, r0
 800171a:	70fb      	strb	r3, [r7, #3]
 800171c:	460b      	mov	r3, r1
 800171e:	803b      	strh	r3, [r7, #0]
 8001720:	4613      	mov	r3, r2
 8001722:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001724:	2300      	movs	r3, #0
 8001726:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8001728:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800172c:	2b00      	cmp	r3, #0
 800172e:	da0b      	bge.n	8001748 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001730:	78fb      	ldrb	r3, [r7, #3]
 8001732:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	1a9b      	subs	r3, r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	3338      	adds	r3, #56	; 0x38
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	e00b      	b.n	8001760 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001748:	78fb      	ldrb	r3, [r7, #3]
 800174a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800174e:	4613      	mov	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	1a9b      	subs	r3, r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001766:	b2da      	uxtb	r2, r3
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800176c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	09db      	lsrs	r3, r3, #7
 8001774:	b2db      	uxtb	r3, r3
 8001776:	461a      	mov	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	705a      	strb	r2, [r3, #1]
  ep->maxpacket = ep_mps;
 800177c:	883a      	ldrh	r2, [r7, #0]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	78ba      	ldrb	r2, [r7, #2]
 8001786:	70da      	strb	r2, [r3, #3]
  if (ep->is_in)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	785b      	ldrb	r3, [r3, #1]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d004      	beq.n	800179a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	b29a      	uxth	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK )
 800179a:	78bb      	ldrb	r3, [r7, #2]
 800179c:	2b02      	cmp	r3, #2
 800179e:	d102      	bne.n	80017a6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2200      	movs	r2, #0
 80017a4:	711a      	strb	r2, [r3, #4]
  }
  
  __HAL_LOCK(hpcd); 
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d101      	bne.n	80017b4 <HAL_PCD_EP_Open+0xaa>
 80017b0:	2302      	movs	r3, #2
 80017b2:	e00e      	b.n	80017d2 <HAL_PCD_EP_Open+0xc8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68f9      	ldr	r1, [r7, #12]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f001 fdd5 	bl	8003372 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return ret;
 80017d0:	7afb      	ldrb	r3, [r7, #11]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3710      	adds	r7, #16
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}

080017da <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80017da:	b580      	push	{r7, lr}
 80017dc:	b084      	sub	sp, #16
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
 80017e2:	460b      	mov	r3, r1
 80017e4:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80017e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	da0b      	bge.n	8001806 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80017ee:	78fb      	ldrb	r3, [r7, #3]
 80017f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017f4:	4613      	mov	r3, r2
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	1a9b      	subs	r3, r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	3338      	adds	r3, #56	; 0x38
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	e00b      	b.n	800181e <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8001806:	78fb      	ldrb	r3, [r7, #3]
 8001808:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800180c:	4613      	mov	r3, r2
 800180e:	00db      	lsls	r3, r3, #3
 8001810:	1a9b      	subs	r3, r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	4413      	add	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  }
  ep->num   = ep_addr & 0x7F;
 800181e:	78fb      	ldrb	r3, [r7, #3]
 8001820:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001824:	b2da      	uxtb	r2, r3
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	701a      	strb	r2, [r3, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 800182a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800182e:	b2db      	uxtb	r3, r3
 8001830:	09db      	lsrs	r3, r3, #7
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001840:	2b01      	cmp	r3, #1
 8001842:	d101      	bne.n	8001848 <HAL_PCD_EP_Close+0x6e>
 8001844:	2302      	movs	r3, #2
 8001846:	e00e      	b.n	8001866 <HAL_PCD_EP_Close+0x8c>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	68f9      	ldr	r1, [r7, #12]
 8001856:	4618      	mov	r0, r3
 8001858:	f001 fe14 	bl	8003484 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer   
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	460b      	mov	r3, r1
 800187c:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800187e:	7afb      	ldrb	r3, [r7, #11]
 8001880:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001884:	4613      	mov	r3, r2
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	1a9b      	subs	r3, r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001890:	68fa      	ldr	r2, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2200      	movs	r2, #0
 80018ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 80018ae:	7afb      	ldrb	r3, [r7, #11]
 80018b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d102      	bne.n	80018c8 <HAL_PCD_EP_Receive+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 80018c8:	7afb      	ldrb	r3, [r7, #11]
 80018ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d109      	bne.n	80018e6 <HAL_PCD_EP_Receive+0x78>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	461a      	mov	r2, r3
 80018de:	6979      	ldr	r1, [r7, #20]
 80018e0:	f002 f8d4 	bl	8003a8c <USB_EP0StartXfer>
 80018e4:	e008      	b.n	80018f8 <HAL_PCD_EP_Receive+0x8a>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	691b      	ldr	r3, [r3, #16]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	461a      	mov	r2, r3
 80018f2:	6979      	ldr	r1, [r7, #20]
 80018f4:	f001 fe88 	bl	8003608 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3718      	adds	r7, #24
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}

08001902 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
 800190a:	460b      	mov	r3, r1
 800190c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800190e:	78fb      	ldrb	r3, [r7, #3]
 8001910:	f003 020f 	and.w	r2, r3, #15
 8001914:	6879      	ldr	r1, [r7, #4]
 8001916:	4613      	mov	r3, r2
 8001918:	00db      	lsls	r3, r3, #3
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	440b      	add	r3, r1
 8001920:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	b29b      	uxth	r3, r3
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer   
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	607a      	str	r2, [r7, #4]
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	460b      	mov	r3, r1
 8001942:	72fb      	strb	r3, [r7, #11]
  USB_OTG_EPTypeDef *ep;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001944:	7afb      	ldrb	r3, [r7, #11]
 8001946:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	3338      	adds	r3, #56	; 0x38
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	617b      	str	r3, [r7, #20]
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	683a      	ldr	r2, [r7, #0]
 8001964:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2201      	movs	r2, #1
 8001970:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & 0x7F;
 8001972:	7afb      	ldrb	r3, [r7, #11]
 8001974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001978:	b2da      	uxtb	r2, r3
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	701a      	strb	r2, [r3, #0]
  
  if (hpcd->Init.dma_enable == 1U)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	691b      	ldr	r3, [r3, #16]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d102      	bne.n	800198c <HAL_PCD_EP_Transmit+0x58>
  {
    ep->dma_addr = (uint32_t)pBuf;  
 8001986:	687a      	ldr	r2, [r7, #4]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	611a      	str	r2, [r3, #16]
  }
  
  if ((ep_addr & 0x7F) == 0)
 800198c:	7afb      	ldrb	r3, [r7, #11]
 800198e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_PCD_EP_Transmit+0x76>
  {
    USB_EP0StartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	6979      	ldr	r1, [r7, #20]
 80019a4:	f002 f872 	bl	8003a8c <USB_EP0StartXfer>
 80019a8:	e008      	b.n	80019bc <HAL_PCD_EP_Transmit+0x88>
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep, hpcd->Init.dma_enable);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6818      	ldr	r0, [r3, #0]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	461a      	mov	r2, r3
 80019b6:	6979      	ldr	r1, [r7, #20]
 80019b8:	f001 fe26 	bl	8003608 <USB_EPStartXfer>
  }
  
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b084      	sub	sp, #16
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
 80019ce:	460b      	mov	r3, r1
 80019d0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 80019d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da0b      	bge.n	80019f2 <HAL_PCD_EP_SetStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80019da:	78fb      	ldrb	r3, [r7, #3]
 80019dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80019e0:	4613      	mov	r3, r2
 80019e2:	00db      	lsls	r3, r3, #3
 80019e4:	1a9b      	subs	r3, r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	3338      	adds	r3, #56	; 0x38
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
 80019f0:	e009      	b.n	8001a06 <HAL_PCD_EP_SetStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019f2:	78fa      	ldrb	r2, [r7, #3]
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 1U;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	09db      	lsrs	r3, r3, #7
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	705a      	strb	r2, [r3, #1]
  
  
  __HAL_LOCK(hpcd); 
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d101      	bne.n	8001a36 <HAL_PCD_EP_SetStall+0x70>
 8001a32:	2302      	movs	r3, #2
 8001a34:	e01e      	b.n	8001a74 <HAL_PCD_EP_SetStall+0xae>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPSetStall(hpcd->Instance , ep);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	68f9      	ldr	r1, [r7, #12]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f002 f9dc 	bl	8003e02 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 8001a4a:	78fb      	ldrb	r3, [r7, #3]
 8001a4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d10a      	bne.n	8001a6a <HAL_PCD_EP_SetStall+0xa4>
  {
    USB_EP0_OutStart(hpcd->Instance, hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6818      	ldr	r0, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	b2d9      	uxtb	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 8001a64:	461a      	mov	r2, r3
 8001a66:	f002 fbcd 	bl	8004204 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd); 
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  
  return HAL_OK;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	70fb      	strb	r3, [r7, #3]
  USB_OTG_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 8001a88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da0b      	bge.n	8001aa8 <HAL_PCD_EP_ClrStall+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001a96:	4613      	mov	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	1a9b      	subs	r3, r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	3338      	adds	r3, #56	; 0x38
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	e009      	b.n	8001abc <HAL_PCD_EP_ClrStall+0x40>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001aa8:	78fa      	ldrb	r2, [r7, #3]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
  }
  
  ep->is_stall = 0U;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	709a      	strb	r2, [r3, #2]
  ep->num   = ep_addr & 0x7F;
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	701a      	strb	r2, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	09db      	lsrs	r3, r3, #7
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	461a      	mov	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	705a      	strb	r2, [r3, #1]
  
  __HAL_LOCK(hpcd); 
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 33b8 	ldrb.w	r3, [r3, #952]	; 0x3b8
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_PCD_EP_ClrStall+0x70>
 8001ae8:	2302      	movs	r3, #2
 8001aea:	e00e      	b.n	8001b0a <HAL_PCD_EP_ClrStall+0x8e>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
  USB_EPClearStall(hpcd->Instance , ep);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68f9      	ldr	r1, [r7, #12]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f002 f9f2 	bl	8003ee4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 23b8 	strb.w	r2, [r3, #952]	; 0x3b8
    
  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum  endpoint number   
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b08a      	sub	sp, #40	; 0x28
 8001b16:	af02      	add	r7, sp, #8
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;  
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	617b      	str	r3, [r7, #20]
  USB_OTG_EPTypeDef *ep;
  int32_t len = 0U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61fb      	str	r3, [r7, #28]
  uint32_t len32b;
  uint32_t fifoemptymsk = 0U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]

  ep = &hpcd->IN_ep[epnum];
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	3338      	adds	r3, #56	; 0x38
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
  len = ep->xfer_len - ep->xfer_count;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	695a      	ldr	r2, [r3, #20]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	61fb      	str	r3, [r7, #28]
  
  if (len > ep->maxpacket)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d202      	bcs.n	8001b58 <PCD_WriteEmptyTxFifo+0x46>
  {
    len = ep->maxpacket;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	61fb      	str	r3, [r7, #28]
  }
  
  
  len32b = (len + 3U) / 4U;
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	3303      	adds	r3, #3
 8001b5c:	089b      	lsrs	r3, r3, #2
 8001b5e:	61bb      	str	r3, [r7, #24]
 
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001b60:	e02b      	b.n	8001bba <PCD_WriteEmptyTxFifo+0xa8>
          (ep->xfer_count < ep->xfer_len) &&
            (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	61fb      	str	r3, [r7, #28]
    
    if (len > ep->maxpacket)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	689a      	ldr	r2, [r3, #8]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d202      	bcs.n	8001b7e <PCD_WriteEmptyTxFifo+0x6c>
    {
      len = ep->maxpacket;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3303      	adds	r3, #3
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	61bb      	str	r3, [r7, #24]
    
    USB_WritePacket(USBx, ep->xfer_buff, epnum, len, hpcd->Init.dma_enable); 
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	68d9      	ldr	r1, [r3, #12]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	b298      	uxth	r0, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6978      	ldr	r0, [r7, #20]
 8001b9e:	f002 f8d4 	bl	8003d4a <USB_WritePacket>
    
    ep->xfer_buff  += len;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	441a      	add	r2, r3
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	441a      	add	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	619a      	str	r2, [r3, #24]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	015a      	lsls	r2, r3, #5
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d909      	bls.n	8001be4 <PCD_WriteEmptyTxFifo+0xd2>
          (ep->xfer_count < ep->xfer_len) &&
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	699a      	ldr	r2, [r3, #24]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	695b      	ldr	r3, [r3, #20]
  while  (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) > len32b) &&
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d203      	bcs.n	8001be4 <PCD_WriteEmptyTxFifo+0xd2>
            (ep->xfer_len != 0U))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	695b      	ldr	r3, [r3, #20]
          (ep->xfer_count < ep->xfer_len) &&
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1be      	bne.n	8001b62 <PCD_WriteEmptyTxFifo+0x50>
  }
  
  if(len <= 0U)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d110      	bne.n	8001c0c <PCD_WriteEmptyTxFifo+0xfa>
  {
    fifoemptymsk = 0x1U << epnum;
 8001bea:	2201      	movs	r2, #1
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	613b      	str	r3, [r7, #16]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4013      	ands	r3, r2
 8001c0a:	634b      	str	r3, [r1, #52]	; 0x34
    
  }
  
  return HAL_OK;  
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3720      	adds	r7, #32
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001c16:	b480      	push	{r7}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	70fb      	strb	r3, [r7, #3]
 8001c22:	4613      	mov	r3, r2
 8001c24:	803b      	strh	r3, [r7, #0]
  uint8_t i = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	73fb      	strb	r3, [r7, #15]
  uint32_t Tx_Offset = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top 
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */
  
  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c34:	60bb      	str	r3, [r7, #8]
  
  if(fifo == 0)
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d107      	bne.n	8001c4c <HAL_PCDEx_SetTxFiFo+0x36>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	883a      	ldrh	r2, [r7, #0]
 8001c42:	0411      	lsls	r1, r2, #16
 8001c44:	68ba      	ldr	r2, [r7, #8]
 8001c46:	430a      	orrs	r2, r1
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
 8001c4a:	e028      	b.n	8001c9e <HAL_PCDEx_SetTxFiFo+0x88>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16U;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	0c1b      	lsrs	r3, r3, #16
 8001c54:	68ba      	ldr	r2, [r7, #8]
 8001c56:	4413      	add	r3, r2
 8001c58:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	e00d      	b.n	8001c7c <HAL_PCDEx_SetTxFiFo+0x66>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16U);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	3340      	adds	r3, #64	; 0x40
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	4413      	add	r3, r2
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	0c1b      	lsrs	r3, r3, #16
 8001c70:	68ba      	ldr	r2, [r7, #8]
 8001c72:	4413      	add	r3, r2
 8001c74:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < (fifo - 1); i++)
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	73fb      	strb	r3, [r7, #15]
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	78fb      	ldrb	r3, [r7, #3]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	429a      	cmp	r2, r3
 8001c84:	dbec      	blt.n	8001c60 <HAL_PCDEx_SetTxFiFo+0x4a>
    }
    
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1] = (uint32_t)(((uint32_t)size << 16U) | Tx_Offset);        
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	883a      	ldrh	r2, [r7, #0]
 8001c90:	0410      	lsls	r0, r2, #16
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	4302      	orrs	r2, r0
 8001c96:	3340      	adds	r3, #64	; 0x40
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 8001c9e:	2300      	movs	r3, #0
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	887a      	ldrh	r2, [r7, #2]
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24
  
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b086      	sub	sp, #24
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e22d      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d075      	beq.n	8001dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cee:	4ba3      	ldr	r3, [pc, #652]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d00c      	beq.n	8001d14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cfa:	4ba0      	ldr	r3, [pc, #640]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d112      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d06:	4b9d      	ldr	r3, [pc, #628]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d12:	d10b      	bne.n	8001d2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	4b99      	ldr	r3, [pc, #612]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d05b      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x108>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d157      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e208      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d34:	d106      	bne.n	8001d44 <HAL_RCC_OscConfig+0x74>
 8001d36:	4a91      	ldr	r2, [pc, #580]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	4b90      	ldr	r3, [pc, #576]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	e01d      	b.n	8001d80 <HAL_RCC_OscConfig+0xb0>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x98>
 8001d4e:	4a8b      	ldr	r2, [pc, #556]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	4b8a      	ldr	r3, [pc, #552]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	4a88      	ldr	r2, [pc, #544]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	4b87      	ldr	r3, [pc, #540]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0xb0>
 8001d68:	4a84      	ldr	r2, [pc, #528]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d6a:	4b84      	ldr	r3, [pc, #528]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d72:	6013      	str	r3, [r2, #0]
 8001d74:	4a81      	ldr	r2, [pc, #516]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d76:	4b81      	ldr	r3, [pc, #516]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d013      	beq.n	8001db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7fe fbe8 	bl	800055c <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d90:	f7fe fbe4 	bl	800055c <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b64      	cmp	r3, #100	; 0x64
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e1cd      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da2:	4b76      	ldr	r3, [pc, #472]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d0f0      	beq.n	8001d90 <HAL_RCC_OscConfig+0xc0>
 8001dae:	e014      	b.n	8001dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7fe fbd4 	bl	800055c <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db8:	f7fe fbd0 	bl	800055c <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e1b9      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	4b6c      	ldr	r3, [pc, #432]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0xe8>
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d063      	beq.n	8001eae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001de6:	4b65      	ldr	r3, [pc, #404]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	f003 030c 	and.w	r3, r3, #12
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d00b      	beq.n	8001e0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001df2:	4b62      	ldr	r3, [pc, #392]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dfa:	2b08      	cmp	r3, #8
 8001dfc:	d11c      	bne.n	8001e38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dfe:	4b5f      	ldr	r3, [pc, #380]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d116      	bne.n	8001e38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	4b5c      	ldr	r3, [pc, #368]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d005      	beq.n	8001e22 <HAL_RCC_OscConfig+0x152>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d001      	beq.n	8001e22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e18d      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e22:	4956      	ldr	r1, [pc, #344]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e24:	4b55      	ldr	r3, [pc, #340]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4313      	orrs	r3, r2
 8001e34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	e03a      	b.n	8001eae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e40:	4b4f      	ldr	r3, [pc, #316]	; (8001f80 <HAL_RCC_OscConfig+0x2b0>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7fe fb89 	bl	800055c <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e4e:	f7fe fb85 	bl	800055c <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e16e      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e60:	4b46      	ldr	r3, [pc, #280]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d0f0      	beq.n	8001e4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6c:	4943      	ldr	r1, [pc, #268]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e6e:	4b43      	ldr	r3, [pc, #268]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	600b      	str	r3, [r1, #0]
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e82:	4b3f      	ldr	r3, [pc, #252]	; (8001f80 <HAL_RCC_OscConfig+0x2b0>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e88:	f7fe fb68 	bl	800055c <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e90:	f7fe fb64 	bl	800055c <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e14d      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f0      	bne.n	8001e90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d030      	beq.n	8001f1c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	695b      	ldr	r3, [r3, #20]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d016      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_RCC_OscConfig+0x2b4>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ec8:	f7fe fb48 	bl	800055c <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed0:	f7fe fb44 	bl	800055c <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e12d      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee2:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f0      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x200>
 8001eee:	e015      	b.n	8001f1c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ef0:	4b24      	ldr	r3, [pc, #144]	; (8001f84 <HAL_RCC_OscConfig+0x2b4>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef6:	f7fe fb31 	bl	800055c <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001efc:	e008      	b.n	8001f10 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efe:	f7fe fb2d 	bl	800055c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e116      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f0      	bne.n	8001efe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0304 	and.w	r3, r3, #4
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80a0 	beq.w	800206a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10f      	bne.n	8001f5a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4a0f      	ldr	r2, [pc, #60]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f48:	6413      	str	r3, [r2, #64]	; 0x40
 8001f4a:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <HAL_RCC_OscConfig+0x2ac>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f56:	2301      	movs	r3, #1
 8001f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_OscConfig+0x2b8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d121      	bne.n	8001faa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f66:	4a08      	ldr	r2, [pc, #32]	; (8001f88 <HAL_RCC_OscConfig+0x2b8>)
 8001f68:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <HAL_RCC_OscConfig+0x2b8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f72:	f7fe faf3 	bl	800055c <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f78:	e011      	b.n	8001f9e <HAL_RCC_OscConfig+0x2ce>
 8001f7a:	bf00      	nop
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	42470000 	.word	0x42470000
 8001f84:	42470e80 	.word	0x42470e80
 8001f88:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f8c:	f7fe fae6 	bl	800055c <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e0cf      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9e:	4b6a      	ldr	r3, [pc, #424]	; (8002148 <HAL_RCC_OscConfig+0x478>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d106      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x2f0>
 8001fb2:	4a66      	ldr	r2, [pc, #408]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8001fb4:	4b65      	ldr	r3, [pc, #404]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	f043 0301 	orr.w	r3, r3, #1
 8001fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001fbe:	e01c      	b.n	8001ffa <HAL_RCC_OscConfig+0x32a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	2b05      	cmp	r3, #5
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x312>
 8001fc8:	4a60      	ldr	r2, [pc, #384]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8001fca:	4b60      	ldr	r3, [pc, #384]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8001fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fce:	f043 0304 	orr.w	r3, r3, #4
 8001fd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd4:	4a5d      	ldr	r2, [pc, #372]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8001fd6:	4b5d      	ldr	r3, [pc, #372]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe0:	e00b      	b.n	8001ffa <HAL_RCC_OscConfig+0x32a>
 8001fe2:	4a5a      	ldr	r2, [pc, #360]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8001fe4:	4b59      	ldr	r3, [pc, #356]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8001fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe8:	f023 0301 	bic.w	r3, r3, #1
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
 8001fee:	4a57      	ldr	r2, [pc, #348]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8001ff0:	4b56      	ldr	r3, [pc, #344]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8001ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff4:	f023 0304 	bic.w	r3, r3, #4
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d015      	beq.n	800202e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002002:	f7fe faab 	bl	800055c <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002008:	e00a      	b.n	8002020 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800200a:	f7fe faa7 	bl	800055c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	f241 3288 	movw	r2, #5000	; 0x1388
 8002018:	4293      	cmp	r3, r2
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e08e      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002020:	4b4a      	ldr	r3, [pc, #296]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8002022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ee      	beq.n	800200a <HAL_RCC_OscConfig+0x33a>
 800202c:	e014      	b.n	8002058 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202e:	f7fe fa95 	bl	800055c <HAL_GetTick>
 8002032:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002034:	e00a      	b.n	800204c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002036:	f7fe fa91 	bl	800055c <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	f241 3288 	movw	r2, #5000	; 0x1388
 8002044:	4293      	cmp	r3, r2
 8002046:	d901      	bls.n	800204c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e078      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204c:	4b3f      	ldr	r3, [pc, #252]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 800204e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ee      	bne.n	8002036 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002058:	7dfb      	ldrb	r3, [r7, #23]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d105      	bne.n	800206a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800205e:	4a3b      	ldr	r2, [pc, #236]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8002060:	4b3a      	ldr	r3, [pc, #232]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002068:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d064      	beq.n	800213c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002072:	4b36      	ldr	r3, [pc, #216]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 030c 	and.w	r3, r3, #12
 800207a:	2b08      	cmp	r3, #8
 800207c:	d05c      	beq.n	8002138 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d141      	bne.n	800210a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002086:	4b32      	ldr	r3, [pc, #200]	; (8002150 <HAL_RCC_OscConfig+0x480>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7fe fa66 	bl	800055c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7fe fa62 	bl	800055c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e04b      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a6:	4b29      	ldr	r3, [pc, #164]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020b2:	4926      	ldr	r1, [pc, #152]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69da      	ldr	r2, [r3, #28]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6a1b      	ldr	r3, [r3, #32]
 80020bc:	431a      	orrs	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	019b      	lsls	r3, r3, #6
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	085b      	lsrs	r3, r3, #1
 80020cc:	3b01      	subs	r3, #1
 80020ce:	041b      	lsls	r3, r3, #16
 80020d0:	431a      	orrs	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d6:	061b      	lsls	r3, r3, #24
 80020d8:	4313      	orrs	r3, r2
 80020da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <HAL_RCC_OscConfig+0x480>)
 80020de:	2201      	movs	r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e2:	f7fe fa3b 	bl	800055c <HAL_GetTick>
 80020e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ea:	f7fe fa37 	bl	800055c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b02      	cmp	r3, #2
 80020f6:	d901      	bls.n	80020fc <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e020      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020fc:	4b13      	ldr	r3, [pc, #76]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCC_OscConfig+0x41a>
 8002108:	e018      	b.n	800213c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <HAL_RCC_OscConfig+0x480>)
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002110:	f7fe fa24 	bl	800055c <HAL_GetTick>
 8002114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002118:	f7fe fa20 	bl	800055c <HAL_GetTick>
 800211c:	4602      	mov	r2, r0
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e009      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800212a:	4b08      	ldr	r3, [pc, #32]	; (800214c <HAL_RCC_OscConfig+0x47c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1f0      	bne.n	8002118 <HAL_RCC_OscConfig+0x448>
 8002136:	e001      	b.n	800213c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800213c:	2300      	movs	r3, #0
}
 800213e:	4618      	mov	r0, r3
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40007000 	.word	0x40007000
 800214c:	40023800 	.word	0x40023800
 8002150:	42470060 	.word	0x42470060

08002154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0ca      	b.n	80022fe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002168:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 020f 	and.w	r2, r3, #15
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d20c      	bcs.n	8002190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b64      	ldr	r3, [pc, #400]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b62      	ldr	r3, [pc, #392]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 020f 	and.w	r2, r3, #15
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0b6      	b.n	80022fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a8:	4a58      	ldr	r2, [pc, #352]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80021aa:	4b58      	ldr	r3, [pc, #352]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c0:	4a52      	ldr	r2, [pc, #328]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80021c2:	4b52      	ldr	r3, [pc, #328]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	494f      	ldr	r1, [pc, #316]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80021ce:	4b4f      	ldr	r3, [pc, #316]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d044      	beq.n	8002274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b46      	ldr	r3, [pc, #280]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d119      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e07d      	b.n	80022fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d003      	beq.n	8002212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220e:	2b03      	cmp	r3, #3
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002212:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e06d      	b.n	80022fe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002222:	4b3a      	ldr	r3, [pc, #232]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e065      	b.n	80022fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002232:	4936      	ldr	r1, [pc, #216]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002234:	4b35      	ldr	r3, [pc, #212]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f023 0203 	bic.w	r2, r3, #3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4313      	orrs	r3, r2
 8002242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002244:	f7fe f98a 	bl	800055c <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	e00a      	b.n	8002262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224c:	f7fe f986 	bl	800055c <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e04d      	b.n	80022fe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	4b2a      	ldr	r3, [pc, #168]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 020c 	and.w	r2, r3, #12
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	429a      	cmp	r2, r3
 8002272:	d1eb      	bne.n	800224c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002274:	4b24      	ldr	r3, [pc, #144]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 020f 	and.w	r2, r3, #15
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d90c      	bls.n	800229c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b21      	ldr	r3, [pc, #132]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_RCC_ClockConfig+0x1b4>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 020f 	and.w	r2, r3, #15
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e030      	b.n	80022fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a8:	4918      	ldr	r1, [pc, #96]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c6:	4911      	ldr	r1, [pc, #68]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80022c8:	4b10      	ldr	r3, [pc, #64]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022da:	f000 f81d 	bl	8002318 <HAL_RCC_GetSysClockFreq>
 80022de:	4601      	mov	r1, r0
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	4a09      	ldr	r2, [pc, #36]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	5cd3      	ldrb	r3, [r2, r3]
 80022ee:	fa21 f303 	lsr.w	r3, r1, r3
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f005 f872 	bl	80073e0 <HAL_InitTick>

  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	40023c00 	.word	0x40023c00
 800230c:	40023800 	.word	0x40023800
 8002310:	080082a0 	.word	0x080082a0
 8002314:	20000118 	.word	0x20000118

08002318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800231c:	b08f      	sub	sp, #60	; 0x3c
 800231e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002320:	2300      	movs	r3, #0
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002324:	2300      	movs	r3, #0
 8002326:	637b      	str	r3, [r7, #52]	; 0x34
 8002328:	2300      	movs	r3, #0
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 800232c:	2300      	movs	r3, #0
 800232e:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002330:	4b62      	ldr	r3, [pc, #392]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	2b04      	cmp	r3, #4
 800233a:	d007      	beq.n	800234c <HAL_RCC_GetSysClockFreq+0x34>
 800233c:	2b08      	cmp	r3, #8
 800233e:	d008      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x3a>
 8002340:	2b00      	cmp	r3, #0
 8002342:	f040 80b2 	bne.w	80024aa <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002346:	4b5e      	ldr	r3, [pc, #376]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002348:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800234a:	e0b1      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800234c:	4b5d      	ldr	r3, [pc, #372]	; (80024c4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800234e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002350:	e0ae      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002352:	4b5a      	ldr	r3, [pc, #360]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800235c:	4b57      	ldr	r3, [pc, #348]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d04e      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002368:	4b54      	ldr	r3, [pc, #336]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	099b      	lsrs	r3, r3, #6
 800236e:	f04f 0400 	mov.w	r4, #0
 8002372:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002376:	f04f 0200 	mov.w	r2, #0
 800237a:	ea01 0103 	and.w	r1, r1, r3
 800237e:	ea02 0204 	and.w	r2, r2, r4
 8002382:	460b      	mov	r3, r1
 8002384:	4614      	mov	r4, r2
 8002386:	0160      	lsls	r0, r4, #5
 8002388:	6278      	str	r0, [r7, #36]	; 0x24
 800238a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800238c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002390:	6278      	str	r0, [r7, #36]	; 0x24
 8002392:	015b      	lsls	r3, r3, #5
 8002394:	623b      	str	r3, [r7, #32]
 8002396:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800239a:	1a5b      	subs	r3, r3, r1
 800239c:	eb64 0402 	sbc.w	r4, r4, r2
 80023a0:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80023a4:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80023a8:	ea4f 1883 	mov.w	r8, r3, lsl #6
 80023ac:	ebb8 0803 	subs.w	r8, r8, r3
 80023b0:	eb69 0904 	sbc.w	r9, r9, r4
 80023b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80023c0:	61fb      	str	r3, [r7, #28]
 80023c2:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80023c6:	61bb      	str	r3, [r7, #24]
 80023c8:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80023cc:	eb18 0801 	adds.w	r8, r8, r1
 80023d0:	eb49 0902 	adc.w	r9, r9, r2
 80023d4:	ea4f 2349 	mov.w	r3, r9, lsl #9
 80023d8:	617b      	str	r3, [r7, #20]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	ea4f 2348 	mov.w	r3, r8, lsl #9
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80023ec:	4640      	mov	r0, r8
 80023ee:	4649      	mov	r1, r9
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	f04f 0400 	mov.w	r4, #0
 80023f6:	461a      	mov	r2, r3
 80023f8:	4623      	mov	r3, r4
 80023fa:	f7fd fef1 	bl	80001e0 <__aeabi_uldivmod>
 80023fe:	4603      	mov	r3, r0
 8002400:	460c      	mov	r4, r1
 8002402:	637b      	str	r3, [r7, #52]	; 0x34
 8002404:	e043      	b.n	800248e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002406:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	099b      	lsrs	r3, r3, #6
 800240c:	f04f 0400 	mov.w	r4, #0
 8002410:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002414:	f04f 0200 	mov.w	r2, #0
 8002418:	ea01 0103 	and.w	r1, r1, r3
 800241c:	ea02 0204 	and.w	r2, r2, r4
 8002420:	460b      	mov	r3, r1
 8002422:	4614      	mov	r4, r2
 8002424:	0160      	lsls	r0, r4, #5
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	015b      	lsls	r3, r3, #5
 8002432:	60bb      	str	r3, [r7, #8]
 8002434:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002438:	1a5b      	subs	r3, r3, r1
 800243a:	eb64 0402 	sbc.w	r4, r4, r2
 800243e:	01a6      	lsls	r6, r4, #6
 8002440:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002444:	019d      	lsls	r5, r3, #6
 8002446:	1aed      	subs	r5, r5, r3
 8002448:	eb66 0604 	sbc.w	r6, r6, r4
 800244c:	00f3      	lsls	r3, r6, #3
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	00eb      	lsls	r3, r5, #3
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002460:	186d      	adds	r5, r5, r1
 8002462:	eb46 0602 	adc.w	r6, r6, r2
 8002466:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800246a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800246e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002472:	4655      	mov	r5, sl
 8002474:	465e      	mov	r6, fp
 8002476:	4628      	mov	r0, r5
 8002478:	4631      	mov	r1, r6
 800247a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800247c:	f04f 0400 	mov.w	r4, #0
 8002480:	461a      	mov	r2, r3
 8002482:	4623      	mov	r3, r4
 8002484:	f7fd feac 	bl	80001e0 <__aeabi_uldivmod>
 8002488:	4603      	mov	r3, r0
 800248a:	460c      	mov	r4, r1
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	0c1b      	lsrs	r3, r3, #16
 8002494:	f003 0303 	and.w	r3, r3, #3
 8002498:	3301      	adds	r3, #1
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800249e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024a8:	e002      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024aa:	4b05      	ldr	r3, [pc, #20]	; (80024c0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	373c      	adds	r7, #60	; 0x3c
 80024b6:	46bd      	mov	sp, r7
 80024b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	00f42400 	.word	0x00f42400
 80024c4:	007a1200 	.word	0x007a1200

080024c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000118 	.word	0x20000118

080024e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024e4:	f7ff fff0 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 80024e8:	4601      	mov	r1, r0
 80024ea:	4b05      	ldr	r3, [pc, #20]	; (8002500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	0b5b      	lsrs	r3, r3, #13
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	4a03      	ldr	r2, [pc, #12]	; (8002504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	40023800 	.word	0x40023800
 8002504:	080082b0 	.word	0x080082b0

08002508 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	220f      	movs	r2, #15
 8002516:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <HAL_RCC_GetClockConfig+0x5c>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 0203 	and.w	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <HAL_RCC_GetClockConfig+0x5c>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <HAL_RCC_GetClockConfig+0x5c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <HAL_RCC_GetClockConfig+0x5c>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	08db      	lsrs	r3, r3, #3
 8002542:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <HAL_RCC_GetClockConfig+0x60>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 020f 	and.w	r2, r3, #15
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	601a      	str	r2, [r3, #0]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	40023800 	.word	0x40023800
 8002568:	40023c00 	.word	0x40023c00

0800256c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e055      	b.n	800262a <HAL_SPI_Init+0xbe>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d106      	bne.n	800259e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f004 feef 	bl	800737c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	6812      	ldr	r2, [r2, #0]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6851      	ldr	r1, [r2, #4]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6892      	ldr	r2, [r2, #8]
 80025c2:	4311      	orrs	r1, r2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	68d2      	ldr	r2, [r2, #12]
 80025c8:	4311      	orrs	r1, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6912      	ldr	r2, [r2, #16]
 80025ce:	4311      	orrs	r1, r2
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	6952      	ldr	r2, [r2, #20]
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6992      	ldr	r2, [r2, #24]
 80025da:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80025de:	4311      	orrs	r1, r2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	69d2      	ldr	r2, [r2, #28]
 80025e4:	4311      	orrs	r1, r2
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	6a12      	ldr	r2, [r2, #32]
 80025ea:	4311      	orrs	r1, r2
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6992      	ldr	r2, [r2, #24]
 80025fc:	0c12      	lsrs	r2, r2, #16
 80025fe:	f002 0104 	and.w	r1, r2, #4
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002606:	430a      	orrs	r2, r1
 8002608:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	69d2      	ldr	r2, [r2, #28]
 8002614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002618:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <HAL_SPI_TransmitReceive>:
  * @param  Size amount of data to be sent and received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b08c      	sub	sp, #48	; 0x30
 8002636:	af02      	add	r7, sp, #8
 8002638:	60f8      	str	r0, [r7, #12]
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	2300      	movs	r3, #0
 8002646:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg1 = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 800264c:	2301      	movs	r3, #1
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_SPI_TransmitReceive+0x32>
 8002660:	2302      	movs	r3, #2
 8002662:	e181      	b.n	8002968 <HAL_SPI_TransmitReceive+0x336>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800266c:	f7fd ff76 	bl	800055c <HAL_GetTick>
 8002670:	6178      	str	r0, [r7, #20]
  
  tmp  = hspi->State;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002678:	b2db      	uxtb	r3, r3
 800267a:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	61bb      	str	r3, [r7, #24]
  
  if(!((tmp == HAL_SPI_STATE_READY) || \
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d00e      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x74>
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800268e:	d106      	bne.n	800269e <HAL_SPI_TransmitReceive+0x6c>
    ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d102      	bne.n	800269e <HAL_SPI_TransmitReceive+0x6c>
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	2b04      	cmp	r3, #4
 800269c:	d003      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 800269e:	2302      	movs	r3, #2
 80026a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80026a4:	e156      	b.n	8002954 <HAL_SPI_TransmitReceive+0x322>
  }

  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x86>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d002      	beq.n	80026b8 <HAL_SPI_TransmitReceive+0x86>
 80026b2:	887b      	ldrh	r3, [r7, #2]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80026be:	e149      	b.n	8002954 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if(hspi->State == HAL_SPI_STATE_READY)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d103      	bne.n	80026d4 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2205      	movs	r2, #5
 80026d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2200      	movs	r2, #0
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	887a      	ldrh	r2, [r7, #2]
 80026ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	68ba      	ldr	r2, [r7, #8]
 80026f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	887a      	ldrh	r2, [r7, #2]
 80026f6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	887a      	ldrh	r2, [r7, #2]
 80026fc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d007      	beq.n	8002728 <HAL_SPI_TransmitReceive+0xf6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	6812      	ldr	r2, [r2, #0]
 8002722:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002726:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002730:	d171      	bne.n	8002816 <HAL_SPI_TransmitReceive+0x1e4>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d004      	beq.n	8002744 <HAL_SPI_TransmitReceive+0x112>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800273e:	b29b      	uxth	r3, r3
 8002740:	2b01      	cmp	r3, #1
 8002742:	d15d      	bne.n	8002800 <HAL_SPI_TransmitReceive+0x1ce>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	8812      	ldrh	r2, [r2, #0]
 800274c:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3302      	adds	r3, #2
 8002752:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002758:	b29b      	uxth	r3, r3
 800275a:	3b01      	subs	r3, #1
 800275c:	b29a      	uxth	r2, r3
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002762:	e04d      	b.n	8002800 <HAL_SPI_TransmitReceive+0x1ce>
    {
      /* Check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	2b00      	cmp	r3, #0
 8002768:	d01c      	beq.n	80027a4 <HAL_SPI_TransmitReceive+0x172>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276e:	b29b      	uxth	r3, r3
 8002770:	2b00      	cmp	r3, #0
 8002772:	d017      	beq.n	80027a4 <HAL_SPI_TransmitReceive+0x172>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b02      	cmp	r3, #2
 8002780:	d110      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x172>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	8812      	ldrh	r2, [r2, #0]
 800278a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	3302      	adds	r3, #2
 8002790:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 80027a0:	2300      	movs	r3, #0
 80027a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d018      	beq.n	80027e0 <HAL_SPI_TransmitReceive+0x1ae>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d111      	bne.n	80027e0 <HAL_SPI_TransmitReceive+0x1ae>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	3302      	adds	r3, #2
 80027cc:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80027dc:	2301      	movs	r3, #1
 80027de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80027e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e6:	d00b      	beq.n	8002800 <HAL_SPI_TransmitReceive+0x1ce>
 80027e8:	f7fd feb8 	bl	800055c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	1ad2      	subs	r2, r2, r3
 80027f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d303      	bcc.n	8002800 <HAL_SPI_TransmitReceive+0x1ce>
      {
        errorcode = HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80027fe:	e0a9      	b.n	8002954 <HAL_SPI_TransmitReceive+0x322>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1ac      	bne.n	8002764 <HAL_SPI_TransmitReceive+0x132>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1a7      	bne.n	8002764 <HAL_SPI_TransmitReceive+0x132>
 8002814:	e071      	b.n	80028fa <HAL_SPI_TransmitReceive+0x2c8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <HAL_SPI_TransmitReceive+0x1f6>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002822:	b29b      	uxth	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d15e      	bne.n	80028e6 <HAL_SPI_TransmitReceive+0x2b4>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pTxData);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	330c      	adds	r3, #12
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	7812      	ldrb	r2, [r2, #0]
 8002832:	701a      	strb	r2, [r3, #0]
      pTxData += sizeof(uint8_t);
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	3301      	adds	r3, #1
 8002838:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800283e:	b29b      	uxth	r3, r3
 8002840:	3b01      	subs	r3, #1
 8002842:	b29a      	uxth	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002848:	e04d      	b.n	80028e6 <HAL_SPI_TransmitReceive+0x2b4>
    {
      /* check TXE flag */
      if(txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 800284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01d      	beq.n	800288c <HAL_SPI_TransmitReceive+0x25a>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d018      	beq.n	800288c <HAL_SPI_TransmitReceive+0x25a>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b02      	cmp	r3, #2
 8002866:	d111      	bne.n	800288c <HAL_SPI_TransmitReceive+0x25a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f103 020c 	add.w	r2, r3, #12
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	1c59      	adds	r1, r3, #1
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800287e:	b29b      	uxth	r3, r3
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */ 
        txallowed = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d017      	beq.n	80028c6 <HAL_SPI_TransmitReceive+0x294>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d110      	bne.n	80028c6 <HAL_SPI_TransmitReceive+0x294>
      {
        (*(uint8_t *)pRxData++) = hspi->Instance->DR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	607a      	str	r2, [r7, #4]
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	68d2      	ldr	r2, [r2, #12]
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]
        hspi->RxXferCount--;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */ 
        txallowed = 1U;
 80028c2:	2301      	movs	r3, #1
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout))
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d00b      	beq.n	80028e6 <HAL_SPI_TransmitReceive+0x2b4>
 80028ce:	f7fd fe45 	bl	800055c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	1ad2      	subs	r2, r2, r3
 80028d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028da:	429a      	cmp	r2, r3
 80028dc:	d303      	bcc.n	80028e6 <HAL_SPI_TransmitReceive+0x2b4>
      {
        errorcode = HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80028e4:	e036      	b.n	8002954 <HAL_SPI_TransmitReceive+0x322>
    while((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1ac      	bne.n	800284a <HAL_SPI_TransmitReceive+0x218>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d1a7      	bne.n	800284a <HAL_SPI_TransmitReceive+0x218>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002900:	2201      	movs	r2, #1
 8002902:	2102      	movs	r1, #2
 8002904:	68f8      	ldr	r0, [r7, #12]
 8002906:	f000 f833 	bl	8002970 <SPI_WaitFlagStateUntilTimeout>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_SPI_TransmitReceive+0x2e6>
  {
    errorcode = HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002916:	e01d      	b.n	8002954 <HAL_SPI_TransmitReceive+0x322>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 f890 	bl	8002a42 <SPI_CheckFlag_BSY>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <HAL_SPI_TransmitReceive+0x304>
  {
    errorcode = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002934:	e00e      	b.n	8002954 <HAL_SPI_TransmitReceive+0x322>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10a      	bne.n	8002954 <HAL_SPI_TransmitReceive+0x322>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	613b      	str	r3, [r7, #16]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	613b      	str	r3, [r7, #16]
 8002952:	693b      	ldr	r3, [r7, #16]
  }
  
error :
  hspi->State = HAL_SPI_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002968:	4618      	mov	r0, r3
 800296a:	3728      	adds	r7, #40	; 0x28
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800297e:	e04d      	b.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002986:	d049      	beq.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d007      	beq.n	800299e <SPI_WaitFlagStateUntilTimeout+0x2e>
 800298e:	f7fd fde5 	bl	800055c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	1ad2      	subs	r2, r2, r3
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d33e      	bcc.n	8002a1c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	6852      	ldr	r2, [r2, #4]
 80029a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80029ac:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b6:	d111      	bne.n	80029dc <SPI_WaitFlagStateUntilTimeout+0x6c>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029c0:	d004      	beq.n	80029cc <SPI_WaitFlagStateUntilTimeout+0x5c>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029ca:	d107      	bne.n	80029dc <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	6812      	ldr	r2, [r2, #0]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029e4:	d110      	bne.n	8002a08 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6819      	ldr	r1, [r3, #0]
 80029f0:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 80029f4:	400b      	ands	r3, r1
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	6812      	ldr	r2, [r2, #0]
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a06:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e00e      	b.n	8002a3a <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	401a      	ands	r2, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d101      	bne.n	8002a30 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	e000      	b.n	8002a32 <SPI_WaitFlagStateUntilTimeout+0xc2>
 8002a30:	2200      	movs	r2, #0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d1a3      	bne.n	8002980 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af02      	add	r7, sp, #8
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2200      	movs	r2, #0
 8002a56:	2180      	movs	r1, #128	; 0x80
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7ff ff89 	bl	8002970 <SPI_WaitFlagStateUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e000      	b.n	8002a76 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b082      	sub	sp, #8
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e01d      	b.n	8002acc <HAL_TIM_Base_Init+0x4e>
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d106      	bne.n	8002aaa <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f815 	bl	8002ad4 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2202      	movs	r2, #2
 8002aae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	3304      	adds	r3, #4
 8002aba:	4619      	mov	r1, r3
 8002abc:	4610      	mov	r0, r2
 8002abe:	f000 f95f 	bl	8002d80 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  return HAL_OK;
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	68d2      	ldr	r2, [r2, #12]
 8002afa:	f042 0201 	orr.w	r2, r2, #1
 8002afe:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	6812      	ldr	r2, [r2, #0]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d122      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d11b      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f06f 0202 	mvn.w	r2, #2
 8002b4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	761a      	strb	r2, [r3, #24]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f8ee 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 8002b66:	e005      	b.n	8002b74 <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f8e0 	bl	8002d2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f8f1 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b04      	cmp	r3, #4
 8002b86:	d122      	bne.n	8002bce <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0304 	and.w	r3, r3, #4
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	d11b      	bne.n	8002bce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f06f 0204 	mvn.w	r2, #4
 8002b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2202      	movs	r2, #2
 8002ba4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f8c4 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 8002bba:	e005      	b.n	8002bc8 <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8b6 	bl	8002d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f8c7 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b08      	cmp	r3, #8
 8002bda:	d122      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b08      	cmp	r3, #8
 8002be8:	d11b      	bne.n	8002c22 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0208 	mvn.w	r2, #8
 8002bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2204      	movs	r2, #4
 8002bf8:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	69db      	ldr	r3, [r3, #28]
 8002c00:	f003 0303 	and.w	r3, r3, #3
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f89a 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 8002c0e:	e005      	b.n	8002c1c <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f88c 	bl	8002d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f89d 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b10      	cmp	r3, #16
 8002c2e:	d122      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0310 	and.w	r3, r3, #16
 8002c3a:	2b10      	cmp	r3, #16
 8002c3c:	d11b      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f06f 0210 	mvn.w	r2, #16
 8002c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f870 	bl	8002d42 <HAL_TIM_IC_CaptureCallback>
 8002c62:	e005      	b.n	8002c70 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f862 	bl	8002d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f873 	bl	8002d56 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d10e      	bne.n	8002ca2 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d107      	bne.n	8002ca2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f06f 0201 	mvn.w	r2, #1
 8002c9a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f003 ffa5 	bl	8006bec <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cac:	2b80      	cmp	r3, #128	; 0x80
 8002cae:	d10e      	bne.n	8002cce <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cba:	2b80      	cmp	r3, #128	; 0x80
 8002cbc:	d107      	bne.n	8002cce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cc6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 f8e7 	bl	8002e9c <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b40      	cmp	r3, #64	; 0x40
 8002cda:	d10e      	bne.n	8002cfa <HAL_TIM_IRQHandler+0x1dc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b40      	cmp	r3, #64	; 0x40
 8002ce8:	d107      	bne.n	8002cfa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cf2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f000 f838 	bl	8002d6a <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691b      	ldr	r3, [r3, #16]
 8002d00:	f003 0320 	and.w	r3, r3, #32
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	d10e      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x208>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f003 0320 	and.w	r3, r3, #32
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d107      	bne.n	8002d26 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 0220 	mvn.w	r2, #32
 8002d1e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f000 f8b1 	bl	8002e88 <HAL_TIMEx_CommutationCallback>
    }
  }
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	4a35      	ldr	r2, [pc, #212]	; (8002e6c <TIM_Base_SetConfig+0xec>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d00f      	beq.n	8002dbc <TIM_Base_SetConfig+0x3c>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002da2:	d00b      	beq.n	8002dbc <TIM_Base_SetConfig+0x3c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a32      	ldr	r2, [pc, #200]	; (8002e70 <TIM_Base_SetConfig+0xf0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d007      	beq.n	8002dbc <TIM_Base_SetConfig+0x3c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4a31      	ldr	r2, [pc, #196]	; (8002e74 <TIM_Base_SetConfig+0xf4>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d003      	beq.n	8002dbc <TIM_Base_SetConfig+0x3c>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	4a30      	ldr	r2, [pc, #192]	; (8002e78 <TIM_Base_SetConfig+0xf8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <TIM_Base_SetConfig+0x40>
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <TIM_Base_SetConfig+0x42>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d008      	beq.n	8002dd8 <TIM_Base_SetConfig+0x58>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a24      	ldr	r2, [pc, #144]	; (8002e6c <TIM_Base_SetConfig+0xec>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d01b      	beq.n	8002e18 <TIM_Base_SetConfig+0x98>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002de6:	d017      	beq.n	8002e18 <TIM_Base_SetConfig+0x98>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a21      	ldr	r2, [pc, #132]	; (8002e70 <TIM_Base_SetConfig+0xf0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <TIM_Base_SetConfig+0x98>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a20      	ldr	r2, [pc, #128]	; (8002e74 <TIM_Base_SetConfig+0xf4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00f      	beq.n	8002e18 <TIM_Base_SetConfig+0x98>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a1f      	ldr	r2, [pc, #124]	; (8002e78 <TIM_Base_SetConfig+0xf8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00b      	beq.n	8002e18 <TIM_Base_SetConfig+0x98>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a1e      	ldr	r2, [pc, #120]	; (8002e7c <TIM_Base_SetConfig+0xfc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d007      	beq.n	8002e18 <TIM_Base_SetConfig+0x98>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	; (8002e80 <TIM_Base_SetConfig+0x100>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d003      	beq.n	8002e18 <TIM_Base_SetConfig+0x98>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a1c      	ldr	r2, [pc, #112]	; (8002e84 <TIM_Base_SetConfig+0x104>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d101      	bne.n	8002e1c <TIM_Base_SetConfig+0x9c>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <TIM_Base_SetConfig+0x9e>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <TIM_Base_SetConfig+0xb4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  }

  TIMx->CR1 = tmpcr1;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a07      	ldr	r2, [pc, #28]	; (8002e6c <TIM_Base_SetConfig+0xec>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d103      	bne.n	8002e5a <TIM_Base_SetConfig+0xda>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	615a      	str	r2, [r3, #20]
}
 8002e60:	bf00      	nop
 8002e62:	3714      	adds	r7, #20
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40000400 	.word	0x40000400
 8002e74:	40000800 	.word	0x40000800
 8002e78:	40000c00 	.word	0x40000c00
 8002e7c:	40014000 	.word	0x40014000
 8002e80:	40014400 	.word	0x40014400
 8002e84:	40014800 	.word	0x40014800

08002e88 <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <USB_CoreInit>:
  * @param  cfg  pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	f107 0014 	add.w	r0, r7, #20
 8002ebe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d120      	bne.n	8002f0a <USB_CoreInit+0x5a>
  {
    
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002edc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	60d3      	str	r3, [r2, #12]
   
    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	60da      	str	r2, [r3, #12]
    if(cfg.use_external_vbus == 1U)
 8002ef0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    USB_CoreReset(USBx); 
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f001 f9c4 	bl	8004290 <USB_CoreReset>
 8002f08:	e00c      	b.n	8002f24 <USB_CoreInit+0x74>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	60da      	str	r2, [r3, #12]
    
    /* Reset after a PHY select and set Host mode */
    USB_CoreReset(USBx);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f001 f9ba 	bl	8004290 <USB_CoreReset>
    
    /* Deactivate the power down*/
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
  }
 
  if(cfg.dma_enable == ENABLE)
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d10b      	bne.n	8002f42 <USB_CoreInit+0x92>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f043 0206 	orr.w	r2, r3, #6
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f043 0220 	orr.w	r2, r3, #32
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]
  }  

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f4e:	b004      	add	sp, #16
 8002f50:	4770      	bx	lr

08002f52 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f043 0201 	orr.w	r2, r3, #1
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f023 0201 	bic.w	r2, r3, #1
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <USB_SetCurrentMode>:
  *            @arg USB_OTG_HOST_MODE: Host mode
  *            @arg USB_OTG_DRD_MODE: Dual Role Device mode  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx , USB_OTG_ModeTypeDef mode)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD); 
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	60da      	str	r2, [r3, #12]
  
  if ( mode == USB_OTG_HOST_MODE)
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d106      	bne.n	8002fc2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD; 
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	60da      	str	r2, [r3, #12]
 8002fc0:	e008      	b.n	8002fd4 <USB_SetCurrentMode+0x3e>
  }
  else if ( mode == USB_OTG_DEVICE_MODE)
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <USB_SetCurrentMode+0x3e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD; 
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	60da      	str	r2, [r3, #12]
  }
  HAL_Delay(50U);
 8002fd4:	2032      	movs	r0, #50	; 0x32
 8002fd6:	f7fd facd 	bl	8000574 <HAL_Delay>
  
  return HAL_OK;
 8002fda:	2300      	movs	r3, #0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b084      	sub	sp, #16
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	f107 001c 	add.w	r0, r7, #28
 8002ff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t i = 0U;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
    /* B-peripheral session valid override enable*/ 
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
  }
#else
  if (cfg.vbus_sensing_enable == 0U)
 8002ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d106      	bne.n	800300e <USB_DevInit+0x2a>
  {
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	639a      	str	r2, [r3, #56]	; 0x38
 800300c:	e005      	b.n	800301a <USB_DevInit+0x36>
  }
  else
  {
    /* Enable VBUS */
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003012:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx || STM32F412Zx || STM32F412Rx || STM32F412Vx || STM32F412Cx || STM32F413xx || STM32F423xx  */
  
  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003020:	461a      	mov	r2, r3
 8003022:	2300      	movs	r3, #0
 8003024:	6013      	str	r3, [r2, #0]
  
  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302c:	461a      	mov	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6013      	str	r3, [r2, #0]
  
  if(cfg.phy_itface  == USB_OTG_ULPI_PHY)
 8003038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303a:	2b01      	cmp	r3, #1
 800303c:	d10c      	bne.n	8003058 <USB_DevInit+0x74>
  {
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	2b00      	cmp	r3, #0
 8003042:	d104      	bne.n	800304e <USB_DevInit+0x6a>
    {      
      /* Set High speed phy */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH);
 8003044:	2100      	movs	r1, #0
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f946 	bl	80032d8 <USB_SetDevSpeed>
 800304c:	e008      	b.n	8003060 <USB_DevInit+0x7c>
    }
    else 
    {
      /* set High speed phy in Full speed mode */
      USB_SetDevSpeed (USBx , USB_OTG_SPEED_HIGH_IN_FULL);
 800304e:	2101      	movs	r1, #1
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f000 f941 	bl	80032d8 <USB_SetDevSpeed>
 8003056:	e003      	b.n	8003060 <USB_DevInit+0x7c>
    }
  }
  else
  {
    /* Set Full speed phy */
    USB_SetDevSpeed (USBx , USB_OTG_SPEED_FULL);
 8003058:	2103      	movs	r1, #3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f93c 	bl	80032d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  USB_FlushTxFifo(USBx , 0x10U); /* all Tx FIFOs */
 8003060:	2110      	movs	r1, #16
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8f0 	bl	8003248 <USB_FlushTxFifo>
  USB_FlushRxFifo(USBx);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 f913 	bl	8003294 <USB_FlushRxFifo>
  
  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003074:	461a      	mov	r2, r3
 8003076:	2300      	movs	r3, #0
 8003078:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003080:	461a      	mov	r2, r3
 8003082:	2300      	movs	r3, #0
 8003084:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINT = 0xFFFFFFFFU;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800308c:	461a      	mov	r2, r3
 800308e:	f04f 33ff 	mov.w	r3, #4294967295
 8003092:	6193      	str	r3, [r2, #24]
  USBx_DEVICE->DAINTMSK = 0U;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309a:	461a      	mov	r2, r3
 800309c:	2300      	movs	r3, #0
 800309e:	61d3      	str	r3, [r2, #28]
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030a0:	2300      	movs	r3, #0
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	e034      	b.n	8003110 <USB_DevInit+0x12c>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030bc:	d10a      	bne.n	80030d4 <USB_DevInit+0xf0>
    {
      USBx_INEP(i)->DIEPCTL = (USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ca:	461a      	mov	r2, r3
 80030cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	e008      	b.n	80030e6 <USB_DevInit+0x102>
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e0:	461a      	mov	r2, r3
 80030e2:	2300      	movs	r3, #0
 80030e4:	6013      	str	r3, [r2, #0]
    }
    
    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f2:	461a      	mov	r2, r3
 80030f4:	2300      	movs	r3, #0
 80030f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFFU;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	015a      	lsls	r2, r3, #5
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4413      	add	r3, r2
 8003100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003104:	461a      	mov	r2, r3
 8003106:	23ff      	movs	r3, #255	; 0xff
 8003108:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	3301      	adds	r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	429a      	cmp	r2, r3
 8003116:	d8c6      	bhi.n	80030a6 <USB_DevInit+0xc2>
  }
  
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003118:	2300      	movs	r3, #0
 800311a:	60fb      	str	r3, [r7, #12]
 800311c:	e034      	b.n	8003188 <USB_DevInit+0x1a4>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	015a      	lsls	r2, r3, #5
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003130:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003134:	d10a      	bne.n	800314c <USB_DevInit+0x168>
    {
      USBx_OUTEP(i)->DOEPCTL = (USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	015a      	lsls	r2, r3, #5
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003142:	461a      	mov	r2, r3
 8003144:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	e008      	b.n	800315e <USB_DevInit+0x17a>
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	015a      	lsls	r2, r3, #5
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4413      	add	r3, r2
 8003154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003158:	461a      	mov	r2, r3
 800315a:	2300      	movs	r3, #0
 800315c:	6013      	str	r3, [r2, #0]
    }
    
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800316a:	461a      	mov	r2, r3
 800316c:	2300      	movs	r3, #0
 800316e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFFU;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	015a      	lsls	r2, r3, #5
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4413      	add	r3, r2
 8003178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317c:	461a      	mov	r2, r3
 800317e:	23ff      	movs	r3, #255	; 0xff
 8003180:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3301      	adds	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	69fa      	ldr	r2, [r7, #28]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	429a      	cmp	r2, r3
 800318e:	d8c6      	bhi.n	800311e <USB_DevInit+0x13a>
  }
  
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003196:	461a      	mov	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031a4:	6113      	str	r3, [r2, #16]
  
  if (cfg.dma_enable == 1U)
 80031a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d117      	bne.n	80031dc <USB_DevInit+0x1f8>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = (USB_OTG_DTHRCTL_TXTHRLEN_6 | USB_OTG_DTHRCTL_RXTHRLEN_6);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b2:	461a      	mov	r2, r3
 80031b4:	4b22      	ldr	r3, [pc, #136]	; (8003240 <USB_DevInit+0x25c>)
 80031b6:	6313      	str	r3, [r2, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= (USB_OTG_DTHRCTL_RXTHREN | USB_OTG_DTHRCTL_ISOTHREN | USB_OTG_DTHRCTL_NONISOTHREN);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031be:	461a      	mov	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031cc:	f043 0303 	orr.w	r3, r3, #3
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
    
    i= USBx_DEVICE->DTHRCTL;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031da:	60fb      	str	r3, [r7, #12]
  }
  
  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	619a      	str	r2, [r3, #24]
  
  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031e8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == DISABLE)
 80031ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <USB_DevInit+0x218>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM; 
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	f043 0210 	orr.w	r2, r3, #16
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	619a      	str	r2, [r3, #24]
  }
  
  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |\
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	4b10      	ldr	r3, [pc, #64]	; (8003244 <USB_DevInit+0x260>)
 8003202:	4313      	orrs	r3, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |\
                    USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM|\
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM);
  
  if(cfg.Sof_enable)
 8003208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320a:	2b00      	cmp	r3, #0
 800320c:	d005      	beq.n	800321a <USB_DevInit+0x236>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f043 0208 	orr.w	r2, r3, #8
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == ENABLE)
 800321a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800321c:	2b01      	cmp	r3, #1
 800321e:	d107      	bne.n	8003230 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT); 
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	699b      	ldr	r3, [r3, #24]
 8003224:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003228:	f043 0304 	orr.w	r3, r3, #4
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6193      	str	r3, [r2, #24]
  }
  
  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800323c:	b004      	add	sp, #16
 800323e:	4770      	bx	lr
 8003240:	00800100 	.word	0x00800100
 8003244:	803c3800 	.word	0x803c3800

08003248 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo (USB_OTG_GlobalTypeDef *USBx, uint32_t num )
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  uint32_t count = 0;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = ( USB_OTG_GRSTCTL_TXFFLSH |(uint32_t)( num << 6)); 
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	f043 0220 	orr.w	r2, r3, #32
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3301      	adds	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	4a09      	ldr	r2, [pc, #36]	; (8003290 <USB_FlushTxFifo+0x48>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e006      	b.n	8003282 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	f003 0320 	and.w	r3, r3, #32
 800327c:	2b20      	cmp	r3, #32
 800327e:	d0f0      	beq.n	8003262 <USB_FlushTxFifo+0x1a>
  
  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3714      	adds	r7, #20
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	00030d40 	.word	0x00030d40

08003294 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
  
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2210      	movs	r2, #16
 80032a4:	611a      	str	r2, [r3, #16]
  
  do
  {
    if (++count > 200000)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	3301      	adds	r3, #1
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <USB_FlushRxFifo+0x40>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e006      	b.n	80032c6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d0f0      	beq.n	80032a6 <USB_FlushRxFifo+0x12>
  
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	00030d40 	.word	0x00030d40

080032d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx , uint8_t speed)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG |= speed;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032ea:	4619      	mov	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	78fb      	ldrb	r3, [r7, #3]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <USB_GetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003308:	b480      	push	{r7}
 800330a:	b085      	sub	sp, #20
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint8_t speed = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	73fb      	strb	r3, [r7, #15]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0306 	and.w	r3, r3, #6
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <USB_GetDevSpeed+0x22>
  {
    speed = USB_OTG_SPEED_HIGH;
 8003324:	2300      	movs	r3, #0
 8003326:	73fb      	strb	r3, [r7, #15]
 8003328:	e01c      	b.n	8003364 <USB_GetDevSpeed+0x5c>
  }
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0306 	and.w	r3, r3, #6
 8003336:	2b02      	cmp	r3, #2
 8003338:	d007      	beq.n	800334a <USB_GetDevSpeed+0x42>
           ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_48MHZ))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 0306 	and.w	r3, r3, #6
  else if (((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ)||
 8003346:	2b06      	cmp	r3, #6
 8003348:	d102      	bne.n	8003350 <USB_GetDevSpeed+0x48>
  {
    speed = USB_OTG_SPEED_FULL;
 800334a:	2303      	movs	r3, #3
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	e009      	b.n	8003364 <USB_GetDevSpeed+0x5c>
  }
  else if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 0306 	and.w	r3, r3, #6
 800335c:	2b04      	cmp	r3, #4
 800335e:	d101      	bne.n	8003364 <USB_GetDevSpeed+0x5c>
  {
    speed = USB_OTG_SPEED_LOW;
 8003360:	2302      	movs	r3, #2
 8003362:	73fb      	strb	r3, [r7, #15]
  }
  
  return speed;
 8003364:	7bfb      	ldrb	r3, [r7, #15]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3714      	adds	r7, #20
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
 800337a:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	785b      	ldrb	r3, [r3, #1]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d13e      	bne.n	8003402 <USB_ActivateEndpoint+0x90>
  {
   USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num)));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338a:	4619      	mov	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	2301      	movs	r3, #1
 800339c:	4083      	lsls	r3, r0
 800339e:	b29b      	uxth	r3, r3
 80033a0:	4313      	orrs	r3, r2
 80033a2:	61cb      	str	r3, [r1, #28]
   
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d15c      	bne.n	8003476 <USB_ActivateEndpoint+0x104>
    {
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ca:	4618      	mov	r0, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	781b      	ldrb	r3, [r3, #0]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033e4:	6839      	ldr	r1, [r7, #0]
 80033e6:	78c9      	ldrb	r1, [r1, #3]
 80033e8:	0489      	lsls	r1, r1, #18
 80033ea:	430b      	orrs	r3, r1
        ((ep->num) << 22U) | (USB_OTG_DIEPCTL_SD0PID_SEVNFRM) | (USB_OTG_DIEPCTL_USBAEP)); 
 80033ec:	6839      	ldr	r1, [r7, #0]
 80033ee:	7809      	ldrb	r1, [r1, #0]
 80033f0:	0589      	lsls	r1, r1, #22
      USBx_INEP(ep->num)->DIEPCTL |= ((ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ ) | (ep->type << 18U) |\
 80033f2:	430b      	orrs	r3, r1
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033fe:	6003      	str	r3, [r0, #0]
 8003400:	e039      	b.n	8003476 <USB_ActivateEndpoint+0x104>
    } 
  }
  else
  {
     USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003408:	4619      	mov	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003410:	69da      	ldr	r2, [r3, #28]
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	2301      	movs	r3, #1
 800341a:	4083      	lsls	r3, r0
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	4313      	orrs	r3, r2
 8003420:	61cb      	str	r3, [r1, #28]
     
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	4413      	add	r3, r2
 800342c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11d      	bne.n	8003476 <USB_ActivateEndpoint+0x104>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= ((ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ ) | (ep->type << 18U) |\
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	015a      	lsls	r2, r3, #5
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4413      	add	r3, r2
 8003444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003448:	4618      	mov	r0, r3
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4413      	add	r3, r2
 8003454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003462:	6839      	ldr	r1, [r7, #0]
 8003464:	78c9      	ldrb	r1, [r1, #3]
 8003466:	0489      	lsls	r1, r1, #18
 8003468:	430b      	orrs	r3, r1
 800346a:	4313      	orrs	r3, r2
 800346c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003474:	6003      	str	r3, [r0, #0]
       (USB_OTG_DIEPCTL_SD0PID_SEVNFRM)| (USB_OTG_DOEPCTL_USBAEP));
    } 
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
  
  /* Disable the IN endpoint */
  if (ep->is_in == 1U)
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	785b      	ldrb	r3, [r3, #1]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d154      	bne.n	8003544 <USB_DeactivateEndpoint+0xc0>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_USBAEP;  
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	015a      	lsls	r2, r3, #5
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a8:	4619      	mov	r1, r3
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	015a      	lsls	r2, r3, #5
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4413      	add	r3, r2
 80034b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80034be:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	015a      	lsls	r2, r3, #5
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4413      	add	r3, r2
 80034ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ce:	461a      	mov	r2, r3
 80034d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034d4:	6013      	str	r3, [r2, #0]
    
    /* Disable IN endpoint */
    USBx_INEP(ep->num)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e4:	461a      	mov	r2, r3
 80034e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ea:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3301      	adds	r3, #1
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	4a43      	ldr	r2, [pc, #268]	; (8003604 <USB_DeactivateEndpoint+0x180>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <USB_DeactivateEndpoint+0x7a>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e07d      	b.n	80035fa <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_INEP(ep->num)->DIEPINT & USB_OTG_DIEPCTL_EPDIS) == USB_OTG_DIEPCTL_EPDIS);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4413      	add	r3, r2
 8003508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003512:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003516:	d0e9      	beq.n	80034ec <USB_DeactivateEndpoint+0x68>
    
    
    /* Flush any data remaining in the TxFIFO */
    USB_FlushTxFifo(USBx , 0x10U);
 8003518:	2110      	movs	r1, #16
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff fe94 	bl	8003248 <USB_FlushTxFifo>
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & ((1U << (ep->num))));   
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003526:	4619      	mov	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	2301      	movs	r3, #1
 8003538:	4083      	lsls	r3, r0
 800353a:	b29b      	uxth	r3, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	4013      	ands	r3, r2
 8003540:	61cb      	str	r3, [r1, #28]
 8003542:	e059      	b.n	80035f8 <USB_DeactivateEndpoint+0x174>
  
  }
  else /* Disable the OUT endpoint */
  {
    
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_USBAEP;  
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003552:	4619      	mov	r1, r3
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003568:	600b      	str	r3, [r1, #0]
    
    /* sets the NAK bit for the OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003578:	461a      	mov	r2, r3
 800357a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800357e:	6013      	str	r3, [r2, #0]
    
    /* Disable OUT endpoint */
    USBx_OUTEP(ep->num)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	461a      	mov	r2, r3
 8003590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003594:	6013      	str	r3, [r2, #0]
    
    do
    {
      if (++count > 200000U)
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3301      	adds	r3, #1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4a19      	ldr	r2, [pc, #100]	; (8003604 <USB_DeactivateEndpoint+0x180>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d901      	bls.n	80035a8 <USB_DeactivateEndpoint+0x124>
      {
        return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e028      	b.n	80035fa <USB_DeactivateEndpoint+0x176>
      }
    }
    
    /*Wait for  EPDISD endpoint disabled interrupt*/ 
    while ((USBx_OUTEP(ep->num)->DOEPINT & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS);
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	015a      	lsls	r2, r3, #5
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4413      	add	r3, r2
 80035b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0310 	and.w	r3, r3, #16
 80035bc:	2b10      	cmp	r3, #16
 80035be:	d0ea      	beq.n	8003596 <USB_DeactivateEndpoint+0x112>
    
    /* Set the "Clear the Global OUT NAK bit" to disable global OUT NAK mode */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c6:	461a      	mov	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035d4:	6053      	str	r3, [r2, #4]
    
    /* Disable endpoint interrupts */
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((1U << (ep->num)) << 16U));         
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035dc:	4619      	mov	r1, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e4:	69da      	ldr	r2, [r3, #28]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	2301      	movs	r3, #1
 80035ee:	4083      	lsls	r3, r0
 80035f0:	041b      	lsls	r3, r3, #16
 80035f2:	43db      	mvns	r3, r3
 80035f4:	4013      	ands	r3, r2
 80035f6:	61cb      	str	r3, [r1, #28]
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	00030d40 	.word	0x00030d40

08003608 <USB_EPStartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b088      	sub	sp, #32
 800360c:	af02      	add	r7, sp, #8
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	4613      	mov	r3, r2
 8003614:	71fb      	strb	r3, [r7, #7]
  uint16_t pktcnt = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	82fb      	strh	r3, [r7, #22]
  
  /* IN endpoint */
  if (ep->is_in == 1U)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	785b      	ldrb	r3, [r3, #1]
 800361e:	2b01      	cmp	r3, #1
 8003620:	f040 8146 	bne.w	80038b0 <USB_EPStartXfer+0x2a8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d13b      	bne.n	80036a4 <USB_EPStartXfer+0x9c>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363a:	4619      	mov	r1, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	015a      	lsls	r2, r3, #5
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	4413      	add	r3, r2
 8003646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003650:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003654:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003664:	4619      	mov	r1, r3
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003674:	691b      	ldr	r3, [r3, #16]
 8003676:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800367a:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	015a      	lsls	r2, r3, #5
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4413      	add	r3, r2
 8003686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368a:	4619      	mov	r1, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	0cdb      	lsrs	r3, r3, #19
 800369e:	04db      	lsls	r3, r3, #19
 80036a0:	610b      	str	r3, [r1, #16]
 80036a2:	e086      	b.n	80037b2 <USB_EPStartXfer+0x1aa>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	015a      	lsls	r2, r3, #5
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4413      	add	r3, r2
 80036ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b2:	4619      	mov	r1, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036c2:	691b      	ldr	r3, [r3, #16]
 80036c4:	0cdb      	lsrs	r3, r3, #19
 80036c6:	04db      	lsls	r3, r3, #19
 80036c8:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d8:	4619      	mov	r1, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80036ee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80036f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket) << 19U)) ;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	015a      	lsls	r2, r3, #5
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4413      	add	r3, r2
 80036fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003702:	4618      	mov	r0, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	6959      	ldr	r1, [r3, #20]
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	440b      	add	r3, r1
 800371e:	1e59      	subs	r1, r3, #1
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	fbb1 f3f3 	udiv	r3, r1, r3
 8003728:	04d9      	lsls	r1, r3, #19
 800372a:	4b8c      	ldr	r3, [pc, #560]	; (800395c <USB_EPStartXfer+0x354>)
 800372c:	400b      	ands	r3, r1
 800372e:	4313      	orrs	r3, r2
 8003730:	6103      	str	r3, [r0, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003740:	4619      	mov	r1, r3
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003750:	691a      	ldr	r2, [r3, #16]
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375a:	4313      	orrs	r3, r2
 800375c:	610b      	str	r3, [r1, #16]
      
      if (ep->type == EP_TYPE_ISOC)
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	78db      	ldrb	r3, [r3, #3]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d125      	bne.n	80037b2 <USB_EPStartXfer+0x1aa>
      {
        USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT); 
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	015a      	lsls	r2, r3, #5
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4413      	add	r3, r2
 8003770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003774:	4619      	mov	r1, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	015a      	lsls	r2, r3, #5
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4413      	add	r3, r2
 8003780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800378a:	610b      	str	r3, [r1, #16]
        USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29U)); 
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	4413      	add	r3, r2
 8003796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800379a:	4619      	mov	r1, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	015a      	lsls	r2, r3, #5
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	4413      	add	r3, r2
 80037a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037b0:	610b      	str	r3, [r1, #16]
      }       
    }

    if (dma == 1U)
 80037b2:	79fb      	ldrb	r3, [r7, #7]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d10b      	bne.n	80037d0 <USB_EPStartXfer+0x1c8>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	015a      	lsls	r2, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4413      	add	r3, r2
 80037c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037c6:	461a      	mov	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	6153      	str	r3, [r2, #20]
 80037ce:	e016      	b.n	80037fe <USB_EPStartXfer+0x1f6>
    }
    else
    {
      if (ep->type != EP_TYPE_ISOC)
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	78db      	ldrb	r3, [r3, #3]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d012      	beq.n	80037fe <USB_EPStartXfer+0x1f6>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00e      	beq.n	80037fe <USB_EPStartXfer+0x1f6>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1U << ep->num;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e6:	4619      	mov	r1, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	2301      	movs	r3, #1
 80037f8:	4083      	lsls	r3, r0
 80037fa:	4313      	orrs	r3, r2
 80037fc:	634b      	str	r3, [r1, #52]	; 0x34
        }
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	78db      	ldrb	r3, [r3, #3]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d12e      	bne.n	8003864 <USB_EPStartXfer+0x25c>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d113      	bne.n	800383e <USB_EPStartXfer+0x236>
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	781b      	ldrb	r3, [r3, #0]
 800381a:	015a      	lsls	r2, r3, #5
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4413      	add	r3, r2
 8003820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003824:	4619      	mov	r1, r3
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	015a      	lsls	r2, r3, #5
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800383a:	600b      	str	r3, [r1, #0]
 800383c:	e012      	b.n	8003864 <USB_EPStartXfer+0x25c>
      }
      else
      {
        USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384c:	4619      	mov	r1, r3
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	015a      	lsls	r2, r3, #5
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	4413      	add	r3, r2
 8003858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003862:	600b      	str	r3, [r1, #0]
      }
    } 
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003872:	4619      	mov	r1, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	015a      	lsls	r2, r3, #5
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	4413      	add	r3, r2
 800387e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003888:	600b      	str	r3, [r1, #0]
    
    if (ep->type == EP_TYPE_ISOC)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	78db      	ldrb	r3, [r3, #3]
 800388e:	2b01      	cmp	r3, #1
 8003890:	f040 80f5 	bne.w	8003a7e <USB_EPStartXfer+0x476>
    {
      USB_WritePacket(USBx, ep->xfer_buff, ep->num, ep->xfer_len, dma);   
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	68d9      	ldr	r1, [r3, #12]
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	b298      	uxth	r0, r3
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	4603      	mov	r3, r0
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fa4e 	bl	8003d4a <USB_WritePacket>
 80038ae:	e0e6      	b.n	8003a7e <USB_EPStartXfer+0x476>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */  
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	015a      	lsls	r2, r3, #5
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4413      	add	r3, r2
 80038ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038be:	4619      	mov	r1, r3
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	015a      	lsls	r2, r3, #5
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	4413      	add	r3, r2
 80038ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	0cdb      	lsrs	r3, r3, #19
 80038d2:	04db      	lsls	r3, r3, #19
 80038d4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	015a      	lsls	r2, r3, #5
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e4:	4619      	mov	r1, r3
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	015a      	lsls	r2, r3, #5
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038fe:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d12b      	bne.n	8003960 <USB_EPStartXfer+0x358>
    {
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	015a      	lsls	r2, r3, #5
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	4413      	add	r3, r2
 8003912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003916:	4619      	mov	r1, r3
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	015a      	lsls	r2, r3, #5
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003930:	4313      	orrs	r3, r2
 8003932:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	4619      	mov	r1, r3
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	015a      	lsls	r2, r3, #5
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	4413      	add	r3, r2
 800394e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003952:	691b      	ldr	r3, [r3, #16]
 8003954:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003958:	610b      	str	r3, [r1, #16]
 800395a:	e03c      	b.n	80039d6 <USB_EPStartXfer+0x3ce>
 800395c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (ep->xfer_len + ep->maxpacket -1U)/ ep->maxpacket; 
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	4413      	add	r3, r2
 800396a:	1e5a      	subs	r2, r3, #1
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (pktcnt << 19U));
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	015a      	lsls	r2, r3, #5
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003984:	4619      	mov	r1, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	8afb      	ldrh	r3, [r7, #22]
 8003998:	04db      	lsls	r3, r3, #19
 800399a:	4618      	mov	r0, r3
 800399c:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <USB_EPStartXfer+0x480>)
 800399e:	4003      	ands	r3, r0
 80039a0:	4313      	orrs	r3, r2
 80039a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt));
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b2:	4618      	mov	r0, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c2:	691a      	ldr	r2, [r3, #16]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	8af9      	ldrh	r1, [r7, #22]
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d2:	4313      	orrs	r3, r2
 80039d4:	6103      	str	r3, [r0, #16]
    }

    if (dma == 1U)
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d10a      	bne.n	80039f2 <USB_EPStartXfer+0x3ea>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)ep->xfer_buff;
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	015a      	lsls	r2, r3, #5
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	4413      	add	r3, r2
 80039e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ea:	461a      	mov	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	6153      	str	r3, [r2, #20]
    }
    
    if (ep->type == EP_TYPE_ISOC)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	78db      	ldrb	r3, [r3, #3]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d12e      	bne.n	8003a58 <USB_EPStartXfer+0x450>
    {
      if ((USBx_DEVICE->DSTS & ( 1U << 8U )) == 0U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d113      	bne.n	8003a32 <USB_EPStartXfer+0x42a>
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a18:	4619      	mov	r1, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a2e:	600b      	str	r3, [r1, #0]
 8003a30:	e012      	b.n	8003a58 <USB_EPStartXfer+0x450>
      }
      else
      {
        USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a40:	4619      	mov	r1, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	781b      	ldrb	r3, [r3, #0]
 8003a46:	015a      	lsls	r2, r3, #5
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a56:	600b      	str	r3, [r1, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	4619      	mov	r1, r3
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	015a      	lsls	r2, r3, #5
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4413      	add	r3, r2
 8003a72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a7c:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	1ff80000 	.word	0x1ff80000

08003a8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	4613      	mov	r3, r2
 8003a98:	71fb      	strb	r3, [r7, #7]
  /* IN endpoint */
  if (ep->is_in == 1U)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	785b      	ldrb	r3, [r3, #1]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	f040 80d2 	bne.w	8003c48 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d13b      	bne.n	8003b24 <USB_EP0StartXfer+0x98>
    {
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	015a      	lsls	r2, r3, #5
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aba:	4619      	mov	r1, r3
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ad0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ad4:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	015a      	lsls	r2, r3, #5
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4413      	add	r3, r2
 8003af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003afa:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ); 
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	0cdb      	lsrs	r3, r3, #19
 8003b1e:	04db      	lsls	r3, r3, #19
 8003b20:	610b      	str	r3, [r1, #16]
 8003b22:	e05a      	b.n	8003bda <USB_EP0StartXfer+0x14e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b32:	4619      	mov	r1, r3
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	0cdb      	lsrs	r3, r3, #19
 8003b46:	04db      	lsls	r3, r3, #19
 8003b48:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT); 
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b58:	4619      	mov	r1, r3
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b72:	610b      	str	r3, [r1, #16]
      
      if(ep->xfer_len > ep->maxpacket)
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d903      	bls.n	8003b88 <USB_EP0StartXfer+0xfc>
      {
        ep->xfer_len = ep->maxpacket;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19U)) ;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b96:	4619      	mov	r1, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bac:	610b      	str	r3, [r1, #16]
      USBx_INEP(ep->num)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len); 
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bcc:	691a      	ldr	r2, [r3, #16]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	610b      	str	r3, [r1, #16]
    
    }
    
    /* EP enable, IN data in FIFO */
    USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);     
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be8:	4619      	mov	r1, r3
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	015a      	lsls	r2, r3, #5
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bfe:	600b      	str	r3, [r1, #0]
    
    if (dma == 1)
 8003c00:	79fb      	ldrb	r3, [r7, #7]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d10b      	bne.n	8003c1e <USB_EP0StartXfer+0x192>
    {
      USBx_INEP(ep->num)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	6153      	str	r3, [r2, #20]
 8003c1c:	e08e      	b.n	8003d3c <USB_EP0StartXfer+0x2b0>
    }
    else
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 808a 	beq.w	8003d3c <USB_EP0StartXfer+0x2b0>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1U << (ep->num);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c2e:	4619      	mov	r1, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	2301      	movs	r3, #1
 8003c40:	4083      	lsls	r3, r0
 8003c42:	4313      	orrs	r3, r2
 8003c44:	634b      	str	r3, [r1, #52]	; 0x34
 8003c46:	e079      	b.n	8003d3c <USB_EP0StartXfer+0x2b0>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ); 
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c56:	4619      	mov	r1, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	0cdb      	lsrs	r3, r3, #19
 8003c6a:	04db      	lsls	r3, r3, #19
 8003c6c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT); 
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	015a      	lsls	r2, r3, #5
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	4413      	add	r3, r2
 8003c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003c92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003c96:	610b      	str	r3, [r1, #16]
      
    if (ep->xfer_len > 0U)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <USB_EP0StartXfer+0x21c>
    {
      ep->xfer_len = ep->maxpacket;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	615a      	str	r2, [r3, #20]
    }
    
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U));
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ccc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(ep->num)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket)); 
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cdc:	4619      	mov	r1, r3
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	015a      	lsls	r2, r3, #5
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4413      	add	r3, r2
 8003ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	610b      	str	r3, [r1, #16]
    

    if (dma == 1U)
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d10a      	bne.n	8003d16 <USB_EP0StartXfer+0x28a>
    {
      USBx_OUTEP(ep->num)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0e:	461a      	mov	r2, r3
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	6153      	str	r3, [r2, #20]
    }
    
    /* EP enable */
    USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);    
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d24:	4619      	mov	r1, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d3a:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <USB_WritePacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b087      	sub	sp, #28
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	60f8      	str	r0, [r7, #12]
 8003d52:	60b9      	str	r1, [r7, #8]
 8003d54:	4611      	mov	r1, r2
 8003d56:	461a      	mov	r2, r3
 8003d58:	460b      	mov	r3, r1
 8003d5a:	71fb      	strb	r3, [r7, #7]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	80bb      	strh	r3, [r7, #4]
  uint32_t count32b = 0U , i = 0U;
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
  
  if (dma == 0U)
 8003d68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d11a      	bne.n	8003da6 <USB_WritePacket+0x5c>
  {
    count32b =  (len + 3U) / 4U;
 8003d70:	88bb      	ldrh	r3, [r7, #4]
 8003d72:	3303      	adds	r3, #3
 8003d74:	089b      	lsrs	r3, r3, #2
 8003d76:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003d78:	2300      	movs	r3, #0
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e00f      	b.n	8003d9e <USB_WritePacket+0x54>
    {
      USBx_DFIFO(ch_ep_num) = *((__packed uint32_t *)src);
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	031a      	lsls	r2, r3, #12
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6013      	str	r3, [r2, #0]
    for (i = 0U; i < count32b; i++, src += 4U)
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	3301      	adds	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d3eb      	bcc.n	8003d7e <USB_WritePacket+0x34>
    }
  }
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <USB_ReadPacket>:
  *           0 : DMA feature not used 
  *           1 : DMA feature used  
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	80fb      	strh	r3, [r7, #6]
  uint32_t i=0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  uint32_t count32b = (len + 3U) / 4U;
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	3303      	adds	r3, #3
 8003dca:	089b      	lsrs	r3, r3, #2
 8003dcc:	613b      	str	r3, [r7, #16]
  
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003dce:	2300      	movs	r3, #0
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	e00b      	b.n	8003dec <USB_ReadPacket+0x38>
  {
    *(__packed uint32_t *)dest = USBx_DFIFO(0U);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	601a      	str	r2, [r3, #0]
  for ( i = 0U; i < count32b; i++, dest += 4U )
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	3301      	adds	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	3304      	adds	r3, #4
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d3ef      	bcc.n	8003dd4 <USB_ReadPacket+0x20>
    
  }
  return ((void *)dest);
 8003df4:	68bb      	ldr	r3, [r7, #8]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr

08003e02 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx , USB_OTG_EPTypeDef *ep)
{
 8003e02:	b480      	push	{r7}
 8003e04:	b083      	sub	sp, #12
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d130      	bne.n	8003e76 <USB_EPSetStall+0x74>
  {
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == 0U)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	db12      	blt.n	8003e4e <USB_EPSetStall+0x4c>
    {
      USBx_INEP(ep->num)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS); 
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	015a      	lsls	r2, r3, #5
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4413      	add	r3, r2
 8003e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e36:	4619      	mov	r1, r3
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	015a      	lsls	r2, r3, #5
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e4c:	600b      	str	r3, [r1, #0]
    } 
    USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	e02f      	b.n	8003ed6 <USB_EPSetStall+0xd4>
  }
  else
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == 0U)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	015a      	lsls	r2, r3, #5
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4413      	add	r3, r2
 8003e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	db12      	blt.n	8003eb0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(ep->num)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS); 
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e98:	4619      	mov	r1, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	015a      	lsls	r2, r3, #5
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003eae:	600b      	str	r3, [r1, #0]
    } 
    USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	015a      	lsls	r2, r3, #5
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ed4:	600b      	str	r3, [r1, #0]
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  if (ep->is_in == 1U)
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	785b      	ldrb	r3, [r3, #1]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d12e      	bne.n	8003f54 <USB_EPClearStall+0x70>
  {
    USBx_INEP(ep->num)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f04:	4619      	mov	r1, r3
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f1a:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	78db      	ldrb	r3, [r3, #3]
 8003f20:	2b03      	cmp	r3, #3
 8003f22:	d003      	beq.n	8003f2c <USB_EPClearStall+0x48>
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	78db      	ldrb	r3, [r3, #3]
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d141      	bne.n	8003fb0 <USB_EPClearStall+0xcc>
    {
       USBx_INEP(ep->num)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	015a      	lsls	r2, r3, #5
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	015a      	lsls	r2, r3, #5
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4413      	add	r3, r2
 8003f46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f50:	600b      	str	r3, [r1, #0]
 8003f52:	e02d      	b.n	8003fb0 <USB_EPClearStall+0xcc>
    }    
  }
  else
  {
    USBx_OUTEP(ep->num)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	015a      	lsls	r2, r3, #5
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f62:	4619      	mov	r1, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	015a      	lsls	r2, r3, #5
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f78:	600b      	str	r3, [r1, #0]
    if (ep->type == EP_TYPE_INTR || ep->type == EP_TYPE_BULK)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	78db      	ldrb	r3, [r3, #3]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d003      	beq.n	8003f8a <USB_EPClearStall+0xa6>
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	78db      	ldrb	r3, [r3, #3]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d112      	bne.n	8003fb0 <USB_EPClearStall+0xcc>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	015a      	lsls	r2, r3, #5
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4413      	add	r3, r2
 8003f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f98:	4619      	mov	r1, r3
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	015a      	lsls	r2, r3, #5
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fae:	600b      	str	r3, [r1, #0]
    }    
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr

08003fbe <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	70fb      	strb	r3, [r7, #3]
  USBx_DEVICE->DCFG &= ~ (USB_OTG_DCFG_DAD);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003fde:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= (address << 4U) & USB_OTG_DCFG_DAD ;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	011b      	lsls	r3, r3, #4
 8003ff4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	600b      	str	r3, [r1, #0]
  
  return HAL_OK;  
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr

0800400a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_OTG_GlobalTypeDef *USBx)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS ;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004018:	461a      	mov	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f023 0302 	bic.w	r3, r3, #2
 8004026:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004028:	2003      	movs	r0, #3
 800402a:	f7fc faa3 	bl	8000574 <HAL_Delay>
  
  return HAL_OK;  
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3708      	adds	r7, #8
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_OTG_GlobalTypeDef *USBx)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b082      	sub	sp, #8
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS ;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004046:	461a      	mov	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f043 0302 	orr.w	r3, r3, #2
 8004054:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8004056:	2003      	movs	r0, #3
 8004058:	f7fc fa8c 	bl	8000574 <HAL_Delay>
  
  return HAL_OK;  
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts (USB_OTG_GlobalTypeDef *USBx)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
  uint32_t v = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
  
  v = USBx->GINTSTS;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	60fb      	str	r3, [r7, #12]
  v &= USBx->GINTMSK;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	4013      	ands	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]
  return v;  
 8004082:	68fb      	ldr	r3, [r7, #12]
}
 8004084:	4618      	mov	r0, r3
 8004086:	3714      	adds	r7, #20
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	4013      	ands	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
  return ((v & 0xffff0000U) >> 16U);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	0c1b      	lsrs	r3, r3, #16
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt (USB_OTG_GlobalTypeDef *USBx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  uint32_t v;
  v  = USBx_DEVICE->DAINT;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DAINTMSK;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4013      	ands	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  return ((v & 0xFFFFU));
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	b29b      	uxth	r3, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	460b      	mov	r3, r1
 80040fa:	70fb      	strb	r3, [r7, #3]
  uint32_t v;
  v  = USBx_OUTEP(epnum)->DOEPINT;
 80040fc:	78fb      	ldrb	r3, [r7, #3]
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	60fb      	str	r3, [r7, #12]
  v &= USBx_DEVICE->DOEPMSK;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4013      	ands	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  return v;
 800411a:	68fb      	ldr	r3, [r7, #12]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt (USB_OTG_GlobalTypeDef *USBx , uint8_t epnum)
{
 8004128:	b480      	push	{r7}
 800412a:	b087      	sub	sp, #28
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  uint32_t v, msk, emp;
  
  msk = USBx_DEVICE->DIEPMSK;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	617b      	str	r3, [r7, #20]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004146:	613b      	str	r3, [r7, #16]
  msk |= ((emp >> epnum) & 0x1U) << 7U;
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	fa22 f303 	lsr.w	r3, r2, r3
 8004150:	01db      	lsls	r3, r3, #7
 8004152:	b2db      	uxtb	r3, r3
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
  v = USBx_INEP(epnum)->DIEPINT & msk;
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	4013      	ands	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]
  return v;
 800416e:	68fb      	ldr	r3, [r7, #12]
}
 8004170:	4618      	mov	r0, r3
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host 
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS ) & 0x1U);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	f003 0301 	and.w	r3, r3, #1
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup (USB_OTG_GlobalTypeDef *USBx)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a6:	461a      	mov	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80041b4:	f023 0307 	bic.w	r3, r3, #7
 80041b8:	6013      	str	r3, [r2, #0]
  
  if((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 0306 	and.w	r3, r3, #6
 80041c6:	2b04      	cmp	r3, #4
 80041c8:	d10a      	bne.n	80041e0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	461a      	mov	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f043 0303 	orr.w	r3, r3, #3
 80041de:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e6:	461a      	mov	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	370c      	adds	r7, #12
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr

08004204 <USB_EP0_OutStart>:
  *           1 : DMA feature used  
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004204:	b480      	push	{r7}
 8004206:	b085      	sub	sp, #20
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	460b      	mov	r3, r1
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	72fb      	strb	r3, [r7, #11]
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004218:	461a      	mov	r2, r3
 800421a:	2300      	movs	r3, #0
 800421c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19U)) ;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004224:	461a      	mov	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004232:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423a:	461a      	mov	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f043 0318 	orr.w	r3, r3, #24
 8004248:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;  
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004250:	461a      	mov	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800425e:	6113      	str	r3, [r2, #16]
  
  if (dma == 1U)
 8004260:	7afb      	ldrb	r3, [r7, #11]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d10c      	bne.n	8004280 <USB_EP0_OutStart+0x7c>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426c:	461a      	mov	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL = 0x80008000U;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004278:	461a      	mov	r2, r3
 800427a:	f04f 2380 	mov.w	r3, #2147516416	; 0x80008000
 800427e:	6013      	str	r3, [r2, #0]
  }
  
  return HAL_OK;  
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004290:	b480      	push	{r7}
 8004292:	b085      	sub	sp, #20
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	3301      	adds	r3, #1
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a13      	ldr	r2, [pc, #76]	; (80042f4 <USB_CoreReset+0x64>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d901      	bls.n	80042ae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e01b      	b.n	80042e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	daf2      	bge.n	800429c <USB_CoreReset+0xc>
  
  /* Core Soft Reset */
  count = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	f043 0201 	orr.w	r2, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	3301      	adds	r3, #1
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4a09      	ldr	r2, [pc, #36]	; (80042f4 <USB_CoreReset+0x64>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d901      	bls.n	80042d8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	e006      	b.n	80042e6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d0f0      	beq.n	80042c6 <USB_CoreReset+0x36>
  
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	00030d40 	.word	0x00030d40

080042f8 <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7c1b      	ldrb	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10e      	bne.n	800432e <USBD_CDC_Init+0x36>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004314:	2202      	movs	r2, #2
 8004316:	2181      	movs	r1, #129	; 0x81
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f003 fbb1 	bl	8007a80 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800431e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004322:	2202      	movs	r2, #2
 8004324:	2101      	movs	r1, #1
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f003 fbaa 	bl	8007a80 <USBD_LL_OpenEP>
 800432c:	e00b      	b.n	8004346 <USBD_CDC_Init+0x4e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800432e:	2340      	movs	r3, #64	; 0x40
 8004330:	2202      	movs	r2, #2
 8004332:	2181      	movs	r1, #129	; 0x81
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f003 fba3 	bl	8007a80 <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800433a:	2340      	movs	r3, #64	; 0x40
 800433c:	2202      	movs	r2, #2
 800433e:	2101      	movs	r1, #1
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f003 fb9d 	bl	8007a80 <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 8004346:	2308      	movs	r3, #8
 8004348:	2203      	movs	r2, #3
 800434a:	2182      	movs	r1, #130	; 0x82
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f003 fb97 	bl	8007a80 <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004352:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004356:	f003 fe5b 	bl	8008010 <malloc>
 800435a:	4603      	mov	r3, r0
 800435c:	461a      	mov	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800436a:	2b00      	cmp	r3, #0
 800436c:	d102      	bne.n	8004374 <USBD_CDC_Init+0x7c>
  {
    ret = 1; 
 800436e:	2301      	movs	r3, #1
 8004370:	73fb      	strb	r3, [r7, #15]
 8004372:	e026      	b.n	80043c2 <USBD_CDC_Init+0xca>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800437a:	60bb      	str	r3, [r7, #8]
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2200      	movs	r2, #0
 800438a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState =0;
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2200      	movs	r2, #0
 8004392:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	7c1b      	ldrb	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d109      	bne.n	80043b2 <USBD_CDC_Init+0xba>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043a8:	2101      	movs	r1, #1
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f003 fce4 	bl	8007d78 <USBD_LL_PrepareReceive>
 80043b0:	e007      	b.n	80043c2 <USBD_CDC_Init+0xca>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80043b8:	2340      	movs	r3, #64	; 0x40
 80043ba:	2101      	movs	r1, #1
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f003 fcdb 	bl	8007d78 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    
    
  }
  return ret;
 80043c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0;
 80043d8:	2300      	movs	r3, #0
 80043da:	73fb      	strb	r3, [r7, #15]
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 80043dc:	2181      	movs	r1, #129	; 0x81
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f003 fb8c 	bl	8007afc <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 80043e4:	2101      	movs	r1, #1
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f003 fb88 	bl	8007afc <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 80043ec:	2182      	movs	r1, #130	; 0x82
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f003 fb84 	bl	8007afc <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d00e      	beq.n	800441c <USBD_CDC_DeInit+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800440e:	4618      	mov	r0, r3
 8004410:	f003 fe06 	bl	8008020 <free>
    pdev->pClassData = NULL;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  }
  
  return ret;
 800441c:	7bfb      	ldrb	r3, [r7, #15]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
	...

08004428 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004438:	60fb      	str	r3, [r7, #12]
  static uint8_t ifalt = 0;
    
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004442:	2b00      	cmp	r3, #0
 8004444:	d03a      	beq.n	80044bc <USBD_CDC_Setup+0x94>
 8004446:	2b20      	cmp	r3, #32
 8004448:	d000      	beq.n	800444c <USBD_CDC_Setup+0x24>
    case USB_REQ_SET_INTERFACE :
      break;
    }
 
  default: 
    break;
 800444a:	e043      	b.n	80044d4 <USBD_CDC_Setup+0xac>
    if (req->wLength)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	88db      	ldrh	r3, [r3, #6]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d029      	beq.n	80044a8 <USBD_CDC_Setup+0x80>
      if (req->bmRequest & 0x80)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	b25b      	sxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	da11      	bge.n	8004482 <USBD_CDC_Setup+0x5a>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800446a:	68f9      	ldr	r1, [r7, #12]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800446c:	683a      	ldr	r2, [r7, #0]
 800446e:	88d2      	ldrh	r2, [r2, #6]
 8004470:	4798      	blx	r3
                            (uint8_t *)hcdc->data,
 8004472:	68f9      	ldr	r1, [r7, #12]
          USBD_CtlSendData (pdev, 
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	88db      	ldrh	r3, [r3, #6]
 8004478:	461a      	mov	r2, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f001 f856 	bl	800552c <USBD_CtlSendData>
    break;
 8004480:	e029      	b.n	80044d6 <USBD_CDC_Setup+0xae>
        hcdc->CmdOpCode = req->bRequest;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	785a      	ldrb	r2, [r3, #1]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	88db      	ldrh	r3, [r3, #6]
 8004490:	b2da      	uxtb	r2, r3
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
                           (uint8_t *)hcdc->data,
 8004498:	68f9      	ldr	r1, [r7, #12]
        USBD_CtlPrepareRx (pdev, 
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	88db      	ldrh	r3, [r3, #6]
 800449e:	461a      	mov	r2, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f001 f871 	bl	8005588 <USBD_CtlPrepareRx>
    break;
 80044a6:	e016      	b.n	80044d6 <USBD_CDC_Setup+0xae>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	7850      	ldrb	r0, [r2, #1]
 80044b4:	2200      	movs	r2, #0
 80044b6:	6839      	ldr	r1, [r7, #0]
 80044b8:	4798      	blx	r3
    break;
 80044ba:	e00c      	b.n	80044d6 <USBD_CDC_Setup+0xae>
    switch (req->bRequest)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	785b      	ldrb	r3, [r3, #1]
 80044c0:	2b0a      	cmp	r3, #10
 80044c2:	d001      	beq.n	80044c8 <USBD_CDC_Setup+0xa0>
 80044c4:	2b0b      	cmp	r3, #11
      break;
 80044c6:	e005      	b.n	80044d4 <USBD_CDC_Setup+0xac>
      USBD_CtlSendData (pdev,
 80044c8:	2201      	movs	r2, #1
 80044ca:	4905      	ldr	r1, [pc, #20]	; (80044e0 <USBD_CDC_Setup+0xb8>)
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f001 f82d 	bl	800552c <USBD_CtlSendData>
      break;
 80044d2:	bf00      	nop
    break;
 80044d4:	bf00      	nop
  }
  return USBD_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	200001e0 	.word	0x200001e0

080044e4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80044f6:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d005      	beq.n	800450e <USBD_CDC_DataIn+0x2a>
  {
    
    hcdc->TxState = 0;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2200      	movs	r2, #0
 8004506:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    return USBD_OK;
 800450a:	2300      	movs	r3, #0
 800450c:	e000      	b.n	8004510 <USBD_CDC_DataIn+0x2c>
  }
  else
  {
    return USBD_FAIL;
 800450e:	2302      	movs	r3, #2
  }
}
 8004510:	4618      	mov	r0, r3
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800452e:	60fb      	str	r3, [r7, #12]
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	4619      	mov	r1, r3
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f003 fc59 	bl	8007dec <USBD_LL_GetRxDataSize>
 800453a:	4602      	mov	r2, r0
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00d      	beq.n	8004568 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004560:	4611      	mov	r1, r2
 8004562:	4798      	blx	r3

    return USBD_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	e000      	b.n	800456a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8004568:	2302      	movs	r3, #2
  }
}
 800456a:	4618      	mov	r0, r3
 800456c:	3710      	adds	r7, #16
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <USBD_CDC_EP0_RxReady>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8004572:	b580      	push	{r7, lr}
 8004574:	b084      	sub	sp, #16
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004580:	60fb      	str	r3, [r7, #12]
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d015      	beq.n	80045b8 <USBD_CDC_EP0_RxReady+0x46>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004592:	2bff      	cmp	r3, #255	; 0xff
 8004594:	d010      	beq.n	80045b8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80045a4:	68f9      	ldr	r1, [r7, #12]
                                                      hcdc->CmdLength);
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80045ac:	b292      	uxth	r2, r2
 80045ae:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFF; 
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	22ff      	movs	r2, #255	; 0xff
 80045b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
      
  }
  return USBD_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2243      	movs	r2, #67	; 0x43
 80045d0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80045d2:	4b03      	ldr	r3, [pc, #12]	; (80045e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	2000008c 	.word	0x2000008c

080045e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2243      	movs	r2, #67	; 0x43
 80045f0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80045f2:	4b03      	ldr	r3, [pc, #12]	; (8004600 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	20000048 	.word	0x20000048

08004604 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2243      	movs	r2, #67	; 0x43
 8004610:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8004612:	4b03      	ldr	r3, [pc, #12]	; (8004620 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	200000d0 	.word	0x200000d0

08004624 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	220a      	movs	r2, #10
 8004630:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8004632:	4b03      	ldr	r3, [pc, #12]	; (8004640 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004634:	4618      	mov	r0, r3
 8004636:	370c      	adds	r7, #12
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr
 8004640:	20000004 	.word	0x20000004

08004644 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800464e:	2302      	movs	r3, #2
 8004650:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d005      	beq.n	8004664 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    ret = USBD_OK;    
 8004660:	2300      	movs	r3, #0
 8004662:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8004664:	7bfb      	ldrb	r3, [r7, #15]
}
 8004666:	4618      	mov	r0, r3
 8004668:	3714      	adds	r7, #20
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8004672:	b480      	push	{r7}
 8004674:	b087      	sub	sp, #28
 8004676:	af00      	add	r7, sp, #0
 8004678:	60f8      	str	r0, [r7, #12]
 800467a:	60b9      	str	r1, [r7, #8]
 800467c:	4613      	mov	r3, r2
 800467e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004686:	617b      	str	r3, [r7, #20]
  
  hcdc->TxBuffer = pbuff;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 8004690:	88fa      	ldrh	r2, [r7, #6]
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b085      	sub	sp, #20
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80046b6:	60fb      	str	r3, [r7, #12]
  
  hcdc->RxBuffer = pbuff;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	683a      	ldr	r2, [r7, #0]
 80046bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
  
  return USBD_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b084      	sub	sp, #16
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80046dc:	60fb      	str	r3, [r7, #12]
  
  if(pdev->pClassData != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d017      	beq.n	8004718 <USBD_CDC_TransmitPacket+0x4a>
  {
    if(hcdc->TxState == 0)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d110      	bne.n	8004714 <USBD_CDC_TransmitPacket+0x46>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev,
 8004706:	b29b      	uxth	r3, r3
 8004708:	2181      	movs	r1, #129	; 0x81
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f003 fafa 	bl	8007d04 <USBD_LL_Transmit>
      
      return USBD_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e002      	b.n	800471a <USBD_CDC_TransmitPacket+0x4c>
    }
    else
    {
      return USBD_BUSY;
 8004714:	2301      	movs	r3, #1
 8004716:	e000      	b.n	800471a <USBD_CDC_TransmitPacket+0x4c>
    }
  }
  else
  {
    return USBD_FAIL;
 8004718:	2302      	movs	r3, #2
  }
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004730:	60fb      	str	r3, [r7, #12]
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004738:	2b00      	cmp	r3, #0
 800473a:	d017      	beq.n	800476c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	7c1b      	ldrb	r3, [r3, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <USBD_CDC_ReceivePacket+0x36>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800474a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800474e:	2101      	movs	r1, #1
 8004750:	6878      	ldr	r0, [r7, #4]
 8004752:	f003 fb11 	bl	8007d78 <USBD_LL_PrepareReceive>
 8004756:	e007      	b.n	8004768 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800475e:	2340      	movs	r3, #64	; 0x40
 8004760:	2101      	movs	r1, #1
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f003 fb08 	bl	8007d78 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004768:	2300      	movs	r3, #0
 800476a:	e000      	b.n	800476e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	60b9      	str	r1, [r7, #8]
 8004780:	4613      	mov	r3, r2
 8004782:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <USBD_Init+0x18>
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 800478a:	2302      	movs	r3, #2
 800478c:	e01a      	b.n	80047c4 <USBD_Init+0x4e>
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2200      	movs	r2, #0
 800479c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d003      	beq.n	80047ae <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->id = id;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	79fa      	ldrb	r2, [r7, #7]
 80047ba:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f003 f8d9 	bl	8007974 <USBD_LL_Init>
  
  return USBD_OK; 
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d006      	beq.n	80047ee <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    status = USBD_OK;
 80047e8:	2300      	movs	r3, #0
 80047ea:	73fb      	strb	r3, [r7, #15]
 80047ec:	e001      	b.n	80047f2 <USBD_RegisterClass+0x26>
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 80047ee:	2302      	movs	r3, #2
 80047f0:	73fb      	strb	r3, [r7, #15]
  }
  
  return status;
 80047f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f003 f907 	bl	8007a1c <USBD_LL_Start>
  
  return USBD_OK;  
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev) 
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	460b      	mov	r3, r1
 8004838:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800483a:	2302      	movs	r3, #2
 800483c:	73fb      	strb	r3, [r7, #15]
  
  if(pdev->pClass != NULL)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00c      	beq.n	8004862 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	4611      	mov	r1, r2
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	4798      	blx	r3
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret; 
 8004862:	7bfb      	ldrb	r3, [r7, #15]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b082      	sub	sp, #8
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	78fa      	ldrb	r2, [r7, #3]
 8004882:	4611      	mov	r1, r2
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	4798      	blx	r3
  return USBD_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3708      	adds	r7, #8
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048a2:	6839      	ldr	r1, [r7, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fd98 	bl	80053da <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8b3 320e 	ldrh.w	r3, [r3, #526]	; 0x20e
 80048b8:	461a      	mov	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 80048c6:	f003 031f 	and.w	r3, r3, #31
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d00b      	beq.n	80048e6 <USBD_LL_SetupStage+0x54>
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d011      	beq.n	80048f6 <USBD_LL_SetupStage+0x64>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d117      	bne.n	8004906 <USBD_LL_SetupStage+0x74>
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f9c6 	bl	8004c70 <USBD_StdDevReq>
    break;
 80048e4:	e01a      	b.n	800491c <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048ec:	4619      	mov	r1, r3
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fa0e 	bl	8004d10 <USBD_StdItfReq>
    break;
 80048f4:	e012      	b.n	800491c <USBD_LL_SetupStage+0x8a>
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048fc:	4619      	mov	r1, r3
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa39 	bl	8004d76 <USBD_StdEPReq>
    break;
 8004904:	e00a      	b.n	800491c <USBD_LL_SetupStage+0x8a>
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800490c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004910:	b2db      	uxtb	r3, r3
 8004912:	4619      	mov	r1, r3
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f003 f927 	bl	8007b68 <USBD_LL_StallEP>
    break;
 800491a:	bf00      	nop
  }  
  return USBD_OK;  
 800491c:	2300      	movs	r3, #0
}
 800491e:	4618      	mov	r0, r3
 8004920:	3708      	adds	r7, #8
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b086      	sub	sp, #24
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	460b      	mov	r3, r1
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8004934:	7afb      	ldrb	r3, [r7, #11]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d138      	bne.n	80049ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8004940:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8004948:	2b03      	cmp	r3, #3
 800494a:	d142      	bne.n	80049d2 <USBD_LL_DataOutStage+0xac>
    {
      if(pep->rem_length > pep->maxpacket)
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	429a      	cmp	r2, r3
 8004956:	d914      	bls.n	8004982 <USBD_LL_DataOutStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	1ad2      	subs	r2, r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	609a      	str	r2, [r3, #8]
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	4293      	cmp	r3, r2
 8004970:	bf28      	it	cs
 8004972:	4613      	movcs	r3, r2
        USBD_CtlContinueRx (pdev, 
 8004974:	b29b      	uxth	r3, r3
 8004976:	461a      	mov	r2, r3
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fe22 	bl	80055c4 <USBD_CtlContinueRx>
 8004980:	e027      	b.n	80049d2 <USBD_LL_DataOutStage+0xac>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <USBD_LL_DataOutStage+0x7e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004994:	2b03      	cmp	r3, #3
 8004996:	d105      	bne.n	80049a4 <USBD_LL_DataOutStage+0x7e>
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fe1f 	bl	80055e8 <USBD_CtlSendStatus>
 80049aa:	e012      	b.n	80049d2 <USBD_LL_DataOutStage+0xac>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00c      	beq.n	80049d2 <USBD_LL_DataOutStage+0xac>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataOut != NULL)&&
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d107      	bne.n	80049d2 <USBD_LL_DataOutStage+0xac>
  {
    pdev->pClass->DataOut(pdev, epnum); 
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	7afa      	ldrb	r2, [r7, #11]
 80049cc:	4611      	mov	r1, r2
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	4798      	blx	r3
  }  
  return USBD_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	460b      	mov	r3, r1
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80049ea:	7afb      	ldrb	r3, [r7, #11]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d16c      	bne.n	8004aca <USBD_LL_DataInStage+0xee>
  {
    pep = &pdev->ep_in[0];
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	3314      	adds	r3, #20
 80049f4:	617b      	str	r3, [r7, #20]
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d157      	bne.n	8004ab0 <USBD_LL_DataInStage+0xd4>
    {
      if(pep->rem_length > pep->maxpacket)
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d915      	bls.n	8004a38 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -=  pep->maxpacket;
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	689a      	ldr	r2, [r3, #8]
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	1ad2      	subs	r2, r2, r3
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	609a      	str	r2, [r3, #8]
        
        USBD_CtlContinueSendData (pdev, 
                                  pdata, 
                                  pep->rem_length);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	689b      	ldr	r3, [r3, #8]
        USBD_CtlContinueSendData (pdev, 
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	6879      	ldr	r1, [r7, #4]
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f000 fd9d 	bl	8005564 <USBD_CtlContinueSendData>
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2100      	movs	r1, #0
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f003 f9a1 	bl	8007d78 <USBD_LL_PrepareReceive>
 8004a36:	e03b      	b.n	8004ab0 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);  
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	697a      	ldr	r2, [r7, #20]
 8004a3e:	68d2      	ldr	r2, [r2, #12]
 8004a40:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a44:	fb02 f201 	mul.w	r2, r2, r1
 8004a48:	1a9b      	subs	r3, r3, r2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d11c      	bne.n	8004a88 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	68db      	ldr	r3, [r3, #12]
        if((pep->total_length % pep->maxpacket == 0) &&
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d316      	bcc.n	8004a88 <USBD_LL_DataInStage+0xac>
             (pep->total_length < pdev->ep0_data_len ))
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	685a      	ldr	r2, [r3, #4]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
           (pep->total_length >= pep->maxpacket) &&
 8004a64:	429a      	cmp	r2, r3
 8004a66:	d20f      	bcs.n	8004a88 <USBD_LL_DataInStage+0xac>
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fd79 	bl	8005564 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2100      	movs	r1, #0
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f003 f979 	bl	8007d78 <USBD_LL_PrepareReceive>
 8004a86:	e013      	b.n	8004ab0 <USBD_LL_DataInStage+0xd4>
                                NULL,
                                0);
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d00a      	beq.n	8004aaa <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d105      	bne.n	8004aaa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8004aaa:	68f8      	ldr	r0, [r7, #12]
 8004aac:	f000 fdaf 	bl	800560e <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d11a      	bne.n	8004af0 <USBD_LL_DataInStage+0x114>
    {
      USBD_RunTestMode(pdev); 
 8004aba:	68f8      	ldr	r0, [r7, #12]
 8004abc:	f7ff feac 	bl	8004818 <USBD_RunTestMode>
      pdev->dev_test_mode = 0;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
 8004ac8:	e012      	b.n	8004af0 <USBD_LL_DataInStage+0x114>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ad0:	695b      	ldr	r3, [r3, #20]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00c      	beq.n	8004af0 <USBD_LL_DataInStage+0x114>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
  else if((pdev->pClass->DataIn != NULL)&& 
 8004adc:	2b03      	cmp	r3, #3
 8004ade:	d107      	bne.n	8004af0 <USBD_LL_DataInStage+0x114>
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	7afa      	ldrb	r2, [r7, #11]
 8004aea:	4611      	mov	r1, r2
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	4798      	blx	r3
  }  
  return USBD_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8004b02:	2340      	movs	r3, #64	; 0x40
 8004b04:	2200      	movs	r2, #0
 8004b06:	2100      	movs	r1, #0
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f002 ffb9 	bl	8007a80 <USBD_LL_OpenEP>
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2240      	movs	r2, #64	; 0x40
 8004b12:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8004b16:	2340      	movs	r3, #64	; 0x40
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2180      	movs	r1, #128	; 0x80
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f002 ffaf 	bl	8007a80 <USBD_LL_OpenEP>
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2240      	movs	r2, #64	; 0x40
 8004b26:	621a      	str	r2, [r3, #32]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d009      	beq.n	8004b4e <USBD_LL_Reset+0x54>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6852      	ldr	r2, [r2, #4]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	4611      	mov	r1, r2
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	4798      	blx	r3
 
  
  return USBD_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 21fc 	ldrb.w	r2, [r3, #508]	; 0x1fc
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2204      	movs	r2, #4
 8004b90:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	370c      	adds	r7, #12
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b083      	sub	sp, #12
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;  
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  return USBD_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b082      	sub	sp, #8
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d10b      	bne.n	8004bee <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b083      	sub	sp, #12
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	460b      	mov	r3, r1
 8004c02:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004c04:	2300      	movs	r3, #0
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr

08004c12 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8004c12:	b480      	push	{r7}
 8004c14:	b083      	sub	sp, #12
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
 8004c1a:	460b      	mov	r3, r1
 8004c1c:	70fb      	strb	r3, [r7, #3]
  return USBD_OK;
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
  return USBD_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
  pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	6852      	ldr	r2, [r2, #4]
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	4611      	mov	r1, r2
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
   
  return USBD_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;  
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]
  
  switch (req->bRequest) 
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	785b      	ldrb	r3, [r3, #1]
 8004c82:	2b09      	cmp	r3, #9
 8004c84:	d839      	bhi.n	8004cfa <USBD_StdDevReq+0x8a>
 8004c86:	a201      	add	r2, pc, #4	; (adr r2, 8004c8c <USBD_StdDevReq+0x1c>)
 8004c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8c:	08004cdd 	.word	0x08004cdd
 8004c90:	08004cf1 	.word	0x08004cf1
 8004c94:	08004cfb 	.word	0x08004cfb
 8004c98:	08004ce7 	.word	0x08004ce7
 8004c9c:	08004cfb 	.word	0x08004cfb
 8004ca0:	08004cbf 	.word	0x08004cbf
 8004ca4:	08004cb5 	.word	0x08004cb5
 8004ca8:	08004cfb 	.word	0x08004cfb
 8004cac:	08004cd3 	.word	0x08004cd3
 8004cb0:	08004cc9 	.word	0x08004cc9
  {
  case USB_REQ_GET_DESCRIPTOR: 
    
    USBD_GetDescriptor (pdev, req) ;
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f936 	bl	8004f28 <USBD_GetDescriptor>
    break;
 8004cbc:	e022      	b.n	8004d04 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_ADDRESS:                      
    USBD_SetAddress(pdev, req);
 8004cbe:	6839      	ldr	r1, [r7, #0]
 8004cc0:	6878      	ldr	r0, [r7, #4]
 8004cc2:	f000 fa25 	bl	8005110 <USBD_SetAddress>
    break;
 8004cc6:	e01d      	b.n	8004d04 <USBD_StdDevReq+0x94>
    
  case USB_REQ_SET_CONFIGURATION:                    
    USBD_SetConfig (pdev , req);
 8004cc8:	6839      	ldr	r1, [r7, #0]
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 fa5e 	bl	800518c <USBD_SetConfig>
    break;
 8004cd0:	e018      	b.n	8004d04 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_CONFIGURATION:                 
    USBD_GetConfig (pdev , req);
 8004cd2:	6839      	ldr	r1, [r7, #0]
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fae1 	bl	800529c <USBD_GetConfig>
    break;
 8004cda:	e013      	b.n	8004d04 <USBD_StdDevReq+0x94>
    
  case USB_REQ_GET_STATUS:                                  
    USBD_GetStatus (pdev , req);
 8004cdc:	6839      	ldr	r1, [r7, #0]
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 fb0e 	bl	8005300 <USBD_GetStatus>
    break;
 8004ce4:	e00e      	b.n	8004d04 <USBD_StdDevReq+0x94>
    
    
  case USB_REQ_SET_FEATURE:   
    USBD_SetFeature (pdev , req);    
 8004ce6:	6839      	ldr	r1, [r7, #0]
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fb33 	bl	8005354 <USBD_SetFeature>
    break;
 8004cee:	e009      	b.n	8004d04 <USBD_StdDevReq+0x94>
    
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
 8004cf0:	6839      	ldr	r1, [r7, #0]
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 fb49 	bl	800538a <USBD_ClrFeature>
    break;
 8004cf8:	e004      	b.n	8004d04 <USBD_StdDevReq+0x94>
    
  default:  
    USBD_CtlError(pdev , req);
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f000 fba9 	bl	8005454 <USBD_CtlError>
    break;
 8004d02:	bf00      	nop
  }
  
  return ret;
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop

08004d10 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK; 
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  
  switch (pdev->dev_state) 
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004d24:	2b03      	cmp	r3, #3
 8004d26:	d11b      	bne.n	8004d60 <USBD_StdItfReq+0x50>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	889b      	ldrh	r3, [r3, #4]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d811      	bhi.n	8004d56 <USBD_StdItfReq+0x46>
    {
      pdev->pClass->Setup (pdev, req); 
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	6839      	ldr	r1, [r7, #0]
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	88db      	ldrh	r3, [r3, #6]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d110      	bne.n	8004d6a <USBD_StdItfReq+0x5a>
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10d      	bne.n	8004d6a <USBD_StdItfReq+0x5a>
      {
         USBD_CtlSendStatus(pdev);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 fc4a 	bl	80055e8 <USBD_CtlSendStatus>
    } 
    else 
    {                                               
       USBD_CtlError(pdev , req);
    }
    break;
 8004d54:	e009      	b.n	8004d6a <USBD_StdItfReq+0x5a>
       USBD_CtlError(pdev , req);
 8004d56:	6839      	ldr	r1, [r7, #0]
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fb7b 	bl	8005454 <USBD_CtlError>
    break;
 8004d5e:	e004      	b.n	8004d6a <USBD_StdItfReq+0x5a>
    
  default:
     USBD_CtlError(pdev , req);
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fb76 	bl	8005454 <USBD_CtlError>
    break;
 8004d68:	e000      	b.n	8004d6c <USBD_StdItfReq+0x5c>
    break;
 8004d6a:	bf00      	nop
  }
  return USBD_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3710      	adds	r7, #16
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b084      	sub	sp, #16
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
 8004d80:	2300      	movs	r3, #0
 8004d82:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	889b      	ldrh	r3, [r3, #4]
 8004d88:	73bb      	strb	r3, [r7, #14]
  
  /* Check if it is a class request */
  if ((req->bmRequest & 0x60) == 0x20)
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d92:	2b20      	cmp	r3, #32
 8004d94:	d108      	bne.n	8004da8 <USBD_StdEPReq+0x32>
  {
    pdev->pClass->Setup (pdev, req);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	6839      	ldr	r1, [r7, #0]
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	4798      	blx	r3
    
    return USBD_OK;
 8004da4:	2300      	movs	r3, #0
 8004da6:	e0ba      	b.n	8004f1e <USBD_StdEPReq+0x1a8>
  }
  
  switch (req->bRequest) 
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	785b      	ldrb	r3, [r3, #1]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d039      	beq.n	8004e24 <USBD_StdEPReq+0xae>
 8004db0:	2b03      	cmp	r3, #3
 8004db2:	d002      	beq.n	8004dba <USBD_StdEPReq+0x44>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d06b      	beq.n	8004e90 <USBD_StdEPReq+0x11a>
      break;
    }
    break;
    
  default:
    break;
 8004db8:	e0b0      	b.n	8004f1c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d002      	beq.n	8004dca <USBD_StdEPReq+0x54>
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d00c      	beq.n	8004de2 <USBD_StdEPReq+0x6c>
 8004dc8:	e025      	b.n	8004e16 <USBD_StdEPReq+0xa0>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004dca:	7bbb      	ldrb	r3, [r7, #14]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d027      	beq.n	8004e20 <USBD_StdEPReq+0xaa>
 8004dd0:	7bbb      	ldrb	r3, [r7, #14]
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d024      	beq.n	8004e20 <USBD_StdEPReq+0xaa>
        USBD_LL_StallEP(pdev , ep_addr);
 8004dd6:	7bbb      	ldrb	r3, [r7, #14]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f002 fec4 	bl	8007b68 <USBD_LL_StallEP>
      break;	
 8004de0:	e01e      	b.n	8004e20 <USBD_StdEPReq+0xaa>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	885b      	ldrh	r3, [r3, #2]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10a      	bne.n	8004e00 <USBD_StdEPReq+0x8a>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004dea:	7bbb      	ldrb	r3, [r7, #14]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <USBD_StdEPReq+0x8a>
 8004df0:	7bbb      	ldrb	r3, [r7, #14]
 8004df2:	2b80      	cmp	r3, #128	; 0x80
 8004df4:	d004      	beq.n	8004e00 <USBD_StdEPReq+0x8a>
          USBD_LL_StallEP(pdev , ep_addr);
 8004df6:	7bbb      	ldrb	r3, [r7, #14]
 8004df8:	4619      	mov	r1, r3
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f002 feb4 	bl	8007b68 <USBD_LL_StallEP>
      pdev->pClass->Setup (pdev, req);   
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	6839      	ldr	r1, [r7, #0]
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fbea 	bl	80055e8 <USBD_CtlSendStatus>
      break;
 8004e14:	e005      	b.n	8004e22 <USBD_StdEPReq+0xac>
      USBD_CtlError(pdev , req);
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f000 fb1b 	bl	8005454 <USBD_CtlError>
      break;    
 8004e1e:	e000      	b.n	8004e22 <USBD_StdEPReq+0xac>
      break;	
 8004e20:	bf00      	nop
    break;
 8004e22:	e07b      	b.n	8004f1c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d002      	beq.n	8004e34 <USBD_StdEPReq+0xbe>
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d00c      	beq.n	8004e4c <USBD_StdEPReq+0xd6>
 8004e32:	e024      	b.n	8004e7e <USBD_StdEPReq+0x108>
      if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8004e34:	7bbb      	ldrb	r3, [r7, #14]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d026      	beq.n	8004e88 <USBD_StdEPReq+0x112>
 8004e3a:	7bbb      	ldrb	r3, [r7, #14]
 8004e3c:	2b80      	cmp	r3, #128	; 0x80
 8004e3e:	d023      	beq.n	8004e88 <USBD_StdEPReq+0x112>
        USBD_LL_StallEP(pdev , ep_addr);
 8004e40:	7bbb      	ldrb	r3, [r7, #14]
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f002 fe8f 	bl	8007b68 <USBD_LL_StallEP>
      break;	
 8004e4a:	e01d      	b.n	8004e88 <USBD_StdEPReq+0x112>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	885b      	ldrh	r3, [r3, #2]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d11b      	bne.n	8004e8c <USBD_StdEPReq+0x116>
        if ((ep_addr & 0x7F) != 0x00) 
 8004e54:	7bbb      	ldrb	r3, [r7, #14]
 8004e56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00b      	beq.n	8004e76 <USBD_StdEPReq+0x100>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8004e5e:	7bbb      	ldrb	r3, [r7, #14]
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f002 feb6 	bl	8007bd4 <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	6839      	ldr	r1, [r7, #0]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fbb6 	bl	80055e8 <USBD_CtlSendStatus>
      break;
 8004e7c:	e006      	b.n	8004e8c <USBD_StdEPReq+0x116>
      USBD_CtlError(pdev , req);
 8004e7e:	6839      	ldr	r1, [r7, #0]
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fae7 	bl	8005454 <USBD_CtlError>
      break;    
 8004e86:	e002      	b.n	8004e8e <USBD_StdEPReq+0x118>
      break;	
 8004e88:	bf00      	nop
 8004e8a:	e047      	b.n	8004f1c <USBD_StdEPReq+0x1a6>
      break;
 8004e8c:	bf00      	nop
    break;
 8004e8e:	e045      	b.n	8004f1c <USBD_StdEPReq+0x1a6>
    switch (pdev->dev_state) 
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d002      	beq.n	8004ea0 <USBD_StdEPReq+0x12a>
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d00b      	beq.n	8004eb6 <USBD_StdEPReq+0x140>
 8004e9e:	e036      	b.n	8004f0e <USBD_StdEPReq+0x198>
      if ((ep_addr & 0x7F) != 0x00) 
 8004ea0:	7bbb      	ldrb	r3, [r7, #14]
 8004ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d036      	beq.n	8004f18 <USBD_StdEPReq+0x1a2>
        USBD_LL_StallEP(pdev , ep_addr);
 8004eaa:	7bbb      	ldrb	r3, [r7, #14]
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f002 fe5a 	bl	8007b68 <USBD_LL_StallEP>
      break;	
 8004eb4:	e030      	b.n	8004f18 <USBD_StdEPReq+0x1a2>
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004eb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	da08      	bge.n	8004ed0 <USBD_StdEPReq+0x15a>
 8004ebe:	7bbb      	ldrb	r3, [r7, #14]
 8004ec0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	011b      	lsls	r3, r3, #4
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	4413      	add	r3, r2
 8004ecc:	3304      	adds	r3, #4
 8004ece:	e007      	b.n	8004ee0 <USBD_StdEPReq+0x16a>
                                         &pdev->ep_out[ep_addr & 0x7F];
 8004ed0:	7bbb      	ldrb	r3, [r7, #14]
 8004ed2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004ed6:	3310      	adds	r3, #16
 8004ed8:	011b      	lsls	r3, r3, #4
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	3304      	adds	r3, #4
 8004ee0:	60bb      	str	r3, [r7, #8]
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004ee2:	7bbb      	ldrb	r3, [r7, #14]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f002 feaa 	bl	8007c40 <USBD_LL_IsStallEP>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d003      	beq.n	8004efa <USBD_StdEPReq+0x184>
        pep->status = 0x0001;     
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	601a      	str	r2, [r3, #0]
 8004ef8:	e002      	b.n	8004f00 <USBD_StdEPReq+0x18a>
        pep->status = 0x0000;  
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]
                        (uint8_t *)&pep->status,
 8004f00:	68bb      	ldr	r3, [r7, #8]
      USBD_CtlSendData (pdev,
 8004f02:	2202      	movs	r2, #2
 8004f04:	4619      	mov	r1, r3
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 fb10 	bl	800552c <USBD_CtlSendData>
      break;
 8004f0c:	e005      	b.n	8004f1a <USBD_StdEPReq+0x1a4>
      USBD_CtlError(pdev , req);
 8004f0e:	6839      	ldr	r1, [r7, #0]
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 fa9f 	bl	8005454 <USBD_CtlError>
      break;
 8004f16:	e000      	b.n	8004f1a <USBD_StdEPReq+0x1a4>
      break;	
 8004f18:	bf00      	nop
    break;
 8004f1a:	bf00      	nop
  }
  return ret;
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev , 
                               USBD_SetupReqTypedef *req)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	885b      	ldrh	r3, [r3, #2]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	f200 80c9 	bhi.w	80050d4 <USBD_GetDescriptor+0x1ac>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <USBD_GetDescriptor+0x20>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f65 	.word	0x08004f65
 8004f4c:	08004f7d 	.word	0x08004f7d
 8004f50:	08004fbd 	.word	0x08004fbd
 8004f54:	080050d5 	.word	0x080050d5
 8004f58:	080050d5 	.word	0x080050d5
 8004f5c:	08005081 	.word	0x08005081
 8004f60:	080050a7 	.word	0x080050a7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif    
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	7c12      	ldrb	r2, [r2, #16]
 8004f70:	f107 010a 	add.w	r1, r7, #10
 8004f74:	4610      	mov	r0, r2
 8004f76:	4798      	blx	r3
 8004f78:	60f8      	str	r0, [r7, #12]
    break;
 8004f7a:	e0b0      	b.n	80050de <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	7c1b      	ldrb	r3, [r3, #16]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10d      	bne.n	8004fa0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8c:	f107 020a 	add.w	r2, r7, #10
 8004f90:	4610      	mov	r0, r2
 8004f92:	4798      	blx	r3
 8004f94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004f9e:	e09e      	b.n	80050de <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	f107 020a 	add.w	r2, r7, #10
 8004fac:	4610      	mov	r0, r2
 8004fae:	4798      	blx	r3
 8004fb0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	701a      	strb	r2, [r3, #0]
    break;
 8004fba:	e090      	b.n	80050de <USBD_GetDescriptor+0x1b6>
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	885b      	ldrh	r3, [r3, #2]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b05      	cmp	r3, #5
 8004fc4:	d856      	bhi.n	8005074 <USBD_GetDescriptor+0x14c>
 8004fc6:	a201      	add	r2, pc, #4	; (adr r2, 8004fcc <USBD_GetDescriptor+0xa4>)
 8004fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fcc:	08004fe5 	.word	0x08004fe5
 8004fd0:	08004ffd 	.word	0x08004ffd
 8004fd4:	08005015 	.word	0x08005015
 8004fd8:	0800502d 	.word	0x0800502d
 8004fdc:	08005045 	.word	0x08005045
 8004fe0:	0800505d 	.word	0x0800505d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	7c12      	ldrb	r2, [r2, #16]
 8004ff0:	f107 010a 	add.w	r1, r7, #10
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4798      	blx	r3
 8004ff8:	60f8      	str	r0, [r7, #12]
      break;
 8004ffa:	e040      	b.n	800507e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	7c12      	ldrb	r2, [r2, #16]
 8005008:	f107 010a 	add.w	r1, r7, #10
 800500c:	4610      	mov	r0, r2
 800500e:	4798      	blx	r3
 8005010:	60f8      	str	r0, [r7, #12]
      break;
 8005012:	e034      	b.n	800507e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	7c12      	ldrb	r2, [r2, #16]
 8005020:	f107 010a 	add.w	r1, r7, #10
 8005024:	4610      	mov	r0, r2
 8005026:	4798      	blx	r3
 8005028:	60f8      	str	r0, [r7, #12]
      break;
 800502a:	e028      	b.n	800507e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	7c12      	ldrb	r2, [r2, #16]
 8005038:	f107 010a 	add.w	r1, r7, #10
 800503c:	4610      	mov	r0, r2
 800503e:	4798      	blx	r3
 8005040:	60f8      	str	r0, [r7, #12]
      break;
 8005042:	e01c      	b.n	800507e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800504a:	695b      	ldr	r3, [r3, #20]
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	7c12      	ldrb	r2, [r2, #16]
 8005050:	f107 010a 	add.w	r1, r7, #10
 8005054:	4610      	mov	r0, r2
 8005056:	4798      	blx	r3
 8005058:	60f8      	str	r0, [r7, #12]
      break;
 800505a:	e010      	b.n	800507e <USBD_GetDescriptor+0x156>
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	7c12      	ldrb	r2, [r2, #16]
 8005068:	f107 010a 	add.w	r1, r7, #10
 800506c:	4610      	mov	r0, r2
 800506e:	4798      	blx	r3
 8005070:	60f8      	str	r0, [r7, #12]
      break;
 8005072:	e004      	b.n	800507e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else      
       USBD_CtlError(pdev , req);
 8005074:	6839      	ldr	r1, [r7, #0]
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 f9ec 	bl	8005454 <USBD_CtlError>
      return;
 800507c:	e044      	b.n	8005108 <USBD_GetDescriptor+0x1e0>
#endif   
    }
    break;
 800507e:	e02e      	b.n	80050de <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	7c1b      	ldrb	r3, [r3, #16]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d109      	bne.n	800509c <USBD_GetDescriptor+0x174>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800508e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005090:	f107 020a 	add.w	r2, r7, #10
 8005094:	4610      	mov	r0, r2
 8005096:	4798      	blx	r3
 8005098:	60f8      	str	r0, [r7, #12]
      break;
 800509a:	e020      	b.n	80050de <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f9d8 	bl	8005454 <USBD_CtlError>
      return;
 80050a4:	e030      	b.n	8005108 <USBD_GetDescriptor+0x1e0>
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	7c1b      	ldrb	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10d      	bne.n	80050ca <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	f107 020a 	add.w	r2, r7, #10
 80050ba:	4610      	mov	r0, r2
 80050bc:	4798      	blx	r3
 80050be:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	3301      	adds	r3, #1
 80050c4:	2207      	movs	r2, #7
 80050c6:	701a      	strb	r2, [r3, #0]
      break; 
 80050c8:	e009      	b.n	80050de <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80050ca:	6839      	ldr	r1, [r7, #0]
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f9c1 	bl	8005454 <USBD_CtlError>
      return;
 80050d2:	e019      	b.n	8005108 <USBD_GetDescriptor+0x1e0>
    }

  default: 
     USBD_CtlError(pdev , req);
 80050d4:	6839      	ldr	r1, [r7, #0]
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f000 f9bc 	bl	8005454 <USBD_CtlError>
    return;
 80050dc:	e014      	b.n	8005108 <USBD_GetDescriptor+0x1e0>
  }
  
  if((len != 0)&& (req->wLength != 0))
 80050de:	897b      	ldrh	r3, [r7, #10]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d011      	beq.n	8005108 <USBD_GetDescriptor+0x1e0>
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	88db      	ldrh	r3, [r3, #6]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00d      	beq.n	8005108 <USBD_GetDescriptor+0x1e0>
  {
    
    len = MIN(len , req->wLength);
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	88da      	ldrh	r2, [r3, #6]
 80050f0:	897b      	ldrh	r3, [r7, #10]
 80050f2:	4293      	cmp	r3, r2
 80050f4:	bf28      	it	cs
 80050f6:	4613      	movcs	r3, r2
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	817b      	strh	r3, [r7, #10]
    
    USBD_CtlSendData (pdev, 
 80050fc:	897b      	ldrh	r3, [r7, #10]
 80050fe:	461a      	mov	r2, r3
 8005100:	68f9      	ldr	r1, [r7, #12]
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 fa12 	bl	800552c <USBD_CtlSendData>
                      pbuf,
                      len);
  }
  
}
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop

08005110 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	889b      	ldrh	r3, [r3, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d12c      	bne.n	800517c <USBD_SetAddress+0x6c>
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	88db      	ldrh	r3, [r3, #6]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d128      	bne.n	800517c <USBD_SetAddress+0x6c>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	885b      	ldrh	r3, [r3, #2]
 800512e:	b2db      	uxtb	r3, r3
 8005130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005134:	73fb      	strb	r3, [r7, #15]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800513c:	2b03      	cmp	r3, #3
 800513e:	d104      	bne.n	800514a <USBD_SetAddress+0x3a>
    {
      USBD_CtlError(pdev , req);
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f986 	bl	8005454 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005148:	e01c      	b.n	8005184 <USBD_SetAddress+0x74>
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	7bfa      	ldrb	r2, [r7, #15]
 800514e:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8005152:	7bfb      	ldrb	r3, [r7, #15]
 8005154:	4619      	mov	r1, r3
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f002 fd9e 	bl	8007c98 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fa43 	bl	80055e8 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8005162:	7bfb      	ldrb	r3, [r7, #15]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d004      	beq.n	8005172 <USBD_SetAddress+0x62>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8005170:	e008      	b.n	8005184 <USBD_SetAddress+0x74>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2201      	movs	r2, #1
 8005176:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800517a:	e003      	b.n	8005184 <USBD_SetAddress+0x74>
      }
    }
  } 
  else 
  {
     USBD_CtlError(pdev , req);                        
 800517c:	6839      	ldr	r1, [r7, #0]
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f968 	bl	8005454 <USBD_CtlError>
  } 
}
 8005184:	bf00      	nop
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <USBD_SetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	885b      	ldrh	r3, [r3, #2]
 800519a:	b2da      	uxtb	r2, r3
 800519c:	4b3e      	ldr	r3, [pc, #248]	; (8005298 <USBD_SetConfig+0x10c>)
 800519e:	701a      	strb	r2, [r3, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80051a0:	4b3d      	ldr	r3, [pc, #244]	; (8005298 <USBD_SetConfig+0x10c>)
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d904      	bls.n	80051b2 <USBD_SetConfig+0x26>
  {            
     USBD_CtlError(pdev , req);                              
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f952 	bl	8005454 <USBD_CtlError>
 80051b0:	e06f      	b.n	8005292 <USBD_SetConfig+0x106>
  } 
  else 
  {
    switch (pdev->dev_state) 
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d002      	beq.n	80051c2 <USBD_SetConfig+0x36>
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d023      	beq.n	8005208 <USBD_SetConfig+0x7c>
 80051c0:	e062      	b.n	8005288 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80051c2:	4b35      	ldr	r3, [pc, #212]	; (8005298 <USBD_SetConfig+0x10c>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d01a      	beq.n	8005200 <USBD_SetConfig+0x74>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80051ca:	4b33      	ldr	r3, [pc, #204]	; (8005298 <USBD_SetConfig+0x10c>)
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2203      	movs	r2, #3
 80051d8:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80051dc:	4b2e      	ldr	r3, [pc, #184]	; (8005298 <USBD_SetConfig+0x10c>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fb23 	bl	800482e <USBD_SetClassConfig>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d104      	bne.n	80051f8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev , req);  
 80051ee:	6839      	ldr	r1, [r7, #0]
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f92f 	bl	8005454 <USBD_CtlError>
          return;
 80051f6:	e04c      	b.n	8005292 <USBD_SetConfig+0x106>
        }
        USBD_CtlSendStatus(pdev);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f9f5 	bl	80055e8 <USBD_CtlSendStatus>
      }
      else 
      {
         USBD_CtlSendStatus(pdev);
      }
      break;
 80051fe:	e048      	b.n	8005292 <USBD_SetConfig+0x106>
         USBD_CtlSendStatus(pdev);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f9f1 	bl	80055e8 <USBD_CtlSendStatus>
      break;
 8005206:	e044      	b.n	8005292 <USBD_SetConfig+0x106>
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 8005208:	4b23      	ldr	r3, [pc, #140]	; (8005298 <USBD_SetConfig+0x10c>)
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d112      	bne.n	8005236 <USBD_SetConfig+0xaa>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 21fc 	strb.w	r2, [r3, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8005218:	4b1f      	ldr	r3, [pc, #124]	; (8005298 <USBD_SetConfig+0x10c>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	461a      	mov	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8005222:	4b1d      	ldr	r3, [pc, #116]	; (8005298 <USBD_SetConfig+0x10c>)
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f7ff fb1f 	bl	800486c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f9da 	bl	80055e8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005234:	e02d      	b.n	8005292 <USBD_SetConfig+0x106>
      else  if (cfgidx != pdev->dev_config) 
 8005236:	4b18      	ldr	r3, [pc, #96]	; (8005298 <USBD_SetConfig+0x10c>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	461a      	mov	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d01d      	beq.n	8005280 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	b2db      	uxtb	r3, r3
 800524a:	4619      	mov	r1, r3
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff fb0d 	bl	800486c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005252:	4b11      	ldr	r3, [pc, #68]	; (8005298 <USBD_SetConfig+0x10c>)
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	461a      	mov	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800525c:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <USBD_SetConfig+0x10c>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7ff fae3 	bl	800482e <USBD_SetClassConfig>
 8005268:	4603      	mov	r3, r0
 800526a:	2b02      	cmp	r3, #2
 800526c:	d104      	bne.n	8005278 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev , req);  
 800526e:	6839      	ldr	r1, [r7, #0]
 8005270:	6878      	ldr	r0, [r7, #4]
 8005272:	f000 f8ef 	bl	8005454 <USBD_CtlError>
          return;
 8005276:	e00c      	b.n	8005292 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f9b5 	bl	80055e8 <USBD_CtlSendStatus>
      break;
 800527e:	e008      	b.n	8005292 <USBD_SetConfig+0x106>
        USBD_CtlSendStatus(pdev);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f9b1 	bl	80055e8 <USBD_CtlSendStatus>
      break;
 8005286:	e004      	b.n	8005292 <USBD_SetConfig+0x106>
      
    default:					
       USBD_CtlError(pdev , req);                     
 8005288:	6839      	ldr	r1, [r7, #0]
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f8e2 	bl	8005454 <USBD_CtlError>
      break;
 8005290:	bf00      	nop
    }
  }
}
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	200001e1 	.word	0x200001e1

0800529c <USBD_GetConfig>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]

  if (req->wLength != 1) 
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	88db      	ldrh	r3, [r3, #6]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d004      	beq.n	80052b8 <USBD_GetConfig+0x1c>
  {                   
     USBD_CtlError(pdev , req);
 80052ae:	6839      	ldr	r1, [r7, #0]
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f8cf 	bl	8005454 <USBD_CtlError>
    default:
       USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80052b6:	e01f      	b.n	80052f8 <USBD_GetConfig+0x5c>
    switch (pdev->dev_state )  
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d002      	beq.n	80052c8 <USBD_GetConfig+0x2c>
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d00b      	beq.n	80052de <USBD_GetConfig+0x42>
 80052c6:	e012      	b.n	80052ee <USBD_GetConfig+0x52>
      pdev->dev_default_config = 0;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	609a      	str	r2, [r3, #8]
                        (uint8_t *)&pdev->dev_default_config,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3308      	adds	r3, #8
      USBD_CtlSendData (pdev, 
 80052d2:	2201      	movs	r2, #1
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 f928 	bl	800552c <USBD_CtlSendData>
      break;
 80052dc:	e00c      	b.n	80052f8 <USBD_GetConfig+0x5c>
                        (uint8_t *)&pdev->dev_config,
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3304      	adds	r3, #4
      USBD_CtlSendData (pdev, 
 80052e2:	2201      	movs	r2, #1
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f920 	bl	800552c <USBD_CtlSendData>
      break;
 80052ec:	e004      	b.n	80052f8 <USBD_GetConfig+0x5c>
       USBD_CtlError(pdev , req);
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f8af 	bl	8005454 <USBD_CtlError>
      break;
 80052f6:	bf00      	nop
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <USBD_GetStatus>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  
    
  switch (pdev->dev_state) 
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 8005310:	3b02      	subs	r3, #2
 8005312:	2b01      	cmp	r3, #1
 8005314:	d815      	bhi.n	8005342 <USBD_GetStatus+0x42>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005322:	2b00      	cmp	r3, #0
 8005324:	d005      	beq.n	8005332 <USBD_GetStatus+0x32>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	f043 0202 	orr.w	r2, r3, #2
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	60da      	str	r2, [r3, #12]
    }
    
    USBD_CtlSendData (pdev, 
                      (uint8_t *)& pdev->dev_config_status,
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	330c      	adds	r3, #12
    USBD_CtlSendData (pdev, 
 8005336:	2202      	movs	r2, #2
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f8f6 	bl	800552c <USBD_CtlSendData>
                      2);
    break;
 8005340:	e004      	b.n	800534c <USBD_GetStatus+0x4c>
    
  default :
    USBD_CtlError(pdev , req);                        
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f885 	bl	8005454 <USBD_CtlError>
    break;
 800534a:	bf00      	nop
  }
}
 800534c:	bf00      	nop
 800534e:	3708      	adds	r7, #8
 8005350:	46bd      	mov	sp, r7
 8005352:	bd80      	pop	{r7, pc}

08005354 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	885b      	ldrh	r3, [r3, #2]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d10d      	bne.n	8005382 <USBD_SetFeature+0x2e>
  {
    pdev->dev_remote_wakeup = 1;  
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    pdev->pClass->Setup (pdev, req);   
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	4798      	blx	r3
    USBD_CtlSendStatus(pdev);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f000 f933 	bl	80055e8 <USBD_CtlSendStatus>
  }

}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 800539a:	3b02      	subs	r3, #2
 800539c:	2b01      	cmp	r3, #1
 800539e:	d812      	bhi.n	80053c6 <USBD_ClrFeature+0x3c>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	885b      	ldrh	r3, [r3, #2]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d113      	bne.n	80053d0 <USBD_ClrFeature+0x46>
    {
      pdev->dev_remote_wakeup = 0; 
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f912 	bl	80055e8 <USBD_CtlSendStatus>
    }
    break;
 80053c4:	e004      	b.n	80053d0 <USBD_ClrFeature+0x46>
    
  default :
     USBD_CtlError(pdev , req);
 80053c6:	6839      	ldr	r1, [r7, #0]
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f843 	bl	8005454 <USBD_CtlError>
    break;
 80053ce:	e000      	b.n	80053d2 <USBD_ClrFeature+0x48>
    break;
 80053d0:	bf00      	nop
  }
}
 80053d2:	bf00      	nop
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
 80053e2:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	781a      	ldrb	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	785a      	ldrb	r2, [r3, #1]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	3302      	adds	r3, #2
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	3303      	adds	r3, #3
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	b29b      	uxth	r3, r3
 8005404:	021b      	lsls	r3, r3, #8
 8005406:	b29b      	uxth	r3, r3
 8005408:	4413      	add	r3, r2
 800540a:	b29a      	uxth	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	3304      	adds	r3, #4
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	b29a      	uxth	r2, r3
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	3305      	adds	r3, #5
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	b29b      	uxth	r3, r3
 8005420:	021b      	lsls	r3, r3, #8
 8005422:	b29b      	uxth	r3, r3
 8005424:	4413      	add	r3, r2
 8005426:	b29a      	uxth	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	3306      	adds	r3, #6
 8005430:	781b      	ldrb	r3, [r3, #0]
 8005432:	b29a      	uxth	r2, r3
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	3307      	adds	r3, #7
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	b29b      	uxth	r3, r3
 800543c:	021b      	lsls	r3, r3, #8
 800543e:	b29b      	uxth	r3, r3
 8005440:	4413      	add	r3, r2
 8005442:	b29a      	uxth	r2, r3
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	80da      	strh	r2, [r3, #6]

}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80);
 800545e:	2180      	movs	r1, #128	; 0x80
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f002 fb81 	bl	8007b68 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8005466:	2100      	movs	r1, #0
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f002 fb7d 	bl	8007b68 <USBD_LL_StallEP>
}
 800546e:	bf00      	nop
 8005470:	3708      	adds	r7, #8
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}

08005476 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	b086      	sub	sp, #24
 800547a:	af00      	add	r7, sp, #0
 800547c:	60f8      	str	r0, [r7, #12]
 800547e:	60b9      	str	r1, [r7, #8]
 8005480:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0;
 8005482:	2300      	movs	r3, #0
 8005484:	75fb      	strb	r3, [r7, #23]
  
  if (desc != NULL) 
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d033      	beq.n	80054f4 <USBD_GetString+0x7e>
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	f000 f835 	bl	80054fc <USBD_GetLen>
 8005492:	4603      	mov	r3, r0
 8005494:	3301      	adds	r3, #1
 8005496:	b29b      	uxth	r3, r3
 8005498:	005b      	lsls	r3, r3, #1
 800549a:	b29a      	uxth	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *len;
 80054a0:	7dfb      	ldrb	r3, [r7, #23]
 80054a2:	1c5a      	adds	r2, r3, #1
 80054a4:	75fa      	strb	r2, [r7, #23]
 80054a6:	461a      	mov	r2, r3
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	4413      	add	r3, r2
 80054ac:	687a      	ldr	r2, [r7, #4]
 80054ae:	8812      	ldrh	r2, [r2, #0]
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80054b4:	7dfb      	ldrb	r3, [r7, #23]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	75fa      	strb	r2, [r7, #23]
 80054ba:	461a      	mov	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4413      	add	r3, r2
 80054c0:	2203      	movs	r2, #3
 80054c2:	701a      	strb	r2, [r3, #0]
    
    while (*desc != '\0') 
 80054c4:	e012      	b.n	80054ec <USBD_GetString+0x76>
    {
      unicode[idx++] = *desc++;
 80054c6:	7dfb      	ldrb	r3, [r7, #23]
 80054c8:	1c5a      	adds	r2, r3, #1
 80054ca:	75fa      	strb	r2, [r7, #23]
 80054cc:	461a      	mov	r2, r3
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	441a      	add	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	1c59      	adds	r1, r3, #1
 80054d6:	60f9      	str	r1, [r7, #12]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0x00;
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	1c5a      	adds	r2, r3, #1
 80054e0:	75fa      	strb	r2, [r7, #23]
 80054e2:	461a      	mov	r2, r3
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	4413      	add	r3, r2
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0') 
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e8      	bne.n	80054c6 <USBD_GetString+0x50>
    }
  } 
}
 80054f4:	bf00      	nop
 80054f6:	3718      	adds	r7, #24
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0') 
 8005508:	e005      	b.n	8005516 <USBD_GetLen+0x1a>
    {
        len++;
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	3301      	adds	r3, #1
 800550e:	73fb      	strb	r3, [r7, #15]
        buf++;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3301      	adds	r3, #1
 8005514:	607b      	str	r3, [r7, #4]
    while (*buf != '\0') 
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1f5      	bne.n	800550a <USBD_GetLen+0xe>
    }

    return len;
 800551e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2202      	movs	r2, #2
 800553e:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 8005542:	88fa      	ldrh	r2, [r7, #6]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length   = len;
 8005548:	88fa      	ldrh	r2, [r7, #6]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	61da      	str	r2, [r3, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800554e:	88fb      	ldrh	r3, [r7, #6]
 8005550:	68ba      	ldr	r2, [r7, #8]
 8005552:	2100      	movs	r1, #0
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f002 fbd5 	bl	8007d04 <USBD_LL_Transmit>
  
  return USBD_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	4613      	mov	r3, r2
 8005570:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 8005572:	88fb      	ldrh	r3, [r7, #6]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	2100      	movs	r1, #0
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f002 fbc3 	bl	8007d04 <USBD_LL_Transmit>
  
  return USBD_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	4613      	mov	r3, r2
 8005594:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2203      	movs	r2, #3
 800559a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	68ba      	ldr	r2, [r7, #8]
 80055b2:	2100      	movs	r1, #0
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f002 fbdf 	bl	8007d78 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	80fb      	strh	r3, [r7, #6]

  USBD_LL_PrepareReceive (pdev,
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	2100      	movs	r1, #0
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f002 fbcd 	bl	8007d78 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2204      	movs	r2, #4
 80055f4:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80055f8:	2300      	movs	r3, #0
 80055fa:	2200      	movs	r2, #0
 80055fc:	2100      	movs	r1, #0
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f002 fb80 	bl	8007d04 <USBD_LL_Transmit>
  
  return USBD_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2205      	movs	r2, #5
 800561a:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 800561e:	2300      	movs	r3, #0
 8005620:	2200      	movs	r2, #0
 8005622:	2100      	movs	r1, #0
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f002 fba7 	bl	8007d78 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	4603      	mov	r3, r0
 800563c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800563e:	2300      	movs	r3, #0
 8005640:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005642:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005646:	2b84      	cmp	r3, #132	; 0x84
 8005648:	d005      	beq.n	8005656 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800564a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	4413      	add	r3, r2
 8005652:	3303      	adds	r3, #3
 8005654:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005656:	68fb      	ldr	r3, [r7, #12]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005668:	f000 fe08 	bl	800627c <vTaskStartScheduler>
  
  return osOK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	bd80      	pop	{r7, pc}

08005672 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005674:	b087      	sub	sp, #28
 8005676:	af02      	add	r7, sp, #8
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685c      	ldr	r4, [r3, #4]
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005688:	b29e      	uxth	r6, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005690:	4618      	mov	r0, r3
 8005692:	f7ff ffcf 	bl	8005634 <makeFreeRtosPriority>
 8005696:	4602      	mov	r2, r0
 8005698:	f107 030c 	add.w	r3, r7, #12
 800569c:	9301      	str	r3, [sp, #4]
 800569e:	9200      	str	r2, [sp, #0]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	4632      	mov	r2, r6
 80056a4:	4629      	mov	r1, r5
 80056a6:	4620      	mov	r0, r4
 80056a8:	f000 fc8a 	bl	8005fc0 <xTaskCreate>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d001      	beq.n	80056b6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e000      	b.n	80056b8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80056b6:	68fb      	ldr	r3, [r7, #12]
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3714      	adds	r7, #20
 80056bc:	46bd      	mov	sp, r7
 80056be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056c0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d001      	beq.n	80056d6 <osDelay+0x16>
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	e000      	b.n	80056d8 <osDelay+0x18>
 80056d6:	2301      	movs	r3, #1
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fd9b 	bl	8006214 <vTaskDelay>
  
  return osOK;
 80056de:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80056ec:	f001 f896 	bl	800681c <xTaskGetSchedulerState>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d001      	beq.n	80056fa <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80056f6:	f000 fa47 	bl	8005b88 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80056fa:	bf00      	nop
 80056fc:	bd80      	pop	{r7, pc}

080056fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f103 0208 	add.w	r2, r3, #8
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f04f 32ff 	mov.w	r2, #4294967295
 8005716:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f103 0208 	add.w	r2, r3, #8
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f103 0208 	add.w	r2, r3, #8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	68fa      	ldr	r2, [r7, #12]
 800576c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d103      	bne.n	80057c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	e00c      	b.n	80057da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	3308      	adds	r3, #8
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e002      	b.n	80057ce <vListInsert+0x2e>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	681a      	ldr	r2, [r3, #0]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d9f6      	bls.n	80057c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	685a      	ldr	r2, [r3, #4]
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	1c5a      	adds	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	601a      	str	r2, [r3, #0]
}
 8005806:	bf00      	nop
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005812:	b480      	push	{r7}
 8005814:	b085      	sub	sp, #20
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6892      	ldr	r2, [r2, #8]
 8005828:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6852      	ldr	r2, [r2, #4]
 8005832:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d103      	bne.n	8005846 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	1e5a      	subs	r2, r3, #1
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
}
 800585a:	4618      	mov	r0, r3
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	3b04      	subs	r3, #4
 8005878:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005880:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3b04      	subs	r3, #4
 8005886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f023 0201 	bic.w	r2, r3, #1
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3b04      	subs	r3, #4
 8005896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005898:	4a0c      	ldr	r2, [pc, #48]	; (80058cc <pxPortInitialiseStack+0x64>)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3b14      	subs	r3, #20
 80058a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	3b04      	subs	r3, #4
 80058ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f06f 0202 	mvn.w	r2, #2
 80058b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	3b20      	subs	r3, #32
 80058bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058be:	68fb      	ldr	r3, [r7, #12]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3714      	adds	r7, #20
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	080058d1 	.word	0x080058d1

080058d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058d6:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <prvTaskExitError+0x38>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058de:	d009      	beq.n	80058f4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	607b      	str	r3, [r7, #4]
 80058f2:	e7fe      	b.n	80058f2 <prvTaskExitError+0x22>
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8005906:	e7fe      	b.n	8005906 <prvTaskExitError+0x36>
 8005908:	20000114 	.word	0x20000114
 800590c:	00000000 	.word	0x00000000

08005910 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <pxCurrentTCBConst2>)
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	6808      	ldr	r0, [r1, #0]
 8005916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591a:	f380 8809 	msr	PSP, r0
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f380 8811 	msr	BASEPRI, r0
 800592a:	4770      	bx	lr
 800592c:	f3af 8000 	nop.w

08005930 <pxCurrentTCBConst2>:
 8005930:	20003e00 	.word	0x20003e00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005938:	4806      	ldr	r0, [pc, #24]	; (8005954 <prvPortStartFirstTask+0x1c>)
 800593a:	6800      	ldr	r0, [r0, #0]
 800593c:	6800      	ldr	r0, [r0, #0]
 800593e:	f380 8808 	msr	MSP, r0
 8005942:	b662      	cpsie	i
 8005944:	b661      	cpsie	f
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	df00      	svc	0
 8005950:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005952:	bf00      	nop
 8005954:	e000ed08 	.word	0xe000ed08

08005958 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800595e:	4b3b      	ldr	r3, [pc, #236]	; (8005a4c <xPortStartScheduler+0xf4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a3b      	ldr	r2, [pc, #236]	; (8005a50 <xPortStartScheduler+0xf8>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d109      	bne.n	800597c <xPortStartScheduler+0x24>
 8005968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	e7fe      	b.n	800597a <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800597c:	4b33      	ldr	r3, [pc, #204]	; (8005a4c <xPortStartScheduler+0xf4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a34      	ldr	r2, [pc, #208]	; (8005a54 <xPortStartScheduler+0xfc>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d109      	bne.n	800599a <xPortStartScheduler+0x42>
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	60fb      	str	r3, [r7, #12]
 8005998:	e7fe      	b.n	8005998 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800599a:	4b2f      	ldr	r3, [pc, #188]	; (8005a58 <xPortStartScheduler+0x100>)
 800599c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	22ff      	movs	r2, #255	; 0xff
 80059aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059b4:	79fb      	ldrb	r3, [r7, #7]
 80059b6:	b2db      	uxtb	r3, r3
 80059b8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	4b27      	ldr	r3, [pc, #156]	; (8005a5c <xPortStartScheduler+0x104>)
 80059c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059c2:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <xPortStartScheduler+0x108>)
 80059c4:	2207      	movs	r2, #7
 80059c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059c8:	e009      	b.n	80059de <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80059ca:	4b25      	ldr	r3, [pc, #148]	; (8005a60 <xPortStartScheduler+0x108>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <xPortStartScheduler+0x108>)
 80059d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059d4:	79fb      	ldrb	r3, [r7, #7]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e6:	2b80      	cmp	r3, #128	; 0x80
 80059e8:	d0ef      	beq.n	80059ca <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059ea:	4b1d      	ldr	r3, [pc, #116]	; (8005a60 <xPortStartScheduler+0x108>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	4a1b      	ldr	r2, [pc, #108]	; (8005a60 <xPortStartScheduler+0x108>)
 80059f2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059f4:	4b1a      	ldr	r3, [pc, #104]	; (8005a60 <xPortStartScheduler+0x108>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059fc:	4a18      	ldr	r2, [pc, #96]	; (8005a60 <xPortStartScheduler+0x108>)
 80059fe:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a08:	4a16      	ldr	r2, [pc, #88]	; (8005a64 <xPortStartScheduler+0x10c>)
 8005a0a:	4b16      	ldr	r3, [pc, #88]	; (8005a64 <xPortStartScheduler+0x10c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a12:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a14:	4a13      	ldr	r2, [pc, #76]	; (8005a64 <xPortStartScheduler+0x10c>)
 8005a16:	4b13      	ldr	r3, [pc, #76]	; (8005a64 <xPortStartScheduler+0x10c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a1e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a20:	f000 f8d2 	bl	8005bc8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a24:	4b10      	ldr	r3, [pc, #64]	; (8005a68 <xPortStartScheduler+0x110>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a2a:	f000 f8e9 	bl	8005c00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a2e:	4a0f      	ldr	r2, [pc, #60]	; (8005a6c <xPortStartScheduler+0x114>)
 8005a30:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <xPortStartScheduler+0x114>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a38:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a3a:	f7ff ff7d 	bl	8005938 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8005a3e:	f7ff ff47 	bl	80058d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a42:	2300      	movs	r3, #0
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	e000ed00 	.word	0xe000ed00
 8005a50:	410fc271 	.word	0x410fc271
 8005a54:	410fc270 	.word	0x410fc270
 8005a58:	e000e400 	.word	0xe000e400
 8005a5c:	200001e2 	.word	0x200001e2
 8005a60:	200001e4 	.word	0x200001e4
 8005a64:	e000ed20 	.word	0xe000ed20
 8005a68:	20000114 	.word	0x20000114
 8005a6c:	e000ef34 	.word	0xe000ef34

08005a70 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a88:	4b0e      	ldr	r3, [pc, #56]	; (8005ac4 <vPortEnterCritical+0x54>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	4a0d      	ldr	r2, [pc, #52]	; (8005ac4 <vPortEnterCritical+0x54>)
 8005a90:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a92:	4b0c      	ldr	r3, [pc, #48]	; (8005ac4 <vPortEnterCritical+0x54>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d10e      	bne.n	8005ab8 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ac8 <vPortEnterCritical+0x58>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d009      	beq.n	8005ab8 <vPortEnterCritical+0x48>
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	603b      	str	r3, [r7, #0]
 8005ab6:	e7fe      	b.n	8005ab6 <vPortEnterCritical+0x46>
	}
}
 8005ab8:	bf00      	nop
 8005aba:	370c      	adds	r7, #12
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr
 8005ac4:	20000114 	.word	0x20000114
 8005ac8:	e000ed04 	.word	0xe000ed04

08005acc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005ad2:	4b11      	ldr	r3, [pc, #68]	; (8005b18 <vPortExitCritical+0x4c>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <vPortExitCritical+0x22>
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	607b      	str	r3, [r7, #4]
 8005aec:	e7fe      	b.n	8005aec <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005aee:	4b0a      	ldr	r3, [pc, #40]	; (8005b18 <vPortExitCritical+0x4c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3b01      	subs	r3, #1
 8005af4:	4a08      	ldr	r2, [pc, #32]	; (8005b18 <vPortExitCritical+0x4c>)
 8005af6:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005af8:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <vPortExitCritical+0x4c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d104      	bne.n	8005b0a <vPortExitCritical+0x3e>
 8005b00:	2300      	movs	r3, #0
 8005b02:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b0a:	bf00      	nop
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000114 	.word	0x20000114
 8005b1c:	00000000 	.word	0x00000000

08005b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b20:	f3ef 8009 	mrs	r0, PSP
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <pxCurrentTCBConst>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	f01e 0f10 	tst.w	lr, #16
 8005b30:	bf08      	it	eq
 8005b32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3a:	6010      	str	r0, [r2, #0]
 8005b3c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8005b40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b44:	f380 8811 	msr	BASEPRI, r0
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	f3bf 8f6f 	isb	sy
 8005b50:	f000 fd40 	bl	80065d4 <vTaskSwitchContext>
 8005b54:	f04f 0000 	mov.w	r0, #0
 8005b58:	f380 8811 	msr	BASEPRI, r0
 8005b5c:	bc08      	pop	{r3}
 8005b5e:	6819      	ldr	r1, [r3, #0]
 8005b60:	6808      	ldr	r0, [r1, #0]
 8005b62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b66:	f01e 0f10 	tst.w	lr, #16
 8005b6a:	bf08      	it	eq
 8005b6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b70:	f380 8809 	msr	PSP, r0
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	f3af 8000 	nop.w

08005b80 <pxCurrentTCBConst>:
 8005b80:	20003e00 	.word	0x20003e00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b84:	bf00      	nop
 8005b86:	bf00      	nop

08005b88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ba0:	f000 fc5c 	bl	800645c <xTaskIncrementTick>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005baa:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <xPortSysTickHandler+0x3c>)
 8005bac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb0:	601a      	str	r2, [r3, #0]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005bbc:	bf00      	nop
 8005bbe:	3708      	adds	r7, #8
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bcc:	4a08      	ldr	r2, [pc, #32]	; (8005bf0 <vPortSetupTimerInterrupt+0x28>)
 8005bce:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <vPortSetupTimerInterrupt+0x2c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4909      	ldr	r1, [pc, #36]	; (8005bf8 <vPortSetupTimerInterrupt+0x30>)
 8005bd4:	fba1 1303 	umull	r1, r3, r1, r3
 8005bd8:	099b      	lsrs	r3, r3, #6
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bde:	4b07      	ldr	r3, [pc, #28]	; (8005bfc <vPortSetupTimerInterrupt+0x34>)
 8005be0:	2207      	movs	r2, #7
 8005be2:	601a      	str	r2, [r3, #0]
}
 8005be4:	bf00      	nop
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	e000e014 	.word	0xe000e014
 8005bf4:	20000118 	.word	0x20000118
 8005bf8:	10624dd3 	.word	0x10624dd3
 8005bfc:	e000e010 	.word	0xe000e010

08005c00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c10 <vPortEnableVFP+0x10>
 8005c04:	6801      	ldr	r1, [r0, #0]
 8005c06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c0a:	6001      	str	r1, [r0, #0]
 8005c0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c0e:	bf00      	nop
 8005c10:	e000ed88 	.word	0xe000ed88

08005c14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c20:	f000 fb72 	bl	8006308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c24:	4b57      	ldr	r3, [pc, #348]	; (8005d84 <pvPortMalloc+0x170>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c2c:	f000 f90c 	bl	8005e48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c30:	4b55      	ldr	r3, [pc, #340]	; (8005d88 <pvPortMalloc+0x174>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4013      	ands	r3, r2
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	f040 808c 	bne.w	8005d56 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d01c      	beq.n	8005c7e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005c44:	2208      	movs	r2, #8
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4413      	add	r3, r2
 8005c4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f003 0307 	and.w	r3, r3, #7
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d013      	beq.n	8005c7e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f023 0307 	bic.w	r3, r3, #7
 8005c5c:	3308      	adds	r3, #8
 8005c5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f003 0307 	and.w	r3, r3, #7
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d009      	beq.n	8005c7e <pvPortMalloc+0x6a>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	e7fe      	b.n	8005c7c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d068      	beq.n	8005d56 <pvPortMalloc+0x142>
 8005c84:	4b41      	ldr	r3, [pc, #260]	; (8005d8c <pvPortMalloc+0x178>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d863      	bhi.n	8005d56 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c8e:	4b40      	ldr	r3, [pc, #256]	; (8005d90 <pvPortMalloc+0x17c>)
 8005c90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c92:	4b3f      	ldr	r3, [pc, #252]	; (8005d90 <pvPortMalloc+0x17c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c98:	e004      	b.n	8005ca4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	685a      	ldr	r2, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d203      	bcs.n	8005cb6 <pvPortMalloc+0xa2>
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f1      	bne.n	8005c9a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cb6:	4b33      	ldr	r3, [pc, #204]	; (8005d84 <pvPortMalloc+0x170>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d04a      	beq.n	8005d56 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	4413      	add	r3, r2
 8005cc8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	6a3b      	ldr	r3, [r7, #32]
 8005cd0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cd4:	685a      	ldr	r2, [r3, #4]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	1ad2      	subs	r2, r2, r3
 8005cda:	2308      	movs	r3, #8
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d91e      	bls.n	8005d20 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d009      	beq.n	8005d08 <pvPortMalloc+0xf4>
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	e7fe      	b.n	8005d06 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	69bb      	ldr	r3, [r7, #24]
 8005d12:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d1a:	69b8      	ldr	r0, [r7, #24]
 8005d1c:	f000 f8f6 	bl	8005f0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d20:	4b1a      	ldr	r3, [pc, #104]	; (8005d8c <pvPortMalloc+0x178>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	4a18      	ldr	r2, [pc, #96]	; (8005d8c <pvPortMalloc+0x178>)
 8005d2c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d2e:	4b17      	ldr	r3, [pc, #92]	; (8005d8c <pvPortMalloc+0x178>)
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	4b18      	ldr	r3, [pc, #96]	; (8005d94 <pvPortMalloc+0x180>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d203      	bcs.n	8005d42 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d3a:	4b14      	ldr	r3, [pc, #80]	; (8005d8c <pvPortMalloc+0x178>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a15      	ldr	r2, [pc, #84]	; (8005d94 <pvPortMalloc+0x180>)
 8005d40:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <pvPortMalloc+0x174>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d52:	2200      	movs	r2, #0
 8005d54:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005d56:	f000 fae5 	bl	8006324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f003 0307 	and.w	r3, r3, #7
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d009      	beq.n	8005d78 <pvPortMalloc+0x164>
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	e7fe      	b.n	8005d76 <pvPortMalloc+0x162>
	return pvReturn;
 8005d78:	69fb      	ldr	r3, [r7, #28]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3728      	adds	r7, #40	; 0x28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20003df0 	.word	0x20003df0
 8005d88:	20003dfc 	.word	0x20003dfc
 8005d8c:	20003df4 	.word	0x20003df4
 8005d90:	20003de8 	.word	0x20003de8
 8005d94:	20003df8 	.word	0x20003df8

08005d98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b086      	sub	sp, #24
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d046      	beq.n	8005e38 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005daa:	2308      	movs	r3, #8
 8005dac:	425b      	negs	r3, r3
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4413      	add	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	4b20      	ldr	r3, [pc, #128]	; (8005e40 <vPortFree+0xa8>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d109      	bne.n	8005dda <vPortFree+0x42>
 8005dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e7fe      	b.n	8005dd8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <vPortFree+0x5e>
 8005de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de6:	f383 8811 	msr	BASEPRI, r3
 8005dea:	f3bf 8f6f 	isb	sy
 8005dee:	f3bf 8f4f 	dsb	sy
 8005df2:	60bb      	str	r3, [r7, #8]
 8005df4:	e7fe      	b.n	8005df4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	685a      	ldr	r2, [r3, #4]
 8005dfa:	4b11      	ldr	r3, [pc, #68]	; (8005e40 <vPortFree+0xa8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4013      	ands	r3, r2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d019      	beq.n	8005e38 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d115      	bne.n	8005e38 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	4b0b      	ldr	r3, [pc, #44]	; (8005e40 <vPortFree+0xa8>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	43db      	mvns	r3, r3
 8005e16:	401a      	ands	r2, r3
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e1c:	f000 fa74 	bl	8006308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	4b07      	ldr	r3, [pc, #28]	; (8005e44 <vPortFree+0xac>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4413      	add	r3, r2
 8005e2a:	4a06      	ldr	r2, [pc, #24]	; (8005e44 <vPortFree+0xac>)
 8005e2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e2e:	6938      	ldr	r0, [r7, #16]
 8005e30:	f000 f86c 	bl	8005f0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005e34:	f000 fa76 	bl	8006324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e38:	bf00      	nop
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	20003dfc 	.word	0x20003dfc
 8005e44:	20003df4 	.word	0x20003df4

08005e48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005e4e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005e52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e54:	4b27      	ldr	r3, [pc, #156]	; (8005ef4 <prvHeapInit+0xac>)
 8005e56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00c      	beq.n	8005e7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3307      	adds	r3, #7
 8005e66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 0307 	bic.w	r3, r3, #7
 8005e6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	4a1f      	ldr	r2, [pc, #124]	; (8005ef4 <prvHeapInit+0xac>)
 8005e78:	4413      	add	r3, r2
 8005e7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e80:	4a1d      	ldr	r2, [pc, #116]	; (8005ef8 <prvHeapInit+0xb0>)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e86:	4b1c      	ldr	r3, [pc, #112]	; (8005ef8 <prvHeapInit+0xb0>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4413      	add	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e94:	2208      	movs	r2, #8
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	1a9b      	subs	r3, r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f023 0307 	bic.w	r3, r3, #7
 8005ea2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a15      	ldr	r2, [pc, #84]	; (8005efc <prvHeapInit+0xb4>)
 8005ea8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005eaa:	4b14      	ldr	r3, [pc, #80]	; (8005efc <prvHeapInit+0xb4>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005eb2:	4b12      	ldr	r3, [pc, #72]	; (8005efc <prvHeapInit+0xb4>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	1ad2      	subs	r2, r2, r3
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <prvHeapInit+0xb4>)
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	4a0a      	ldr	r2, [pc, #40]	; (8005f00 <prvHeapInit+0xb8>)
 8005ed6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	4a09      	ldr	r2, [pc, #36]	; (8005f04 <prvHeapInit+0xbc>)
 8005ede:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005ee0:	4b09      	ldr	r3, [pc, #36]	; (8005f08 <prvHeapInit+0xc0>)
 8005ee2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ee6:	601a      	str	r2, [r3, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	200001e8 	.word	0x200001e8
 8005ef8:	20003de8 	.word	0x20003de8
 8005efc:	20003df0 	.word	0x20003df0
 8005f00:	20003df8 	.word	0x20003df8
 8005f04:	20003df4 	.word	0x20003df4
 8005f08:	20003dfc 	.word	0x20003dfc

08005f0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f14:	4b28      	ldr	r3, [pc, #160]	; (8005fb8 <prvInsertBlockIntoFreeList+0xac>)
 8005f16:	60fb      	str	r3, [r7, #12]
 8005f18:	e002      	b.n	8005f20 <prvInsertBlockIntoFreeList+0x14>
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d3f7      	bcc.n	8005f1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	68ba      	ldr	r2, [r7, #8]
 8005f34:	441a      	add	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d108      	bne.n	8005f4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	441a      	add	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	68ba      	ldr	r2, [r7, #8]
 8005f58:	441a      	add	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d118      	bne.n	8005f94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4b15      	ldr	r3, [pc, #84]	; (8005fbc <prvInsertBlockIntoFreeList+0xb0>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d00d      	beq.n	8005f8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	441a      	add	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e008      	b.n	8005f9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f8a:	4b0c      	ldr	r3, [pc, #48]	; (8005fbc <prvInsertBlockIntoFreeList+0xb0>)
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	e003      	b.n	8005f9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d002      	beq.n	8005faa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005faa:	bf00      	nop
 8005fac:	3714      	adds	r7, #20
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	20003de8 	.word	0x20003de8
 8005fbc:	20003df0 	.word	0x20003df0

08005fc0 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b08c      	sub	sp, #48	; 0x30
 8005fc4:	af04      	add	r7, sp, #16
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd0:	88fb      	ldrh	r3, [r7, #6]
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff fe1d 	bl	8005c14 <pvPortMalloc>
 8005fda:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00e      	beq.n	8006000 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005fe2:	2054      	movs	r0, #84	; 0x54
 8005fe4:	f7ff fe16 	bl	8005c14 <pvPortMalloc>
 8005fe8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d003      	beq.n	8005ff8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff6:	e005      	b.n	8006004 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ff8:	6978      	ldr	r0, [r7, #20]
 8005ffa:	f7ff fecd 	bl	8005d98 <vPortFree>
 8005ffe:	e001      	b.n	8006004 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006000:	2300      	movs	r3, #0
 8006002:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d013      	beq.n	8006032 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	2300      	movs	r3, #0
 800600e:	9303      	str	r3, [sp, #12]
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	9302      	str	r3, [sp, #8]
 8006014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 f80e 	bl	8006042 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006026:	69f8      	ldr	r0, [r7, #28]
 8006028:	f000 f88a 	bl	8006140 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800602c:	2301      	movs	r3, #1
 800602e:	61bb      	str	r3, [r7, #24]
 8006030:	e002      	b.n	8006038 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006032:	f04f 33ff 	mov.w	r3, #4294967295
 8006036:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006038:	69bb      	ldr	r3, [r7, #24]
	}
 800603a:	4618      	mov	r0, r3
 800603c:	3720      	adds	r7, #32
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b088      	sub	sp, #32
 8006046:	af00      	add	r7, sp, #0
 8006048:	60f8      	str	r0, [r7, #12]
 800604a:	60b9      	str	r1, [r7, #8]
 800604c:	607a      	str	r2, [r7, #4]
 800604e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800605a:	3b01      	subs	r3, #1
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	f023 0307 	bic.w	r3, r3, #7
 8006068:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	2b00      	cmp	r3, #0
 8006072:	d009      	beq.n	8006088 <prvInitialiseNewTask+0x46>
 8006074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	617b      	str	r3, [r7, #20]
 8006086:	e7fe      	b.n	8006086 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006088:	2300      	movs	r3, #0
 800608a:	61fb      	str	r3, [r7, #28]
 800608c:	e012      	b.n	80060b4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	4413      	add	r3, r2
 8006094:	7819      	ldrb	r1, [r3, #0]
 8006096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	3334      	adds	r3, #52	; 0x34
 800609e:	460a      	mov	r2, r1
 80060a0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	4413      	add	r3, r2
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d006      	beq.n	80060bc <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	3301      	adds	r3, #1
 80060b2:	61fb      	str	r3, [r7, #28]
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	2b0f      	cmp	r3, #15
 80060b8:	d9e9      	bls.n	800608e <prvInitialiseNewTask+0x4c>
 80060ba:	e000      	b.n	80060be <prvInitialiseNewTask+0x7c>
		{
			break;
 80060bc:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	2b06      	cmp	r3, #6
 80060ca:	d901      	bls.n	80060d0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060cc:	2306      	movs	r3, #6
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060da:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80060dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060de:	2200      	movs	r2, #0
 80060e0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	3304      	adds	r3, #4
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7ff fb29 	bl	800573e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	3318      	adds	r3, #24
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff fb24 	bl	800573e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	f1c3 0207 	rsb	r2, r3, #7
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800610c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610e:	2200      	movs	r2, #0
 8006110:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	68f9      	ldr	r1, [r7, #12]
 800611e:	69b8      	ldr	r0, [r7, #24]
 8006120:	f7ff fba2 	bl	8005868 <pxPortInitialiseStack>
 8006124:	4602      	mov	r2, r0
 8006126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006128:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d002      	beq.n	8006136 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006132:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006134:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006136:	bf00      	nop
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
	...

08006140 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006148:	f7ff fc92 	bl	8005a70 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800614c:	4b2a      	ldr	r3, [pc, #168]	; (80061f8 <prvAddNewTaskToReadyList+0xb8>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3301      	adds	r3, #1
 8006152:	4a29      	ldr	r2, [pc, #164]	; (80061f8 <prvAddNewTaskToReadyList+0xb8>)
 8006154:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006156:	4b29      	ldr	r3, [pc, #164]	; (80061fc <prvAddNewTaskToReadyList+0xbc>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d109      	bne.n	8006172 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800615e:	4a27      	ldr	r2, [pc, #156]	; (80061fc <prvAddNewTaskToReadyList+0xbc>)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006164:	4b24      	ldr	r3, [pc, #144]	; (80061f8 <prvAddNewTaskToReadyList+0xb8>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d110      	bne.n	800618e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800616c:	f000 faa4 	bl	80066b8 <prvInitialiseTaskLists>
 8006170:	e00d      	b.n	800618e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006172:	4b23      	ldr	r3, [pc, #140]	; (8006200 <prvAddNewTaskToReadyList+0xc0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d109      	bne.n	800618e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800617a:	4b20      	ldr	r3, [pc, #128]	; (80061fc <prvAddNewTaskToReadyList+0xbc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	429a      	cmp	r2, r3
 8006186:	d802      	bhi.n	800618e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006188:	4a1c      	ldr	r2, [pc, #112]	; (80061fc <prvAddNewTaskToReadyList+0xbc>)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800618e:	4b1d      	ldr	r3, [pc, #116]	; (8006204 <prvAddNewTaskToReadyList+0xc4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3301      	adds	r3, #1
 8006194:	4a1b      	ldr	r2, [pc, #108]	; (8006204 <prvAddNewTaskToReadyList+0xc4>)
 8006196:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619c:	2201      	movs	r2, #1
 800619e:	409a      	lsls	r2, r3
 80061a0:	4b19      	ldr	r3, [pc, #100]	; (8006208 <prvAddNewTaskToReadyList+0xc8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4313      	orrs	r3, r2
 80061a6:	4a18      	ldr	r2, [pc, #96]	; (8006208 <prvAddNewTaskToReadyList+0xc8>)
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ae:	4613      	mov	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4413      	add	r3, r2
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	4a15      	ldr	r2, [pc, #84]	; (800620c <prvAddNewTaskToReadyList+0xcc>)
 80061b8:	441a      	add	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	3304      	adds	r3, #4
 80061be:	4619      	mov	r1, r3
 80061c0:	4610      	mov	r0, r2
 80061c2:	f7ff fac9 	bl	8005758 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061c6:	f7ff fc81 	bl	8005acc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061ca:	4b0d      	ldr	r3, [pc, #52]	; (8006200 <prvAddNewTaskToReadyList+0xc0>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00e      	beq.n	80061f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061d2:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <prvAddNewTaskToReadyList+0xbc>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061dc:	429a      	cmp	r2, r3
 80061de:	d207      	bcs.n	80061f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061e0:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <prvAddNewTaskToReadyList+0xd0>)
 80061e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20003f00 	.word	0x20003f00
 80061fc:	20003e00 	.word	0x20003e00
 8006200:	20003f0c 	.word	0x20003f0c
 8006204:	20003f1c 	.word	0x20003f1c
 8006208:	20003f08 	.word	0x20003f08
 800620c:	20003e04 	.word	0x20003e04
 8006210:	e000ed04 	.word	0xe000ed04

08006214 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d016      	beq.n	8006254 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006226:	4b13      	ldr	r3, [pc, #76]	; (8006274 <vTaskDelay+0x60>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d009      	beq.n	8006242 <vTaskDelay+0x2e>
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	60bb      	str	r3, [r7, #8]
 8006240:	e7fe      	b.n	8006240 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006242:	f000 f861 	bl	8006308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006246:	2100      	movs	r1, #0
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fb05 	bl	8006858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800624e:	f000 f869 	bl	8006324 <xTaskResumeAll>
 8006252:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d107      	bne.n	800626a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800625a:	4b07      	ldr	r3, [pc, #28]	; (8006278 <vTaskDelay+0x64>)
 800625c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	f3bf 8f4f 	dsb	sy
 8006266:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800626a:	bf00      	nop
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20003f28 	.word	0x20003f28
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006282:	4b1b      	ldr	r3, [pc, #108]	; (80062f0 <vTaskStartScheduler+0x74>)
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	2300      	movs	r3, #0
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	2300      	movs	r3, #0
 800628c:	2280      	movs	r2, #128	; 0x80
 800628e:	4919      	ldr	r1, [pc, #100]	; (80062f4 <vTaskStartScheduler+0x78>)
 8006290:	4819      	ldr	r0, [pc, #100]	; (80062f8 <vTaskStartScheduler+0x7c>)
 8006292:	f7ff fe95 	bl	8005fc0 <xTaskCreate>
 8006296:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d115      	bne.n	80062ca <vTaskStartScheduler+0x4e>
 800629e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a2:	f383 8811 	msr	BASEPRI, r3
 80062a6:	f3bf 8f6f 	isb	sy
 80062aa:	f3bf 8f4f 	dsb	sy
 80062ae:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062b0:	4b12      	ldr	r3, [pc, #72]	; (80062fc <vTaskStartScheduler+0x80>)
 80062b2:	f04f 32ff 	mov.w	r2, #4294967295
 80062b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062b8:	4b11      	ldr	r3, [pc, #68]	; (8006300 <vTaskStartScheduler+0x84>)
 80062ba:	2201      	movs	r2, #1
 80062bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80062be:	4b11      	ldr	r3, [pc, #68]	; (8006304 <vTaskStartScheduler+0x88>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062c4:	f7ff fb48 	bl	8005958 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062c8:	e00d      	b.n	80062e6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d109      	bne.n	80062e6 <vTaskStartScheduler+0x6a>
 80062d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	607b      	str	r3, [r7, #4]
 80062e4:	e7fe      	b.n	80062e4 <vTaskStartScheduler+0x68>
}
 80062e6:	bf00      	nop
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20003f24 	.word	0x20003f24
 80062f4:	080081e0 	.word	0x080081e0
 80062f8:	08006689 	.word	0x08006689
 80062fc:	20003f20 	.word	0x20003f20
 8006300:	20003f0c 	.word	0x20003f0c
 8006304:	20003f04 	.word	0x20003f04

08006308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006308:	b480      	push	{r7}
 800630a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800630c:	4b04      	ldr	r3, [pc, #16]	; (8006320 <vTaskSuspendAll+0x18>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3301      	adds	r3, #1
 8006312:	4a03      	ldr	r2, [pc, #12]	; (8006320 <vTaskSuspendAll+0x18>)
 8006314:	6013      	str	r3, [r2, #0]
}
 8006316:	bf00      	nop
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr
 8006320:	20003f28 	.word	0x20003f28

08006324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800632e:	2300      	movs	r3, #0
 8006330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006332:	4b41      	ldr	r3, [pc, #260]	; (8006438 <xTaskResumeAll+0x114>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d109      	bne.n	800634e <xTaskResumeAll+0x2a>
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	e7fe      	b.n	800634c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800634e:	f7ff fb8f 	bl	8005a70 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006352:	4b39      	ldr	r3, [pc, #228]	; (8006438 <xTaskResumeAll+0x114>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3b01      	subs	r3, #1
 8006358:	4a37      	ldr	r2, [pc, #220]	; (8006438 <xTaskResumeAll+0x114>)
 800635a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800635c:	4b36      	ldr	r3, [pc, #216]	; (8006438 <xTaskResumeAll+0x114>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d161      	bne.n	8006428 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006364:	4b35      	ldr	r3, [pc, #212]	; (800643c <xTaskResumeAll+0x118>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d05d      	beq.n	8006428 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800636c:	e02e      	b.n	80063cc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800636e:	4b34      	ldr	r3, [pc, #208]	; (8006440 <xTaskResumeAll+0x11c>)
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3318      	adds	r3, #24
 800637a:	4618      	mov	r0, r3
 800637c:	f7ff fa49 	bl	8005812 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	3304      	adds	r3, #4
 8006384:	4618      	mov	r0, r3
 8006386:	f7ff fa44 	bl	8005812 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638e:	2201      	movs	r2, #1
 8006390:	409a      	lsls	r2, r3
 8006392:	4b2c      	ldr	r3, [pc, #176]	; (8006444 <xTaskResumeAll+0x120>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4313      	orrs	r3, r2
 8006398:	4a2a      	ldr	r2, [pc, #168]	; (8006444 <xTaskResumeAll+0x120>)
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	4a27      	ldr	r2, [pc, #156]	; (8006448 <xTaskResumeAll+0x124>)
 80063aa:	441a      	add	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3304      	adds	r3, #4
 80063b0:	4619      	mov	r1, r3
 80063b2:	4610      	mov	r0, r2
 80063b4:	f7ff f9d0 	bl	8005758 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063bc:	4b23      	ldr	r3, [pc, #140]	; (800644c <xTaskResumeAll+0x128>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d302      	bcc.n	80063cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80063c6:	4b22      	ldr	r3, [pc, #136]	; (8006450 <xTaskResumeAll+0x12c>)
 80063c8:	2201      	movs	r2, #1
 80063ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063cc:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <xTaskResumeAll+0x11c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d1cc      	bne.n	800636e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d001      	beq.n	80063de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063da:	f000 f9f9 	bl	80067d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063de:	4b1d      	ldr	r3, [pc, #116]	; (8006454 <xTaskResumeAll+0x130>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d010      	beq.n	800640c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063ea:	f000 f837 	bl	800645c <xTaskIncrementTick>
 80063ee:	4603      	mov	r3, r0
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80063f4:	4b16      	ldr	r3, [pc, #88]	; (8006450 <xTaskResumeAll+0x12c>)
 80063f6:	2201      	movs	r2, #1
 80063f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	3b01      	subs	r3, #1
 80063fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1f1      	bne.n	80063ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006406:	4b13      	ldr	r3, [pc, #76]	; (8006454 <xTaskResumeAll+0x130>)
 8006408:	2200      	movs	r2, #0
 800640a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800640c:	4b10      	ldr	r3, [pc, #64]	; (8006450 <xTaskResumeAll+0x12c>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d009      	beq.n	8006428 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006414:	2301      	movs	r3, #1
 8006416:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006418:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <xTaskResumeAll+0x134>)
 800641a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006428:	f7ff fb50 	bl	8005acc <vPortExitCritical>

	return xAlreadyYielded;
 800642c:	68bb      	ldr	r3, [r7, #8]
}
 800642e:	4618      	mov	r0, r3
 8006430:	3710      	adds	r7, #16
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20003f28 	.word	0x20003f28
 800643c:	20003f00 	.word	0x20003f00
 8006440:	20003ec0 	.word	0x20003ec0
 8006444:	20003f08 	.word	0x20003f08
 8006448:	20003e04 	.word	0x20003e04
 800644c:	20003e00 	.word	0x20003e00
 8006450:	20003f14 	.word	0x20003f14
 8006454:	20003f10 	.word	0x20003f10
 8006458:	e000ed04 	.word	0xe000ed04

0800645c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006466:	4b50      	ldr	r3, [pc, #320]	; (80065a8 <xTaskIncrementTick+0x14c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f040 808c 	bne.w	8006588 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8006470:	4b4e      	ldr	r3, [pc, #312]	; (80065ac <xTaskIncrementTick+0x150>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3301      	adds	r3, #1
 8006476:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006478:	4a4c      	ldr	r2, [pc, #304]	; (80065ac <xTaskIncrementTick+0x150>)
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11f      	bne.n	80064c4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006484:	4b4a      	ldr	r3, [pc, #296]	; (80065b0 <xTaskIncrementTick+0x154>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d009      	beq.n	80064a2 <xTaskIncrementTick+0x46>
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	603b      	str	r3, [r7, #0]
 80064a0:	e7fe      	b.n	80064a0 <xTaskIncrementTick+0x44>
 80064a2:	4b43      	ldr	r3, [pc, #268]	; (80065b0 <xTaskIncrementTick+0x154>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	60fb      	str	r3, [r7, #12]
 80064a8:	4b42      	ldr	r3, [pc, #264]	; (80065b4 <xTaskIncrementTick+0x158>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a40      	ldr	r2, [pc, #256]	; (80065b0 <xTaskIncrementTick+0x154>)
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	4a40      	ldr	r2, [pc, #256]	; (80065b4 <xTaskIncrementTick+0x158>)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6013      	str	r3, [r2, #0]
 80064b6:	4b40      	ldr	r3, [pc, #256]	; (80065b8 <xTaskIncrementTick+0x15c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3301      	adds	r3, #1
 80064bc:	4a3e      	ldr	r2, [pc, #248]	; (80065b8 <xTaskIncrementTick+0x15c>)
 80064be:	6013      	str	r3, [r2, #0]
 80064c0:	f000 f986 	bl	80067d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064c4:	4b3d      	ldr	r3, [pc, #244]	; (80065bc <xTaskIncrementTick+0x160>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	693a      	ldr	r2, [r7, #16]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d34d      	bcc.n	800656a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064ce:	4b38      	ldr	r3, [pc, #224]	; (80065b0 <xTaskIncrementTick+0x154>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d101      	bne.n	80064dc <xTaskIncrementTick+0x80>
 80064d8:	2301      	movs	r3, #1
 80064da:	e000      	b.n	80064de <xTaskIncrementTick+0x82>
 80064dc:	2300      	movs	r3, #0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064e2:	4b36      	ldr	r3, [pc, #216]	; (80065bc <xTaskIncrementTick+0x160>)
 80064e4:	f04f 32ff 	mov.w	r2, #4294967295
 80064e8:	601a      	str	r2, [r3, #0]
					break;
 80064ea:	e03e      	b.n	800656a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064ec:	4b30      	ldr	r3, [pc, #192]	; (80065b0 <xTaskIncrementTick+0x154>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68db      	ldr	r3, [r3, #12]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	429a      	cmp	r2, r3
 8006502:	d203      	bcs.n	800650c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006504:	4a2d      	ldr	r2, [pc, #180]	; (80065bc <xTaskIncrementTick+0x160>)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6013      	str	r3, [r2, #0]
						break;
 800650a:	e02e      	b.n	800656a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	3304      	adds	r3, #4
 8006510:	4618      	mov	r0, r3
 8006512:	f7ff f97e 	bl	8005812 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800651a:	2b00      	cmp	r3, #0
 800651c:	d004      	beq.n	8006528 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	3318      	adds	r3, #24
 8006522:	4618      	mov	r0, r3
 8006524:	f7ff f975 	bl	8005812 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800652c:	2201      	movs	r2, #1
 800652e:	409a      	lsls	r2, r3
 8006530:	4b23      	ldr	r3, [pc, #140]	; (80065c0 <xTaskIncrementTick+0x164>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4313      	orrs	r3, r2
 8006536:	4a22      	ldr	r2, [pc, #136]	; (80065c0 <xTaskIncrementTick+0x164>)
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653e:	4613      	mov	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	4a1f      	ldr	r2, [pc, #124]	; (80065c4 <xTaskIncrementTick+0x168>)
 8006548:	441a      	add	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	3304      	adds	r3, #4
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f7ff f901 	bl	8005758 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800655a:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <xTaskIncrementTick+0x16c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	429a      	cmp	r2, r3
 8006562:	d3b4      	bcc.n	80064ce <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006564:	2301      	movs	r3, #1
 8006566:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006568:	e7b1      	b.n	80064ce <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800656a:	4b17      	ldr	r3, [pc, #92]	; (80065c8 <xTaskIncrementTick+0x16c>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006570:	4914      	ldr	r1, [pc, #80]	; (80065c4 <xTaskIncrementTick+0x168>)
 8006572:	4613      	mov	r3, r2
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	440b      	add	r3, r1
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d907      	bls.n	8006592 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8006582:	2301      	movs	r3, #1
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	e004      	b.n	8006592 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006588:	4b10      	ldr	r3, [pc, #64]	; (80065cc <xTaskIncrementTick+0x170>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	4a0f      	ldr	r2, [pc, #60]	; (80065cc <xTaskIncrementTick+0x170>)
 8006590:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006592:	4b0f      	ldr	r3, [pc, #60]	; (80065d0 <xTaskIncrementTick+0x174>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d001      	beq.n	800659e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800659a:	2301      	movs	r3, #1
 800659c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800659e:	697b      	ldr	r3, [r7, #20]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20003f28 	.word	0x20003f28
 80065ac:	20003f04 	.word	0x20003f04
 80065b0:	20003eb8 	.word	0x20003eb8
 80065b4:	20003ebc 	.word	0x20003ebc
 80065b8:	20003f18 	.word	0x20003f18
 80065bc:	20003f20 	.word	0x20003f20
 80065c0:	20003f08 	.word	0x20003f08
 80065c4:	20003e04 	.word	0x20003e04
 80065c8:	20003e00 	.word	0x20003e00
 80065cc:	20003f10 	.word	0x20003f10
 80065d0:	20003f14 	.word	0x20003f14

080065d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065da:	4b26      	ldr	r3, [pc, #152]	; (8006674 <vTaskSwitchContext+0xa0>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d003      	beq.n	80065ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065e2:	4b25      	ldr	r3, [pc, #148]	; (8006678 <vTaskSwitchContext+0xa4>)
 80065e4:	2201      	movs	r2, #1
 80065e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065e8:	e03e      	b.n	8006668 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80065ea:	4b23      	ldr	r3, [pc, #140]	; (8006678 <vTaskSwitchContext+0xa4>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065f0:	4b22      	ldr	r3, [pc, #136]	; (800667c <vTaskSwitchContext+0xa8>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	fab3 f383 	clz	r3, r3
 80065fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065fe:	7afb      	ldrb	r3, [r7, #11]
 8006600:	f1c3 031f 	rsb	r3, r3, #31
 8006604:	617b      	str	r3, [r7, #20]
 8006606:	491e      	ldr	r1, [pc, #120]	; (8006680 <vTaskSwitchContext+0xac>)
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	4613      	mov	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	440b      	add	r3, r1
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <vTaskSwitchContext+0x5a>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	607b      	str	r3, [r7, #4]
 800662c:	e7fe      	b.n	800662c <vTaskSwitchContext+0x58>
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4a11      	ldr	r2, [pc, #68]	; (8006680 <vTaskSwitchContext+0xac>)
 800663a:	4413      	add	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	605a      	str	r2, [r3, #4]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	3308      	adds	r3, #8
 8006650:	429a      	cmp	r2, r3
 8006652:	d104      	bne.n	800665e <vTaskSwitchContext+0x8a>
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	605a      	str	r2, [r3, #4]
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4a07      	ldr	r2, [pc, #28]	; (8006684 <vTaskSwitchContext+0xb0>)
 8006666:	6013      	str	r3, [r2, #0]
}
 8006668:	bf00      	nop
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	20003f28 	.word	0x20003f28
 8006678:	20003f14 	.word	0x20003f14
 800667c:	20003f08 	.word	0x20003f08
 8006680:	20003e04 	.word	0x20003e04
 8006684:	20003e00 	.word	0x20003e00

08006688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006690:	f000 f852 	bl	8006738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006694:	4b06      	ldr	r3, [pc, #24]	; (80066b0 <prvIdleTask+0x28>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b01      	cmp	r3, #1
 800669a:	d9f9      	bls.n	8006690 <prvIdleTask+0x8>
			{
				taskYIELD();
 800669c:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <prvIdleTask+0x2c>)
 800669e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066a2:	601a      	str	r2, [r3, #0]
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066ac:	e7f0      	b.n	8006690 <prvIdleTask+0x8>
 80066ae:	bf00      	nop
 80066b0:	20003e04 	.word	0x20003e04
 80066b4:	e000ed04 	.word	0xe000ed04

080066b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066be:	2300      	movs	r3, #0
 80066c0:	607b      	str	r3, [r7, #4]
 80066c2:	e00c      	b.n	80066de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066c4:	687a      	ldr	r2, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4a12      	ldr	r2, [pc, #72]	; (8006718 <prvInitialiseTaskLists+0x60>)
 80066d0:	4413      	add	r3, r2
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff f813 	bl	80056fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3301      	adds	r3, #1
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b06      	cmp	r3, #6
 80066e2:	d9ef      	bls.n	80066c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066e4:	480d      	ldr	r0, [pc, #52]	; (800671c <prvInitialiseTaskLists+0x64>)
 80066e6:	f7ff f80a 	bl	80056fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066ea:	480d      	ldr	r0, [pc, #52]	; (8006720 <prvInitialiseTaskLists+0x68>)
 80066ec:	f7ff f807 	bl	80056fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066f0:	480c      	ldr	r0, [pc, #48]	; (8006724 <prvInitialiseTaskLists+0x6c>)
 80066f2:	f7ff f804 	bl	80056fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066f6:	480c      	ldr	r0, [pc, #48]	; (8006728 <prvInitialiseTaskLists+0x70>)
 80066f8:	f7ff f801 	bl	80056fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066fc:	480b      	ldr	r0, [pc, #44]	; (800672c <prvInitialiseTaskLists+0x74>)
 80066fe:	f7fe fffe 	bl	80056fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006702:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <prvInitialiseTaskLists+0x78>)
 8006704:	4a05      	ldr	r2, [pc, #20]	; (800671c <prvInitialiseTaskLists+0x64>)
 8006706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006708:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <prvInitialiseTaskLists+0x7c>)
 800670a:	4a05      	ldr	r2, [pc, #20]	; (8006720 <prvInitialiseTaskLists+0x68>)
 800670c:	601a      	str	r2, [r3, #0]
}
 800670e:	bf00      	nop
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20003e04 	.word	0x20003e04
 800671c:	20003e90 	.word	0x20003e90
 8006720:	20003ea4 	.word	0x20003ea4
 8006724:	20003ec0 	.word	0x20003ec0
 8006728:	20003ed4 	.word	0x20003ed4
 800672c:	20003eec 	.word	0x20003eec
 8006730:	20003eb8 	.word	0x20003eb8
 8006734:	20003ebc 	.word	0x20003ebc

08006738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800673e:	e028      	b.n	8006792 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8006740:	f7ff fde2 	bl	8006308 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006744:	4b17      	ldr	r3, [pc, #92]	; (80067a4 <prvCheckTasksWaitingTermination+0x6c>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	bf0c      	ite	eq
 800674c:	2301      	moveq	r3, #1
 800674e:	2300      	movne	r3, #0
 8006750:	b2db      	uxtb	r3, r3
 8006752:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8006754:	f7ff fde6 	bl	8006324 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d119      	bne.n	8006792 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 800675e:	f7ff f987 	bl	8005a70 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006762:	4b10      	ldr	r3, [pc, #64]	; (80067a4 <prvCheckTasksWaitingTermination+0x6c>)
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	3304      	adds	r3, #4
 800676e:	4618      	mov	r0, r3
 8006770:	f7ff f84f 	bl	8005812 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006774:	4b0c      	ldr	r3, [pc, #48]	; (80067a8 <prvCheckTasksWaitingTermination+0x70>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3b01      	subs	r3, #1
 800677a:	4a0b      	ldr	r2, [pc, #44]	; (80067a8 <prvCheckTasksWaitingTermination+0x70>)
 800677c:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 800677e:	4b0b      	ldr	r3, [pc, #44]	; (80067ac <prvCheckTasksWaitingTermination+0x74>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	3b01      	subs	r3, #1
 8006784:	4a09      	ldr	r2, [pc, #36]	; (80067ac <prvCheckTasksWaitingTermination+0x74>)
 8006786:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8006788:	f7ff f9a0 	bl	8005acc <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 800678c:	6838      	ldr	r0, [r7, #0]
 800678e:	f000 f80f 	bl	80067b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006792:	4b06      	ldr	r3, [pc, #24]	; (80067ac <prvCheckTasksWaitingTermination+0x74>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1d2      	bne.n	8006740 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800679a:	bf00      	nop
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20003ed4 	.word	0x20003ed4
 80067a8:	20003f00 	.word	0x20003f00
 80067ac:	20003ee8 	.word	0x20003ee8

080067b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067bc:	4618      	mov	r0, r3
 80067be:	f7ff faeb 	bl	8005d98 <vPortFree>
			vPortFree( pxTCB );
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff fae8 	bl	8005d98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067c8:	bf00      	nop
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067d6:	4b0f      	ldr	r3, [pc, #60]	; (8006814 <prvResetNextTaskUnblockTime+0x44>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <prvResetNextTaskUnblockTime+0x14>
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <prvResetNextTaskUnblockTime+0x16>
 80067e4:	2300      	movs	r3, #0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d004      	beq.n	80067f4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067ea:	4b0b      	ldr	r3, [pc, #44]	; (8006818 <prvResetNextTaskUnblockTime+0x48>)
 80067ec:	f04f 32ff 	mov.w	r2, #4294967295
 80067f0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067f2:	e008      	b.n	8006806 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067f4:	4b07      	ldr	r3, [pc, #28]	; (8006814 <prvResetNextTaskUnblockTime+0x44>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	4a05      	ldr	r2, [pc, #20]	; (8006818 <prvResetNextTaskUnblockTime+0x48>)
 8006804:	6013      	str	r3, [r2, #0]
}
 8006806:	bf00      	nop
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	20003eb8 	.word	0x20003eb8
 8006818:	20003f20 	.word	0x20003f20

0800681c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006822:	4b0b      	ldr	r3, [pc, #44]	; (8006850 <xTaskGetSchedulerState+0x34>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d102      	bne.n	8006830 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800682a:	2301      	movs	r3, #1
 800682c:	607b      	str	r3, [r7, #4]
 800682e:	e008      	b.n	8006842 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006830:	4b08      	ldr	r3, [pc, #32]	; (8006854 <xTaskGetSchedulerState+0x38>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d102      	bne.n	800683e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006838:	2302      	movs	r3, #2
 800683a:	607b      	str	r3, [r7, #4]
 800683c:	e001      	b.n	8006842 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800683e:	2300      	movs	r3, #0
 8006840:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006842:	687b      	ldr	r3, [r7, #4]
	}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	20003f0c 	.word	0x20003f0c
 8006854:	20003f28 	.word	0x20003f28

08006858 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006862:	4b29      	ldr	r3, [pc, #164]	; (8006908 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006868:	4b28      	ldr	r3, [pc, #160]	; (800690c <prvAddCurrentTaskToDelayedList+0xb4>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3304      	adds	r3, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe ffcf 	bl	8005812 <uxListRemove>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10b      	bne.n	8006892 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800687a:	4b24      	ldr	r3, [pc, #144]	; (800690c <prvAddCurrentTaskToDelayedList+0xb4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006880:	2201      	movs	r2, #1
 8006882:	fa02 f303 	lsl.w	r3, r2, r3
 8006886:	43da      	mvns	r2, r3
 8006888:	4b21      	ldr	r3, [pc, #132]	; (8006910 <prvAddCurrentTaskToDelayedList+0xb8>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4013      	ands	r3, r2
 800688e:	4a20      	ldr	r2, [pc, #128]	; (8006910 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006890:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006898:	d10a      	bne.n	80068b0 <prvAddCurrentTaskToDelayedList+0x58>
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d007      	beq.n	80068b0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068a0:	4b1a      	ldr	r3, [pc, #104]	; (800690c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3304      	adds	r3, #4
 80068a6:	4619      	mov	r1, r3
 80068a8:	481a      	ldr	r0, [pc, #104]	; (8006914 <prvAddCurrentTaskToDelayedList+0xbc>)
 80068aa:	f7fe ff55 	bl	8005758 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068ae:	e026      	b.n	80068fe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068b0:	68fa      	ldr	r2, [r7, #12]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4413      	add	r3, r2
 80068b6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068b8:	4b14      	ldr	r3, [pc, #80]	; (800690c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68ba      	ldr	r2, [r7, #8]
 80068be:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d209      	bcs.n	80068dc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068c8:	4b13      	ldr	r3, [pc, #76]	; (8006918 <prvAddCurrentTaskToDelayedList+0xc0>)
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	4b0f      	ldr	r3, [pc, #60]	; (800690c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f7fe ff63 	bl	80057a0 <vListInsert>
}
 80068da:	e010      	b.n	80068fe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068dc:	4b0f      	ldr	r3, [pc, #60]	; (800691c <prvAddCurrentTaskToDelayedList+0xc4>)
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	4b0a      	ldr	r3, [pc, #40]	; (800690c <prvAddCurrentTaskToDelayedList+0xb4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3304      	adds	r3, #4
 80068e6:	4619      	mov	r1, r3
 80068e8:	4610      	mov	r0, r2
 80068ea:	f7fe ff59 	bl	80057a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068ee:	4b0c      	ldr	r3, [pc, #48]	; (8006920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d202      	bcs.n	80068fe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80068f8:	4a09      	ldr	r2, [pc, #36]	; (8006920 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6013      	str	r3, [r2, #0]
}
 80068fe:	bf00      	nop
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	20003f04 	.word	0x20003f04
 800690c:	20003e00 	.word	0x20003e00
 8006910:	20003f08 	.word	0x20003f08
 8006914:	20003eec 	.word	0x20003eec
 8006918:	20003ebc 	.word	0x20003ebc
 800691c:	20003eb8 	.word	0x20003eb8
 8006920:	20003f20 	.word	0x20003f20

08006924 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8006924:	b5b0      	push	{r4, r5, r7, lr}
 8006926:	b086      	sub	sp, #24
 8006928:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800692a:	f7f9 fde1 	bl	80004f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800692e:	f000 f81d 	bl	800696c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006932:	f000 f89b 	bl	8006a6c <MX_GPIO_Init>
  MX_SPI1_Init();
 8006936:	f000 f891 	bl	8006a5c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  nRF24_GPIO_Init();
 800693a:	f000 fc77 	bl	800722c <nRF24_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800693e:	4b09      	ldr	r3, [pc, #36]	; (8006964 <main+0x40>)
 8006940:	1d3c      	adds	r4, r7, #4
 8006942:	461d      	mov	r5, r3
 8006944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006948:	682b      	ldr	r3, [r5, #0]
 800694a:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800694c:	1d3b      	adds	r3, r7, #4
 800694e:	2100      	movs	r1, #0
 8006950:	4618      	mov	r0, r3
 8006952:	f7fe fe8e 	bl	8005672 <osThreadCreate>
 8006956:	4602      	mov	r2, r0
 8006958:	4b03      	ldr	r3, [pc, #12]	; (8006968 <main+0x44>)
 800695a:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 800695c:	f7fe fe82 	bl	8005664 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006960:	e7fe      	b.n	8006960 <main+0x3c>
 8006962:	bf00      	nop
 8006964:	080081f4 	.word	0x080081f4
 8006968:	20003f40 	.word	0x20003f40

0800696c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b094      	sub	sp, #80	; 0x50
 8006970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006972:	2300      	movs	r3, #0
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	4a35      	ldr	r2, [pc, #212]	; (8006a4c <SystemClock_Config+0xe0>)
 8006978:	4b34      	ldr	r3, [pc, #208]	; (8006a4c <SystemClock_Config+0xe0>)
 800697a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006980:	6413      	str	r3, [r2, #64]	; 0x40
 8006982:	4b32      	ldr	r3, [pc, #200]	; (8006a4c <SystemClock_Config+0xe0>)
 8006984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800698a:	60bb      	str	r3, [r7, #8]
 800698c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800698e:	2300      	movs	r3, #0
 8006990:	607b      	str	r3, [r7, #4]
 8006992:	4a2f      	ldr	r2, [pc, #188]	; (8006a50 <SystemClock_Config+0xe4>)
 8006994:	4b2e      	ldr	r3, [pc, #184]	; (8006a50 <SystemClock_Config+0xe4>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800699c:	6013      	str	r3, [r2, #0]
 800699e:	4b2c      	ldr	r3, [pc, #176]	; (8006a50 <SystemClock_Config+0xe4>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069a6:	607b      	str	r3, [r7, #4]
 80069a8:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80069aa:	2303      	movs	r3, #3
 80069ac:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80069ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80069b4:	2301      	movs	r3, #1
 80069b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80069b8:	2310      	movs	r3, #16
 80069ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80069bc:	2302      	movs	r3, #2
 80069be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80069c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80069c6:	2304      	movs	r3, #4
 80069c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80069ca:	2348      	movs	r3, #72	; 0x48
 80069cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80069ce:	2302      	movs	r3, #2
 80069d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80069d2:	2303      	movs	r3, #3
 80069d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80069d6:	f107 0320 	add.w	r3, r7, #32
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fb f978 	bl	8001cd0 <HAL_RCC_OscConfig>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d003      	beq.n	80069ee <SystemClock_Config+0x82>
  {
    _Error_Handler(__FILE__, __LINE__);
 80069e6:	21d9      	movs	r1, #217	; 0xd9
 80069e8:	481a      	ldr	r0, [pc, #104]	; (8006a54 <SystemClock_Config+0xe8>)
 80069ea:	f000 f911 	bl	8006c10 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80069ee:	230f      	movs	r3, #15
 80069f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80069f2:	2300      	movs	r3, #0
 80069f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80069f6:	2300      	movs	r3, #0
 80069f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80069fa:	2300      	movs	r3, #0
 80069fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8006a02:	f107 030c 	add.w	r3, r7, #12
 8006a06:	2100      	movs	r1, #0
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fb fba3 	bl	8002154 <HAL_RCC_ClockConfig>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <SystemClock_Config+0xb0>
  {
    _Error_Handler(__FILE__, __LINE__);
 8006a14:	21e7      	movs	r1, #231	; 0xe7
 8006a16:	480f      	ldr	r0, [pc, #60]	; (8006a54 <SystemClock_Config+0xe8>)
 8006a18:	f000 f8fa 	bl	8006c10 <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8006a1c:	f7fb fd54 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 8006a20:	4602      	mov	r2, r0
 8006a22:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <SystemClock_Config+0xec>)
 8006a24:	fba3 2302 	umull	r2, r3, r3, r2
 8006a28:	099b      	lsrs	r3, r3, #6
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7f9 fec3 	bl	80007b6 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8006a30:	2004      	movs	r0, #4
 8006a32:	f7f9 fecd 	bl	80007d0 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8006a36:	2200      	movs	r2, #0
 8006a38:	210f      	movs	r1, #15
 8006a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3e:	f7f9 fe90 	bl	8000762 <HAL_NVIC_SetPriority>
}
 8006a42:	bf00      	nop
 8006a44:	3750      	adds	r7, #80	; 0x50
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40023800 	.word	0x40023800
 8006a50:	40007000 	.word	0x40007000
 8006a54:	08008208 	.word	0x08008208
 8006a58:	10624dd3 	.word	0x10624dd3

08006a5c <MX_SPI1_Init>:

/* SPI1 init function */
static void MX_SPI1_Init(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
//  if (HAL_SPI_Init(&hspi1) != HAL_OK)
//  {
//    _Error_Handler(__FILE__, __LINE__);
//  }

}
 8006a60:	bf00      	nop
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
	...

08006a6c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b088      	sub	sp, #32
 8006a70:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
 8006a76:	4a2a      	ldr	r2, [pc, #168]	; (8006b20 <MX_GPIO_Init+0xb4>)
 8006a78:	4b29      	ldr	r3, [pc, #164]	; (8006b20 <MX_GPIO_Init+0xb4>)
 8006a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a80:	6313      	str	r3, [r2, #48]	; 0x30
 8006a82:	4b27      	ldr	r3, [pc, #156]	; (8006b20 <MX_GPIO_Init+0xb4>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a8a:	60bb      	str	r3, [r7, #8]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a8e:	2300      	movs	r3, #0
 8006a90:	607b      	str	r3, [r7, #4]
 8006a92:	4a23      	ldr	r2, [pc, #140]	; (8006b20 <MX_GPIO_Init+0xb4>)
 8006a94:	4b22      	ldr	r3, [pc, #136]	; (8006b20 <MX_GPIO_Init+0xb4>)
 8006a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a98:	f043 0301 	orr.w	r3, r3, #1
 8006a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a9e:	4b20      	ldr	r3, [pc, #128]	; (8006b20 <MX_GPIO_Init+0xb4>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	f003 0301 	and.w	r3, r3, #1
 8006aa6:	607b      	str	r3, [r7, #4]
 8006aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006aaa:	2300      	movs	r3, #0
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4a1c      	ldr	r2, [pc, #112]	; (8006b20 <MX_GPIO_Init+0xb4>)
 8006ab0:	4b1b      	ldr	r3, [pc, #108]	; (8006b20 <MX_GPIO_Init+0xb4>)
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	f043 0308 	orr.w	r3, r3, #8
 8006ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8006aba:	4b19      	ldr	r3, [pc, #100]	; (8006b20 <MX_GPIO_Init+0xb4>)
 8006abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	603b      	str	r3, [r7, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2118      	movs	r1, #24
 8006aca:	4816      	ldr	r0, [pc, #88]	; (8006b24 <MX_GPIO_Init+0xb8>)
 8006acc:	f7fa f81e 	bl	8000b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8006ad6:	4814      	ldr	r0, [pc, #80]	; (8006b28 <MX_GPIO_Init+0xbc>)
 8006ad8:	f7fa f818 	bl	8000b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8006adc:	2318      	movs	r3, #24
 8006ade:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aec:	f107 030c 	add.w	r3, r7, #12
 8006af0:	4619      	mov	r1, r3
 8006af2:	480c      	ldr	r0, [pc, #48]	; (8006b24 <MX_GPIO_Init+0xb8>)
 8006af4:	f7f9 fe88 	bl	8000808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006af8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8006afc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006afe:	2301      	movs	r3, #1
 8006b00:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b02:	2300      	movs	r3, #0
 8006b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b0a:	f107 030c 	add.w	r3, r7, #12
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4805      	ldr	r0, [pc, #20]	; (8006b28 <MX_GPIO_Init+0xbc>)
 8006b12:	f7f9 fe79 	bl	8000808 <HAL_GPIO_Init>

}
 8006b16:	bf00      	nop
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	40023800 	.word	0x40023800
 8006b24:	40020000 	.word	0x40020000
 8006b28:	40020c00 	.word	0x40020c00

08006b2c <StartDefaultTask>:
}
/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8006b34:	f000 fd16 	bl	8007564 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 5 */
  osDelay(400);
 8006b38:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8006b3c:	f7fe fdc0 	bl	80056c0 <osDelay>
  if(nRF24_Check()){
 8006b40:	f000 f974 	bl	8006e2c <nRF24_Check>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <StartDefaultTask+0x2a>
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b50:	4820      	ldr	r0, [pc, #128]	; (8006bd4 <StartDefaultTask+0xa8>)
 8006b52:	f7f9 ffdb 	bl	8000b0c <HAL_GPIO_WritePin>
  }
  nRF24_Init();
 8006b56:	f000 f917 	bl	8006d88 <nRF24_Init>
  osDelay(600);
 8006b5a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006b5e:	f7fe fdaf 	bl	80056c0 <osDelay>
	//   - CRC scheme: 2 byte

  // The transmitter sends a 5-byte packets to the address '0xE7 0x1C 0xE3' without Auto-ACK (ShockBurst disabled)

  // Disable ShockBurst for all RX pipes
  nRF24_DisableAA(0xFF);
 8006b62:	20ff      	movs	r0, #255	; 0xff
 8006b64:	f000 fad8 	bl	8007118 <nRF24_DisableAA>

  // Set RF channel
  nRF24_SetRFChannel(115);
 8006b68:	2073      	movs	r0, #115	; 0x73
 8006b6a:	f000 f9ee 	bl	8006f4a <nRF24_SetRFChannel>

  // Set data rate
  nRF24_SetDataRate(nRF24_DR_250kbps);
 8006b6e:	2020      	movs	r0, #32
 8006b70:	f000 fa62 	bl	8007038 <nRF24_SetDataRate>

  // Set CRC scheme
  nRF24_SetCRCScheme(nRF24_CRC_2byte);
 8006b74:	200c      	movs	r0, #12
 8006b76:	f000 f9c7 	bl	8006f08 <nRF24_SetCRCScheme>

  // Set address width, its common for all pipes (RX and TX)
  nRF24_SetAddrWidth(3);
 8006b7a:	2003      	movs	r0, #3
 8006b7c:	f000 f9f3 	bl	8006f66 <nRF24_SetAddrWidth>

  // Configure RX PIPE#1
  static const uint8_t nRF24_ADDR[] = { 0xE7, 0x1C, 0xE3 };
  nRF24_SetAddr(nRF24_PIPE1, nRF24_ADDR); // program address for RX pipe #1
 8006b80:	4915      	ldr	r1, [pc, #84]	; (8006bd8 <StartDefaultTask+0xac>)
 8006b82:	2001      	movs	r0, #1
 8006b84:	f000 fa00 	bl	8006f88 <nRF24_SetAddr>
  nRF24_SetRXPipe(nRF24_PIPE1, nRF24_AA_OFF, 5); // Auto-ACK: disabled, payload length: 5 bytes
 8006b88:	2205      	movs	r2, #5
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	2001      	movs	r0, #1
 8006b8e:	f000 fa6f 	bl	8007070 <nRF24_SetRXPipe>

  // Set operational mode (PRX == receiver)
  nRF24_SetOperationalMode(nRF24_MODE_RX);
 8006b92:	2001      	movs	r0, #1
 8006b94:	f000 f997 	bl	8006ec6 <nRF24_SetOperationalMode>

  // Wake the transceiver
  nRF24_SetPowerMode(nRF24_PWR_UP);
 8006b98:	2002      	movs	r0, #2
 8006b9a:	f000 f975 	bl	8006e88 <nRF24_SetPowerMode>

  // Put the transceiver to the RX mode
  nRF24_CE_H();
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	2108      	movs	r1, #8
 8006ba2:	480e      	ldr	r0, [pc, #56]	; (8006bdc <StartDefaultTask+0xb0>)
 8006ba4:	f7f9 ffb2 	bl	8000b0c <HAL_GPIO_WritePin>
  	// Constantly poll the status of the RX FIFO and get a payload if FIFO is not empty
  	//
  	// This is far from best solution, but it's ok for testing purposes
  	// More smart way is to use the IRQ pin :)
  	//
  	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8006ba8:	f000 fadd 	bl	8007166 <nRF24_GetStatus_RXFIFO>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d0fa      	beq.n	8006ba8 <StartDefaultTask+0x7c>
  		// Get a payload from the transceiver
  		pipe = nRF24_ReadPayload(nRF24_payload, &payload_length);
 8006bb2:	490b      	ldr	r1, [pc, #44]	; (8006be0 <StartDefaultTask+0xb4>)
 8006bb4:	480b      	ldr	r0, [pc, #44]	; (8006be4 <StartDefaultTask+0xb8>)
 8006bb6:	f000 fb07 	bl	80071c8 <nRF24_ReadPayload>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	4b0a      	ldr	r3, [pc, #40]	; (8006be8 <StartDefaultTask+0xbc>)
 8006bc0:	701a      	strb	r2, [r3, #0]
		nRF24_ClearIRQFlags();
 8006bc2:	f000 faeb 	bl	800719c <nRF24_ClearIRQFlags>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8006bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bca:	4802      	ldr	r0, [pc, #8]	; (8006bd4 <StartDefaultTask+0xa8>)
 8006bcc:	f7f9 ffb7 	bl	8000b3e <HAL_GPIO_TogglePin>
  	if (nRF24_GetStatus_RXFIFO() != nRF24_STATUS_RXFIFO_EMPTY) {
 8006bd0:	e7ea      	b.n	8006ba8 <StartDefaultTask+0x7c>
 8006bd2:	bf00      	nop
 8006bd4:	40020c00 	.word	0x40020c00
 8006bd8:	0800828c 	.word	0x0800828c
 8006bdc:	40020000 	.word	0x40020000
 8006be0:	20003f3c 	.word	0x20003f3c
 8006be4:	20003fa0 	.word	0x20003fa0
 8006be8:	20003f44 	.word	0x20003f44

08006bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a04      	ldr	r2, [pc, #16]	; (8006c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d101      	bne.n	8006c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006bfe:	f7f9 fc99 	bl	8000534 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	40014400 	.word	0x40014400

08006c10 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8006c1a:	e7fe      	b.n	8006c1a <_Error_Handler+0xa>

08006c1c <nRF24_ReadReg>:

// Read a register
// input:
//   reg - number of register to read
// return: value of register
static uint8_t nRF24_ReadReg(uint8_t reg) {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4603      	mov	r3, r0
 8006c24:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	nRF24_CSN_L();
 8006c26:	2200      	movs	r2, #0
 8006c28:	2110      	movs	r1, #16
 8006c2a:	480c      	ldr	r0, [pc, #48]	; (8006c5c <nRF24_ReadReg+0x40>)
 8006c2c:	f7f9 ff6e 	bl	8000b0c <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg & nRF24_MASK_REG_MAP);
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	f003 031f 	and.w	r3, r3, #31
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f000 fb35 	bl	80072a8 <nRF24_LL_RW>
	value = nRF24_LL_RW(nRF24_CMD_NOP);
 8006c3e:	20ff      	movs	r0, #255	; 0xff
 8006c40:	f000 fb32 	bl	80072a8 <nRF24_LL_RW>
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]
	nRF24_CSN_H();
 8006c48:	2201      	movs	r2, #1
 8006c4a:	2110      	movs	r1, #16
 8006c4c:	4803      	ldr	r0, [pc, #12]	; (8006c5c <nRF24_ReadReg+0x40>)
 8006c4e:	f7f9 ff5d 	bl	8000b0c <HAL_GPIO_WritePin>

	return value;
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3710      	adds	r7, #16
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	40020000 	.word	0x40020000

08006c60 <nRF24_WriteReg>:

// Write a new value to register
// input:
//   reg - number of register to write
//   value - value to write
static void nRF24_WriteReg(uint8_t reg, uint8_t value) {
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	4603      	mov	r3, r0
 8006c68:	460a      	mov	r2, r1
 8006c6a:	71fb      	strb	r3, [r7, #7]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8006c70:	2200      	movs	r2, #0
 8006c72:	2110      	movs	r1, #16
 8006c74:	4819      	ldr	r0, [pc, #100]	; (8006cdc <nRF24_WriteReg+0x7c>)
 8006c76:	f7f9 ff49 	bl	8000b0c <HAL_GPIO_WritePin>
	if (reg < nRF24_CMD_W_REGISTER) {
 8006c7a:	79fb      	ldrb	r3, [r7, #7]
 8006c7c:	2b1f      	cmp	r3, #31
 8006c7e:	d810      	bhi.n	8006ca2 <nRF24_WriteReg+0x42>
		// This is a register access
		nRF24_LL_RW(nRF24_CMD_W_REGISTER | (reg & nRF24_MASK_REG_MAP));
 8006c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c84:	f003 031f 	and.w	r3, r3, #31
 8006c88:	b25b      	sxtb	r3, r3
 8006c8a:	f043 0320 	orr.w	r3, r3, #32
 8006c8e:	b25b      	sxtb	r3, r3
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fb08 	bl	80072a8 <nRF24_LL_RW>
		nRF24_LL_RW(value);
 8006c98:	79bb      	ldrb	r3, [r7, #6]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f000 fb04 	bl	80072a8 <nRF24_LL_RW>
 8006ca0:	e013      	b.n	8006cca <nRF24_WriteReg+0x6a>
	} else {
		// This is a single byte command or future command/register
		nRF24_LL_RW(reg);
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f000 faff 	bl	80072a8 <nRF24_LL_RW>
		if ((reg != nRF24_CMD_FLUSH_TX) && (reg != nRF24_CMD_FLUSH_RX) && \
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	2be1      	cmp	r3, #225	; 0xe1
 8006cae:	d00c      	beq.n	8006cca <nRF24_WriteReg+0x6a>
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	2be2      	cmp	r3, #226	; 0xe2
 8006cb4:	d009      	beq.n	8006cca <nRF24_WriteReg+0x6a>
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	2be3      	cmp	r3, #227	; 0xe3
 8006cba:	d006      	beq.n	8006cca <nRF24_WriteReg+0x6a>
				(reg != nRF24_CMD_REUSE_TX_PL) && (reg != nRF24_CMD_NOP)) {
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	2bff      	cmp	r3, #255	; 0xff
 8006cc0:	d003      	beq.n	8006cca <nRF24_WriteReg+0x6a>
			// Send register value
			nRF24_LL_RW(value);
 8006cc2:	79bb      	ldrb	r3, [r7, #6]
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 faef 	bl	80072a8 <nRF24_LL_RW>
		}
	}
	nRF24_CSN_H();
 8006cca:	2201      	movs	r2, #1
 8006ccc:	2110      	movs	r1, #16
 8006cce:	4803      	ldr	r0, [pc, #12]	; (8006cdc <nRF24_WriteReg+0x7c>)
 8006cd0:	f7f9 ff1c 	bl	8000b0c <HAL_GPIO_WritePin>
}
 8006cd4:	bf00      	nop
 8006cd6:	3708      	adds	r7, #8
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	40020000 	.word	0x40020000

08006ce0 <nRF24_ReadMBReg>:
// Read a multi-byte register
// input:
//   reg - number of register to read
//   pBuf - pointer to the buffer for register data
//   count - number of bytes to read
static void nRF24_ReadMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8006ce0:	b590      	push	{r4, r7, lr}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	6039      	str	r1, [r7, #0]
 8006cea:	71fb      	strb	r3, [r7, #7]
 8006cec:	4613      	mov	r3, r2
 8006cee:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2110      	movs	r1, #16
 8006cf4:	480e      	ldr	r0, [pc, #56]	; (8006d30 <nRF24_ReadMBReg+0x50>)
 8006cf6:	f7f9 ff09 	bl	8000b0c <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fad3 	bl	80072a8 <nRF24_LL_RW>
	while (count--) {
 8006d02:	e007      	b.n	8006d14 <nRF24_ReadMBReg+0x34>
		*pBuf++ = nRF24_LL_RW(nRF24_CMD_NOP);
 8006d04:	683c      	ldr	r4, [r7, #0]
 8006d06:	1c63      	adds	r3, r4, #1
 8006d08:	603b      	str	r3, [r7, #0]
 8006d0a:	20ff      	movs	r0, #255	; 0xff
 8006d0c:	f000 facc 	bl	80072a8 <nRF24_LL_RW>
 8006d10:	4603      	mov	r3, r0
 8006d12:	7023      	strb	r3, [r4, #0]
	while (count--) {
 8006d14:	79bb      	ldrb	r3, [r7, #6]
 8006d16:	1e5a      	subs	r2, r3, #1
 8006d18:	71ba      	strb	r2, [r7, #6]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1f2      	bne.n	8006d04 <nRF24_ReadMBReg+0x24>
	}
	nRF24_CSN_H();
 8006d1e:	2201      	movs	r2, #1
 8006d20:	2110      	movs	r1, #16
 8006d22:	4803      	ldr	r0, [pc, #12]	; (8006d30 <nRF24_ReadMBReg+0x50>)
 8006d24:	f7f9 fef2 	bl	8000b0c <HAL_GPIO_WritePin>
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd90      	pop	{r4, r7, pc}
 8006d30:	40020000 	.word	0x40020000

08006d34 <nRF24_WriteMBReg>:
// Write a multi-byte register
// input:
//   reg - number of register to write
//   pBuf - pointer to the buffer with data to write
//   count - number of bytes to write
static void nRF24_WriteMBReg(uint8_t reg, uint8_t *pBuf, uint8_t count) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	6039      	str	r1, [r7, #0]
 8006d3e:	71fb      	strb	r3, [r7, #7]
 8006d40:	4613      	mov	r3, r2
 8006d42:	71bb      	strb	r3, [r7, #6]
	nRF24_CSN_L();
 8006d44:	2200      	movs	r2, #0
 8006d46:	2110      	movs	r1, #16
 8006d48:	480e      	ldr	r0, [pc, #56]	; (8006d84 <nRF24_WriteMBReg+0x50>)
 8006d4a:	f7f9 fedf 	bl	8000b0c <HAL_GPIO_WritePin>
	nRF24_LL_RW(reg);
 8006d4e:	79fb      	ldrb	r3, [r7, #7]
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 faa9 	bl	80072a8 <nRF24_LL_RW>
	while (count--) {
 8006d56:	e006      	b.n	8006d66 <nRF24_WriteMBReg+0x32>
		nRF24_LL_RW(*pBuf++);
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	1c5a      	adds	r2, r3, #1
 8006d5c:	603a      	str	r2, [r7, #0]
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 faa1 	bl	80072a8 <nRF24_LL_RW>
	while (count--) {
 8006d66:	79bb      	ldrb	r3, [r7, #6]
 8006d68:	1e5a      	subs	r2, r3, #1
 8006d6a:	71ba      	strb	r2, [r7, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1f3      	bne.n	8006d58 <nRF24_WriteMBReg+0x24>
	}
	nRF24_CSN_H();
 8006d70:	2201      	movs	r2, #1
 8006d72:	2110      	movs	r1, #16
 8006d74:	4803      	ldr	r0, [pc, #12]	; (8006d84 <nRF24_WriteMBReg+0x50>)
 8006d76:	f7f9 fec9 	bl	8000b0c <HAL_GPIO_WritePin>
}
 8006d7a:	bf00      	nop
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40020000 	.word	0x40020000

08006d88 <nRF24_Init>:

// Set transceiver to it's initial state
// note: RX/TX pipe addresses remains untouched
void nRF24_Init(void) {
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	af00      	add	r7, sp, #0
	// Write to registers their initial values
	nRF24_WriteReg(nRF24_REG_CONFIG, 0x08);
 8006d8c:	2108      	movs	r1, #8
 8006d8e:	2000      	movs	r0, #0
 8006d90:	f7ff ff66 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_AA, 0x3F);
 8006d94:	213f      	movs	r1, #63	; 0x3f
 8006d96:	2001      	movs	r0, #1
 8006d98:	f7ff ff62 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, 0x03);
 8006d9c:	2103      	movs	r1, #3
 8006d9e:	2002      	movs	r0, #2
 8006da0:	f7ff ff5e 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_AW, 0x03);
 8006da4:	2103      	movs	r1, #3
 8006da6:	2003      	movs	r0, #3
 8006da8:	f7ff ff5a 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_SETUP_RETR, 0x03);
 8006dac:	2103      	movs	r1, #3
 8006dae:	2004      	movs	r0, #4
 8006db0:	f7ff ff56 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_CH, 0x02);
 8006db4:	2102      	movs	r1, #2
 8006db6:	2005      	movs	r0, #5
 8006db8:	f7ff ff52 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RF_SETUP, 0x0E);
 8006dbc:	210e      	movs	r1, #14
 8006dbe:	2006      	movs	r0, #6
 8006dc0:	f7ff ff4e 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_STATUS, 0x00);
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	2007      	movs	r0, #7
 8006dc8:	f7ff ff4a 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P0, 0x00);
 8006dcc:	2100      	movs	r1, #0
 8006dce:	2011      	movs	r0, #17
 8006dd0:	f7ff ff46 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P1, 0x00);
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	2012      	movs	r0, #18
 8006dd8:	f7ff ff42 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P2, 0x00);
 8006ddc:	2100      	movs	r1, #0
 8006dde:	2013      	movs	r0, #19
 8006de0:	f7ff ff3e 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P3, 0x00);
 8006de4:	2100      	movs	r1, #0
 8006de6:	2014      	movs	r0, #20
 8006de8:	f7ff ff3a 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P4, 0x00);
 8006dec:	2100      	movs	r1, #0
 8006dee:	2015      	movs	r0, #21
 8006df0:	f7ff ff36 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_RX_PW_P5, 0x00);
 8006df4:	2100      	movs	r1, #0
 8006df6:	2016      	movs	r0, #22
 8006df8:	f7ff ff32 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_DYNPD, 0x00);
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	201c      	movs	r0, #28
 8006e00:	f7ff ff2e 	bl	8006c60 <nRF24_WriteReg>
	nRF24_WriteReg(nRF24_REG_FEATURE, 0x00);
 8006e04:	2100      	movs	r1, #0
 8006e06:	201d      	movs	r0, #29
 8006e08:	f7ff ff2a 	bl	8006c60 <nRF24_WriteReg>

	// Clear the FIFO's
	nRF24_FlushRX();
 8006e0c:	f000 f9be 	bl	800718c <nRF24_FlushRX>
	nRF24_FlushTX();
 8006e10:	f000 f9b4 	bl	800717c <nRF24_FlushTX>

	// Clear any pending interrupt flags
	nRF24_ClearIRQFlags();
 8006e14:	f000 f9c2 	bl	800719c <nRF24_ClearIRQFlags>

	// Deassert CSN pin (chip release)
	nRF24_CSN_H();
 8006e18:	2201      	movs	r2, #1
 8006e1a:	2110      	movs	r1, #16
 8006e1c:	4802      	ldr	r0, [pc, #8]	; (8006e28 <nRF24_Init+0xa0>)
 8006e1e:	f7f9 fe75 	bl	8000b0c <HAL_GPIO_WritePin>
}
 8006e22:	bf00      	nop
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40020000 	.word	0x40020000

08006e2c <nRF24_Check>:

// Check if the nRF24L01 present
// return:
//   1 - nRF24L01 is online and responding
//   0 - received sequence differs from original
uint8_t nRF24_Check(void) {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
	uint8_t rxbuf[5];
	uint8_t i;
	uint8_t *ptr = (uint8_t *)nRF24_TEST_ADDR;
 8006e32:	4b14      	ldr	r3, [pc, #80]	; (8006e84 <nRF24_Check+0x58>)
 8006e34:	60bb      	str	r3, [r7, #8]

	// Write test TX address and read TX_ADDR register
	nRF24_WriteMBReg(nRF24_CMD_W_REGISTER | nRF24_REG_TX_ADDR, ptr, 5);
 8006e36:	2205      	movs	r2, #5
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	2030      	movs	r0, #48	; 0x30
 8006e3c:	f7ff ff7a 	bl	8006d34 <nRF24_WriteMBReg>
	nRF24_ReadMBReg(nRF24_CMD_R_REGISTER | nRF24_REG_TX_ADDR, rxbuf, 5);
 8006e40:	463b      	mov	r3, r7
 8006e42:	2205      	movs	r2, #5
 8006e44:	4619      	mov	r1, r3
 8006e46:	2010      	movs	r0, #16
 8006e48:	f7ff ff4a 	bl	8006ce0 <nRF24_ReadMBReg>

	// Compare buffers, return error on first mismatch
	for (i = 0; i < 5; i++) {
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	73fb      	strb	r3, [r7, #15]
 8006e50:	e010      	b.n	8006e74 <nRF24_Check+0x48>
		if (rxbuf[i] != *ptr++) return 0;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	f107 0210 	add.w	r2, r7, #16
 8006e58:	4413      	add	r3, r2
 8006e5a:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	1c59      	adds	r1, r3, #1
 8006e62:	60b9      	str	r1, [r7, #8]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d001      	beq.n	8006e6e <nRF24_Check+0x42>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e006      	b.n	8006e7c <nRF24_Check+0x50>
	for (i = 0; i < 5; i++) {
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	3301      	adds	r3, #1
 8006e72:	73fb      	strb	r3, [r7, #15]
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d9eb      	bls.n	8006e52 <nRF24_Check+0x26>
	}

	return 1;
 8006e7a:	2301      	movs	r3, #1
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	08008218 	.word	0x08008218

08006e88 <nRF24_SetPowerMode>:

// Control transceiver power mode
// input:
//   mode - new state of power mode, one of nRF24_PWR_xx values
void nRF24_SetPowerMode(uint8_t mode) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	reg = nRF24_ReadReg(nRF24_REG_CONFIG);
 8006e92:	2000      	movs	r0, #0
 8006e94:	f7ff fec2 	bl	8006c1c <nRF24_ReadReg>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	73fb      	strb	r3, [r7, #15]
	if (mode == nRF24_PWR_UP) {
 8006e9c:	79fb      	ldrb	r3, [r7, #7]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d104      	bne.n	8006eac <nRF24_SetPowerMode+0x24>
		// Set the PWR_UP bit of CONFIG register to wake the transceiver
		// It goes into Stanby-I mode with consumption about 26uA
		reg |= nRF24_CONFIG_PWR_UP;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	f043 0302 	orr.w	r3, r3, #2
 8006ea8:	73fb      	strb	r3, [r7, #15]
 8006eaa:	e003      	b.n	8006eb4 <nRF24_SetPowerMode+0x2c>
	} else {
		// Clear the PWR_UP bit of CONFIG register to put the transceiver
		// into power down mode with consumption about 900nA
		reg &= ~nRF24_CONFIG_PWR_UP;
 8006eac:	7bfb      	ldrb	r3, [r7, #15]
 8006eae:	f023 0302 	bic.w	r3, r3, #2
 8006eb2:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8006eb4:	7bfb      	ldrb	r3, [r7, #15]
 8006eb6:	4619      	mov	r1, r3
 8006eb8:	2000      	movs	r0, #0
 8006eba:	f7ff fed1 	bl	8006c60 <nRF24_WriteReg>
}
 8006ebe:	bf00      	nop
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}

08006ec6 <nRF24_SetOperationalMode>:

// Set transceiver operational mode
// input:
//   mode - operational mode, one of nRF24_MODE_xx values
void nRF24_SetOperationalMode(uint8_t mode) {
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	4603      	mov	r3, r0
 8006ece:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure PRIM_RX bit of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	f7ff fea3 	bl	8006c1c <nRF24_ReadReg>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_CONFIG_PRIM_RX;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
 8006edc:	f023 0301 	bic.w	r3, r3, #1
 8006ee0:	73fb      	strb	r3, [r7, #15]
	reg |= (mode & nRF24_CONFIG_PRIM_RX);
 8006ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ee6:	f003 0301 	and.w	r3, r3, #1
 8006eea:	b25a      	sxtb	r2, r3
 8006eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	b25b      	sxtb	r3, r3
 8006ef4:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
 8006ef8:	4619      	mov	r1, r3
 8006efa:	2000      	movs	r0, #0
 8006efc:	f7ff feb0 	bl	8006c60 <nRF24_WriteReg>
}
 8006f00:	bf00      	nop
 8006f02:	3710      	adds	r7, #16
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <nRF24_SetCRCScheme>:
// Configure transceiver CRC scheme
// input:
//   scheme - CRC scheme, one of nRF24_CRC_xx values
// note: transceiver will forcibly turn on the CRC in case if auto acknowledgment
//       enabled for at least one RX pipe
void nRF24_SetCRCScheme(uint8_t scheme) {
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	4603      	mov	r3, r0
 8006f10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure EN_CRC[3] and CRCO[2] bits of the CONFIG register
	reg  = nRF24_ReadReg(nRF24_REG_CONFIG);
 8006f12:	2000      	movs	r0, #0
 8006f14:	f7ff fe82 	bl	8006c1c <nRF24_ReadReg>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_CRC;
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	f023 030c 	bic.w	r3, r3, #12
 8006f22:	73fb      	strb	r3, [r7, #15]
	reg |= (scheme & nRF24_MASK_CRC);
 8006f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f28:	f003 030c 	and.w	r3, r3, #12
 8006f2c:	b25a      	sxtb	r2, r3
 8006f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	b25b      	sxtb	r3, r3
 8006f36:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_CONFIG, reg);
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	2000      	movs	r0, #0
 8006f3e:	f7ff fe8f 	bl	8006c60 <nRF24_WriteReg>
}
 8006f42:	bf00      	nop
 8006f44:	3710      	adds	r7, #16
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <nRF24_SetRFChannel>:
// Set frequency channel
// input:
//   channel - radio frequency channel, value from 0 to 127
// note: frequency will be (2400 + channel)MHz
// note: PLOS_CNT[7:4] bits of the OBSERVER_TX register will be reset
void nRF24_SetRFChannel(uint8_t channel) {
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b082      	sub	sp, #8
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	4603      	mov	r3, r0
 8006f52:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_RF_CH, channel);
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	4619      	mov	r1, r3
 8006f58:	2005      	movs	r0, #5
 8006f5a:	f7ff fe81 	bl	8006c60 <nRF24_WriteReg>
}
 8006f5e:	bf00      	nop
 8006f60:	3708      	adds	r7, #8
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}

08006f66 <nRF24_SetAddrWidth>:

// Set of address widths
// input:
//   addr_width - RX/TX address field width, value from 3 to 5
// note: this setting is common for all pipes
void nRF24_SetAddrWidth(uint8_t addr_width) {
 8006f66:	b580      	push	{r7, lr}
 8006f68:	b082      	sub	sp, #8
 8006f6a:	af00      	add	r7, sp, #0
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_SETUP_AW, addr_width - 2);
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	3b02      	subs	r3, #2
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	4619      	mov	r1, r3
 8006f78:	2003      	movs	r0, #3
 8006f7a:	f7ff fe71 	bl	8006c60 <nRF24_WriteReg>
}
 8006f7e:	bf00      	nop
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
	...

08006f88 <nRF24_SetAddr>:
// note: buffer length must be equal to current address width of transceiver
// note: for pipes[2..5] only first byte of address will be written because
//       other bytes of address equals to pipe1
// note: for pipes[2..5] only first byte of address will be written because
//       pipes 1-5 share the four most significant address bytes
void nRF24_SetAddr(uint8_t pipe, const uint8_t *addr) {
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	4603      	mov	r3, r0
 8006f90:	6039      	str	r1, [r7, #0]
 8006f92:	71fb      	strb	r3, [r7, #7]
	uint8_t addr_width;

	// RX_ADDR_Px register
	switch (pipe) {
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	2b06      	cmp	r3, #6
 8006f98:	d844      	bhi.n	8007024 <nRF24_SetAddr+0x9c>
 8006f9a:	a201      	add	r2, pc, #4	; (adr r2, 8006fa0 <nRF24_SetAddr+0x18>)
 8006f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa0:	08006fbd 	.word	0x08006fbd
 8006fa4:	08006fbd 	.word	0x08006fbd
 8006fa8:	08007011 	.word	0x08007011
 8006fac:	08007011 	.word	0x08007011
 8006fb0:	08007011 	.word	0x08007011
 8006fb4:	08007011 	.word	0x08007011
 8006fb8:	08006fbd 	.word	0x08006fbd
		case nRF24_PIPETX:
		case nRF24_PIPE0:
		case nRF24_PIPE1:
			// Get address width
			addr_width = nRF24_ReadReg(nRF24_REG_SETUP_AW) + 1;
 8006fbc:	2003      	movs	r0, #3
 8006fbe:	f7ff fe2d 	bl	8006c1c <nRF24_ReadReg>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	73fb      	strb	r3, [r7, #15]
			// Write address in reverse order (LSByte first)
			addr += addr_width;
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	683a      	ldr	r2, [r7, #0]
 8006fcc:	4413      	add	r3, r2
 8006fce:	603b      	str	r3, [r7, #0]
			nRF24_CSN_L();
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2110      	movs	r1, #16
 8006fd4:	4816      	ldr	r0, [pc, #88]	; (8007030 <nRF24_SetAddr+0xa8>)
 8006fd6:	f7f9 fd99 	bl	8000b0c <HAL_GPIO_WritePin>
			nRF24_LL_RW(nRF24_CMD_W_REGISTER | nRF24_ADDR_REGS[pipe]);
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	4a15      	ldr	r2, [pc, #84]	; (8007034 <nRF24_SetAddr+0xac>)
 8006fde:	5cd3      	ldrb	r3, [r2, r3]
 8006fe0:	f043 0320 	orr.w	r3, r3, #32
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f000 f95e 	bl	80072a8 <nRF24_LL_RW>
			do {
				nRF24_LL_RW(*addr--);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	1e5a      	subs	r2, r3, #1
 8006ff0:	603a      	str	r2, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f000 f957 	bl	80072a8 <nRF24_LL_RW>
			} while (addr_width--);
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	1e5a      	subs	r2, r3, #1
 8006ffe:	73fa      	strb	r2, [r7, #15]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1f3      	bne.n	8006fec <nRF24_SetAddr+0x64>
			nRF24_CSN_H();
 8007004:	2201      	movs	r2, #1
 8007006:	2110      	movs	r1, #16
 8007008:	4809      	ldr	r0, [pc, #36]	; (8007030 <nRF24_SetAddr+0xa8>)
 800700a:	f7f9 fd7f 	bl	8000b0c <HAL_GPIO_WritePin>
			break;
 800700e:	e00a      	b.n	8007026 <nRF24_SetAddr+0x9e>
		case nRF24_PIPE2:
		case nRF24_PIPE3:
		case nRF24_PIPE4:
		case nRF24_PIPE5:
			// Write address LSBbyte (only first byte from the addr buffer)
			nRF24_WriteReg(nRF24_ADDR_REGS[pipe], *addr);
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	4a08      	ldr	r2, [pc, #32]	; (8007034 <nRF24_SetAddr+0xac>)
 8007014:	5cd2      	ldrb	r2, [r2, r3]
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	4619      	mov	r1, r3
 800701c:	4610      	mov	r0, r2
 800701e:	f7ff fe1f 	bl	8006c60 <nRF24_WriteReg>
			break;
 8007022:	e000      	b.n	8007026 <nRF24_SetAddr+0x9e>
		default:
			// Incorrect pipe number -> do nothing
			break;
 8007024:	bf00      	nop
	}
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40020000 	.word	0x40020000
 8007034:	08008298 	.word	0x08008298

08007038 <nRF24_SetDataRate>:
}

// Configure transceiver data rate
// input:
//   data_rate - data rate, one of nRF24_DR_xx values
void nRF24_SetDataRate(uint8_t data_rate) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	4603      	mov	r3, r0
 8007040:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	// Configure RF_DR_LOW[5] and RF_DR_HIGH[3] bits of the RF_SETUP register
	reg  = nRF24_ReadReg(nRF24_REG_RF_SETUP);
 8007042:	2006      	movs	r0, #6
 8007044:	f7ff fdea 	bl	8006c1c <nRF24_ReadReg>
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]
	reg &= ~nRF24_MASK_DATARATE;
 800704c:	7bfb      	ldrb	r3, [r7, #15]
 800704e:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007052:	73fb      	strb	r3, [r7, #15]
	reg |= data_rate;
 8007054:	7bfa      	ldrb	r2, [r7, #15]
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	4313      	orrs	r3, r2
 800705a:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_RF_SETUP, reg);
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	4619      	mov	r1, r3
 8007060:	2006      	movs	r0, #6
 8007062:	f7ff fdfd 	bl	8006c60 <nRF24_WriteReg>
}
 8007066:	bf00      	nop
 8007068:	3710      	adds	r7, #16
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
	...

08007070 <nRF24_SetRXPipe>:
// Configure a specified RX pipe
// input:
//   pipe - number of the RX pipe, value from 0 to 5
//   aa_state - state of auto acknowledgment, one of nRF24_AA_xx values
//   payload_len - payload length in bytes
void nRF24_SetRXPipe(uint8_t pipe, uint8_t aa_state, uint8_t payload_len) {
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	71fb      	strb	r3, [r7, #7]
 800707a:	460b      	mov	r3, r1
 800707c:	71bb      	strb	r3, [r7, #6]
 800707e:	4613      	mov	r3, r2
 8007080:	717b      	strb	r3, [r7, #5]
	uint8_t reg;

	// Enable the specified pipe (EN_RXADDR register)
	reg = (nRF24_ReadReg(nRF24_REG_EN_RXADDR) | (1 << pipe)) & nRF24_MASK_EN_RX;
 8007082:	2002      	movs	r0, #2
 8007084:	f7ff fdca 	bl	8006c1c <nRF24_ReadReg>
 8007088:	4603      	mov	r3, r0
 800708a:	b25a      	sxtb	r2, r3
 800708c:	79fb      	ldrb	r3, [r7, #7]
 800708e:	2101      	movs	r1, #1
 8007090:	fa01 f303 	lsl.w	r3, r1, r3
 8007094:	b25b      	sxtb	r3, r3
 8007096:	4313      	orrs	r3, r2
 8007098:	b25b      	sxtb	r3, r3
 800709a:	b2db      	uxtb	r3, r3
 800709c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070a0:	73fb      	strb	r3, [r7, #15]
	nRF24_WriteReg(nRF24_REG_EN_RXADDR, reg);
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
 80070a4:	4619      	mov	r1, r3
 80070a6:	2002      	movs	r0, #2
 80070a8:	f7ff fdda 	bl	8006c60 <nRF24_WriteReg>

	// Set RX payload length (RX_PW_Px register)
	nRF24_WriteReg(nRF24_RX_PW_PIPE[pipe], payload_len & nRF24_MASK_RX_PW);
 80070ac:	79fb      	ldrb	r3, [r7, #7]
 80070ae:	4a19      	ldr	r2, [pc, #100]	; (8007114 <nRF24_SetRXPipe+0xa4>)
 80070b0:	5cd2      	ldrb	r2, [r2, r3]
 80070b2:	797b      	ldrb	r3, [r7, #5]
 80070b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	4619      	mov	r1, r3
 80070bc:	4610      	mov	r0, r2
 80070be:	f7ff fdcf 	bl	8006c60 <nRF24_WriteReg>

	// Set auto acknowledgment for a specified pipe (EN_AA register)
	reg = nRF24_ReadReg(nRF24_REG_EN_AA);
 80070c2:	2001      	movs	r0, #1
 80070c4:	f7ff fdaa 	bl	8006c1c <nRF24_ReadReg>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73fb      	strb	r3, [r7, #15]
	if (aa_state == nRF24_AA_ON) {
 80070cc:	79bb      	ldrb	r3, [r7, #6]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d10a      	bne.n	80070e8 <nRF24_SetRXPipe+0x78>
		reg |=  (1 << pipe);
 80070d2:	79fb      	ldrb	r3, [r7, #7]
 80070d4:	2201      	movs	r2, #1
 80070d6:	fa02 f303 	lsl.w	r3, r2, r3
 80070da:	b25a      	sxtb	r2, r3
 80070dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	b25b      	sxtb	r3, r3
 80070e4:	73fb      	strb	r3, [r7, #15]
 80070e6:	e00b      	b.n	8007100 <nRF24_SetRXPipe+0x90>
	} else {
		reg &= ~(1 << pipe);
 80070e8:	79fb      	ldrb	r3, [r7, #7]
 80070ea:	2201      	movs	r2, #1
 80070ec:	fa02 f303 	lsl.w	r3, r2, r3
 80070f0:	b25b      	sxtb	r3, r3
 80070f2:	43db      	mvns	r3, r3
 80070f4:	b25a      	sxtb	r2, r3
 80070f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070fa:	4013      	ands	r3, r2
 80070fc:	b25b      	sxtb	r3, r3
 80070fe:	73fb      	strb	r3, [r7, #15]
	}
	nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8007100:	7bfb      	ldrb	r3, [r7, #15]
 8007102:	4619      	mov	r1, r3
 8007104:	2001      	movs	r0, #1
 8007106:	f7ff fdab 	bl	8006c60 <nRF24_WriteReg>
}
 800710a:	bf00      	nop
 800710c:	3710      	adds	r7, #16
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	08008290 	.word	0x08008290

08007118 <nRF24_DisableAA>:
}

// Disable the auto retransmit (a.k.a. enhanced ShockBurst) for one or all RX pipes
// input:
//   pipe - number of the RX pipe, value from 0 to 5, any other value will disable AA for all RX pipes
void nRF24_DisableAA(uint8_t pipe) {
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	4603      	mov	r3, r0
 8007120:	71fb      	strb	r3, [r7, #7]
	uint8_t reg;

	if (pipe > 5) {
 8007122:	79fb      	ldrb	r3, [r7, #7]
 8007124:	2b05      	cmp	r3, #5
 8007126:	d904      	bls.n	8007132 <nRF24_DisableAA+0x1a>
		// Disable Auto-ACK for ALL pipes
		nRF24_WriteReg(nRF24_REG_EN_AA, 0x00);
 8007128:	2100      	movs	r1, #0
 800712a:	2001      	movs	r0, #1
 800712c:	f7ff fd98 	bl	8006c60 <nRF24_WriteReg>
		// Clear bit in the EN_AA register
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
		reg &= ~(1 << pipe);
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
	}
}
 8007130:	e015      	b.n	800715e <nRF24_DisableAA+0x46>
		reg  = nRF24_ReadReg(nRF24_REG_EN_AA);
 8007132:	2001      	movs	r0, #1
 8007134:	f7ff fd72 	bl	8006c1c <nRF24_ReadReg>
 8007138:	4603      	mov	r3, r0
 800713a:	73fb      	strb	r3, [r7, #15]
		reg &= ~(1 << pipe);
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	2201      	movs	r2, #1
 8007140:	fa02 f303 	lsl.w	r3, r2, r3
 8007144:	b25b      	sxtb	r3, r3
 8007146:	43db      	mvns	r3, r3
 8007148:	b25a      	sxtb	r2, r3
 800714a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800714e:	4013      	ands	r3, r2
 8007150:	b25b      	sxtb	r3, r3
 8007152:	73fb      	strb	r3, [r7, #15]
		nRF24_WriteReg(nRF24_REG_EN_AA, reg);
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	4619      	mov	r1, r3
 8007158:	2001      	movs	r0, #1
 800715a:	f7ff fd81 	bl	8006c60 <nRF24_WriteReg>
}
 800715e:	bf00      	nop
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <nRF24_GetStatus_RXFIFO>:
	return (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_STATUS_IRQ);
}

// Get status of the RX FIFO
// return: one of the nRF24_STATUS_RXFIFO_xx values
uint8_t nRF24_GetStatus_RXFIFO(void) {
 8007166:	b580      	push	{r7, lr}
 8007168:	af00      	add	r7, sp, #0
	return (nRF24_ReadReg(nRF24_REG_FIFO_STATUS) & nRF24_MASK_RXFIFO);
 800716a:	2017      	movs	r0, #23
 800716c:	f7ff fd56 	bl	8006c1c <nRF24_ReadReg>
 8007170:	4603      	mov	r3, r0
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	b2db      	uxtb	r3, r3
}
 8007178:	4618      	mov	r0, r3
 800717a:	bd80      	pop	{r7, pc}

0800717c <nRF24_FlushTX>:
	reg = nRF24_ReadReg(nRF24_REG_RF_CH);
	nRF24_WriteReg(nRF24_REG_RF_CH, reg);
}

// Flush the TX FIFO
void nRF24_FlushTX(void) {
 800717c:	b580      	push	{r7, lr}
 800717e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_TX, nRF24_CMD_NOP);
 8007180:	21ff      	movs	r1, #255	; 0xff
 8007182:	20e1      	movs	r0, #225	; 0xe1
 8007184:	f7ff fd6c 	bl	8006c60 <nRF24_WriteReg>
}
 8007188:	bf00      	nop
 800718a:	bd80      	pop	{r7, pc}

0800718c <nRF24_FlushRX>:

// Flush the RX FIFO
void nRF24_FlushRX(void) {
 800718c:	b580      	push	{r7, lr}
 800718e:	af00      	add	r7, sp, #0
	nRF24_WriteReg(nRF24_CMD_FLUSH_RX, nRF24_CMD_NOP);
 8007190:	21ff      	movs	r1, #255	; 0xff
 8007192:	20e2      	movs	r0, #226	; 0xe2
 8007194:	f7ff fd64 	bl	8006c60 <nRF24_WriteReg>
}
 8007198:	bf00      	nop
 800719a:	bd80      	pop	{r7, pc}

0800719c <nRF24_ClearIRQFlags>:

// Clear any pending IRQ flags
void nRF24_ClearIRQFlags(void) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
	uint8_t reg;

	// Clear RX_DR, TX_DS and MAX_RT bits of the STATUS register
	reg  = nRF24_ReadReg(nRF24_REG_STATUS);
 80071a2:	2007      	movs	r0, #7
 80071a4:	f7ff fd3a 	bl	8006c1c <nRF24_ReadReg>
 80071a8:	4603      	mov	r3, r0
 80071aa:	71fb      	strb	r3, [r7, #7]
	reg |= nRF24_MASK_STATUS_IRQ;
 80071ac:	79fb      	ldrb	r3, [r7, #7]
 80071ae:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80071b2:	71fb      	strb	r3, [r7, #7]
	nRF24_WriteReg(nRF24_REG_STATUS, reg);
 80071b4:	79fb      	ldrb	r3, [r7, #7]
 80071b6:	4619      	mov	r1, r3
 80071b8:	2007      	movs	r0, #7
 80071ba:	f7ff fd51 	bl	8006c60 <nRF24_WriteReg>
}
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <nRF24_ReadPayload>:
//   pBuf - pointer to the buffer to store a payload data
//   length - pointer to variable to store a payload length
// return: one of nRF24_RX_xx values
//   nRF24_RX_PIPEX - packet has been received from the pipe number X
//   nRF24_RX_EMPTY - the RX FIFO is empty
nRF24_RXResult nRF24_ReadPayload(uint8_t *pBuf, uint8_t *length) {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
	uint8_t pipe;

	// Extract a payload pipe number from the STATUS register
	pipe = (nRF24_ReadReg(nRF24_REG_STATUS) & nRF24_MASK_RX_P_NO) >> 1;
 80071d2:	2007      	movs	r0, #7
 80071d4:	f7ff fd22 	bl	8006c1c <nRF24_ReadReg>
 80071d8:	4603      	mov	r3, r0
 80071da:	105b      	asrs	r3, r3, #1
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	f003 0307 	and.w	r3, r3, #7
 80071e2:	73fb      	strb	r3, [r7, #15]

	// RX FIFO empty?
	if (pipe < 6) {
 80071e4:	7bfb      	ldrb	r3, [r7, #15]
 80071e6:	2b05      	cmp	r3, #5
 80071e8:	d816      	bhi.n	8007218 <nRF24_ReadPayload+0x50>
		// Get payload length
		*length = nRF24_ReadReg(nRF24_RX_PW_PIPE[pipe]);
 80071ea:	7bfb      	ldrb	r3, [r7, #15]
 80071ec:	4a0e      	ldr	r2, [pc, #56]	; (8007228 <nRF24_ReadPayload+0x60>)
 80071ee:	5cd3      	ldrb	r3, [r2, r3]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff fd13 	bl	8006c1c <nRF24_ReadReg>
 80071f6:	4603      	mov	r3, r0
 80071f8:	461a      	mov	r2, r3
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	701a      	strb	r2, [r3, #0]

		// Read a payload from the RX FIFO
		if (*length) {
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d006      	beq.n	8007214 <nRF24_ReadPayload+0x4c>
			nRF24_ReadMBReg(nRF24_CMD_R_RX_PAYLOAD, pBuf, *length);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	461a      	mov	r2, r3
 800720c:	6879      	ldr	r1, [r7, #4]
 800720e:	2061      	movs	r0, #97	; 0x61
 8007210:	f7ff fd66 	bl	8006ce0 <nRF24_ReadMBReg>
		}

		return ((nRF24_RXResult)pipe);
 8007214:	7bfb      	ldrb	r3, [r7, #15]
 8007216:	e003      	b.n	8007220 <nRF24_ReadPayload+0x58>
	}

	// The RX FIFO is empty
	*length = 0;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2200      	movs	r2, #0
 800721c:	701a      	strb	r2, [r3, #0]

	return nRF24_RX_EMPTY;
 800721e:	23ff      	movs	r3, #255	; 0xff
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	08008290 	.word	0x08008290

0800722c <nRF24_GPIO_Init>:
SPI_HandleTypeDef hspi1;


// Configure the GPIO lines of the nRF24L01 transceiver
// note: IRQ pin must be configured separately
void nRF24_GPIO_Init(void) {
 800722c:	b580      	push	{r7, lr}
 800722e:	af00      	add	r7, sp, #0

    // Enable the nRF24L01 GPIO peripherals
	  /* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8007230:	4b1a      	ldr	r3, [pc, #104]	; (800729c <nRF24_GPIO_Init+0x70>)
 8007232:	4a1b      	ldr	r2, [pc, #108]	; (80072a0 <nRF24_GPIO_Init+0x74>)
 8007234:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8007236:	4b19      	ldr	r3, [pc, #100]	; (800729c <nRF24_GPIO_Init+0x70>)
 8007238:	f44f 7282 	mov.w	r2, #260	; 0x104
 800723c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800723e:	4b17      	ldr	r3, [pc, #92]	; (800729c <nRF24_GPIO_Init+0x70>)
 8007240:	2200      	movs	r2, #0
 8007242:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007244:	4b15      	ldr	r3, [pc, #84]	; (800729c <nRF24_GPIO_Init+0x70>)
 8007246:	2200      	movs	r2, #0
 8007248:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800724a:	4b14      	ldr	r3, [pc, #80]	; (800729c <nRF24_GPIO_Init+0x70>)
 800724c:	2200      	movs	r2, #0
 800724e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007250:	4b12      	ldr	r3, [pc, #72]	; (800729c <nRF24_GPIO_Init+0x70>)
 8007252:	2200      	movs	r2, #0
 8007254:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8007256:	4b11      	ldr	r3, [pc, #68]	; (800729c <nRF24_GPIO_Init+0x70>)
 8007258:	f44f 7200 	mov.w	r2, #512	; 0x200
 800725c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800725e:	4b0f      	ldr	r3, [pc, #60]	; (800729c <nRF24_GPIO_Init+0x70>)
 8007260:	2228      	movs	r2, #40	; 0x28
 8007262:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <nRF24_GPIO_Init+0x70>)
 8007266:	2200      	movs	r2, #0
 8007268:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800726a:	4b0c      	ldr	r3, [pc, #48]	; (800729c <nRF24_GPIO_Init+0x70>)
 800726c:	2200      	movs	r2, #0
 800726e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007270:	4b0a      	ldr	r3, [pc, #40]	; (800729c <nRF24_GPIO_Init+0x70>)
 8007272:	2200      	movs	r2, #0
 8007274:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8007276:	4b09      	ldr	r3, [pc, #36]	; (800729c <nRF24_GPIO_Init+0x70>)
 8007278:	220a      	movs	r2, #10
 800727a:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(&hspi1);
 800727c:	4807      	ldr	r0, [pc, #28]	; (800729c <nRF24_GPIO_Init+0x70>)
 800727e:	f7fb f975 	bl	800256c <HAL_SPI_Init>
    // Configure CSN pin
	nRF24_CSN_H();
 8007282:	2201      	movs	r2, #1
 8007284:	2110      	movs	r1, #16
 8007286:	4807      	ldr	r0, [pc, #28]	; (80072a4 <nRF24_GPIO_Init+0x78>)
 8007288:	f7f9 fc40 	bl	8000b0c <HAL_GPIO_WritePin>

	// Configure CE pin
	nRF24_CE_L();
 800728c:	2200      	movs	r2, #0
 800728e:	2108      	movs	r1, #8
 8007290:	4804      	ldr	r0, [pc, #16]	; (80072a4 <nRF24_GPIO_Init+0x78>)
 8007292:	f7f9 fc3b 	bl	8000b0c <HAL_GPIO_WritePin>
}
 8007296:	bf00      	nop
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20003f48 	.word	0x20003f48
 80072a0:	40013000 	.word	0x40013000
 80072a4:	40020000 	.word	0x40020000

080072a8 <nRF24_LL_RW>:

// Low level SPI transmit/receive function (hardware depended)
// input:
//   data - value to transmit via SPI
// return: value received from SPI
uint8_t nRF24_LL_RW(uint8_t data) {
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b086      	sub	sp, #24
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
	uint8_t  receiveData;
	HAL_StatusTypeDef result = HAL_SPI_TransmitReceive(&hspi1, &data, &receiveData, (uint16_t) 1, 1000);
 80072b2:	f107 020e 	add.w	r2, r7, #14
 80072b6:	1df9      	adds	r1, r7, #7
 80072b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80072bc:	9300      	str	r3, [sp, #0]
 80072be:	2301      	movs	r3, #1
 80072c0:	4804      	ldr	r0, [pc, #16]	; (80072d4 <nRF24_LL_RW+0x2c>)
 80072c2:	f7fb f9b6 	bl	8002632 <HAL_SPI_TransmitReceive>
 80072c6:	4603      	mov	r3, r0
 80072c8:	73fb      	strb	r3, [r7, #15]
	return receiveData;
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3710      	adds	r7, #16
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20003f48 	.word	0x20003f48

080072d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072de:	2300      	movs	r3, #0
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	4a25      	ldr	r2, [pc, #148]	; (8007378 <HAL_MspInit+0xa0>)
 80072e4:	4b24      	ldr	r3, [pc, #144]	; (8007378 <HAL_MspInit+0xa0>)
 80072e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072ec:	6453      	str	r3, [r2, #68]	; 0x44
 80072ee:	4b22      	ldr	r3, [pc, #136]	; (8007378 <HAL_MspInit+0xa0>)
 80072f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80072fa:	2300      	movs	r3, #0
 80072fc:	603b      	str	r3, [r7, #0]
 80072fe:	4a1e      	ldr	r2, [pc, #120]	; (8007378 <HAL_MspInit+0xa0>)
 8007300:	4b1d      	ldr	r3, [pc, #116]	; (8007378 <HAL_MspInit+0xa0>)
 8007302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007308:	6413      	str	r3, [r2, #64]	; 0x40
 800730a:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <HAL_MspInit+0xa0>)
 800730c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007312:	603b      	str	r3, [r7, #0]
 8007314:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007316:	2003      	movs	r0, #3
 8007318:	f7f9 fa18 	bl	800074c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800731c:	2200      	movs	r2, #0
 800731e:	2100      	movs	r1, #0
 8007320:	f06f 000b 	mvn.w	r0, #11
 8007324:	f7f9 fa1d 	bl	8000762 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8007328:	2200      	movs	r2, #0
 800732a:	2100      	movs	r1, #0
 800732c:	f06f 000a 	mvn.w	r0, #10
 8007330:	f7f9 fa17 	bl	8000762 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8007334:	2200      	movs	r2, #0
 8007336:	2100      	movs	r1, #0
 8007338:	f06f 0009 	mvn.w	r0, #9
 800733c:	f7f9 fa11 	bl	8000762 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8007340:	2200      	movs	r2, #0
 8007342:	2100      	movs	r1, #0
 8007344:	f06f 0004 	mvn.w	r0, #4
 8007348:	f7f9 fa0b 	bl	8000762 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800734c:	2200      	movs	r2, #0
 800734e:	2100      	movs	r1, #0
 8007350:	f06f 0003 	mvn.w	r0, #3
 8007354:	f7f9 fa05 	bl	8000762 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007358:	2200      	movs	r2, #0
 800735a:	210f      	movs	r1, #15
 800735c:	f06f 0001 	mvn.w	r0, #1
 8007360:	f7f9 f9ff 	bl	8000762 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8007364:	2200      	movs	r2, #0
 8007366:	210f      	movs	r1, #15
 8007368:	f04f 30ff 	mov.w	r0, #4294967295
 800736c:	f7f9 f9f9 	bl	8000762 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007370:	bf00      	nop
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	40023800 	.word	0x40023800

0800737c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a12      	ldr	r2, [pc, #72]	; (80073d4 <HAL_SPI_MspInit+0x58>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d11d      	bne.n	80073ca <HAL_SPI_MspInit+0x4e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800738e:	2300      	movs	r3, #0
 8007390:	60bb      	str	r3, [r7, #8]
 8007392:	4a11      	ldr	r2, [pc, #68]	; (80073d8 <HAL_SPI_MspInit+0x5c>)
 8007394:	4b10      	ldr	r3, [pc, #64]	; (80073d8 <HAL_SPI_MspInit+0x5c>)
 8007396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007398:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800739c:	6453      	str	r3, [r2, #68]	; 0x44
 800739e:	4b0e      	ldr	r3, [pc, #56]	; (80073d8 <HAL_SPI_MspInit+0x5c>)
 80073a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073a6:	60bb      	str	r3, [r7, #8]
 80073a8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80073aa:	23e0      	movs	r3, #224	; 0xe0
 80073ac:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ae:	2302      	movs	r3, #2
 80073b0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073b6:	2303      	movs	r3, #3
 80073b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80073ba:	2305      	movs	r3, #5
 80073bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073be:	f107 030c 	add.w	r3, r7, #12
 80073c2:	4619      	mov	r1, r3
 80073c4:	4805      	ldr	r0, [pc, #20]	; (80073dc <HAL_SPI_MspInit+0x60>)
 80073c6:	f7f9 fa1f 	bl	8000808 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80073ca:	bf00      	nop
 80073cc:	3720      	adds	r7, #32
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	40013000 	.word	0x40013000
 80073d8:	40023800 	.word	0x40023800
 80073dc:	40020000 	.word	0x40020000

080073e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b08c      	sub	sp, #48	; 0x30
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80073e8:	2300      	movs	r3, #0
 80073ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80073ec:	2300      	movs	r3, #0
 80073ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 80073f0:	2200      	movs	r2, #0
 80073f2:	6879      	ldr	r1, [r7, #4]
 80073f4:	2019      	movs	r0, #25
 80073f6:	f7f9 f9b4 	bl	8000762 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 80073fa:	2019      	movs	r0, #25
 80073fc:	f7f9 f9cd 	bl	800079a <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8007400:	2300      	movs	r3, #0
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	4a1e      	ldr	r2, [pc, #120]	; (8007480 <HAL_InitTick+0xa0>)
 8007406:	4b1e      	ldr	r3, [pc, #120]	; (8007480 <HAL_InitTick+0xa0>)
 8007408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800740e:	6453      	str	r3, [r2, #68]	; 0x44
 8007410:	4b1b      	ldr	r3, [pc, #108]	; (8007480 <HAL_InitTick+0xa0>)
 8007412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800741c:	f107 0210 	add.w	r2, r7, #16
 8007420:	f107 0314 	add.w	r3, r7, #20
 8007424:	4611      	mov	r1, r2
 8007426:	4618      	mov	r0, r3
 8007428:	f7fb f86e 	bl	8002508 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800742c:	f7fb f858 	bl	80024e0 <HAL_RCC_GetPCLK2Freq>
 8007430:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	4a13      	ldr	r2, [pc, #76]	; (8007484 <HAL_InitTick+0xa4>)
 8007436:	fba2 2303 	umull	r2, r3, r2, r3
 800743a:	0c9b      	lsrs	r3, r3, #18
 800743c:	3b01      	subs	r3, #1
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8007440:	4b11      	ldr	r3, [pc, #68]	; (8007488 <HAL_InitTick+0xa8>)
 8007442:	4a12      	ldr	r2, [pc, #72]	; (800748c <HAL_InitTick+0xac>)
 8007444:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8007446:	4b10      	ldr	r3, [pc, #64]	; (8007488 <HAL_InitTick+0xa8>)
 8007448:	f240 32e7 	movw	r2, #999	; 0x3e7
 800744c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 800744e:	4a0e      	ldr	r2, [pc, #56]	; (8007488 <HAL_InitTick+0xa8>)
 8007450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007452:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8007454:	4b0c      	ldr	r3, [pc, #48]	; (8007488 <HAL_InitTick+0xa8>)
 8007456:	2200      	movs	r2, #0
 8007458:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800745a:	4b0b      	ldr	r3, [pc, #44]	; (8007488 <HAL_InitTick+0xa8>)
 800745c:	2200      	movs	r2, #0
 800745e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8007460:	4809      	ldr	r0, [pc, #36]	; (8007488 <HAL_InitTick+0xa8>)
 8007462:	f7fb fb0c 	bl	8002a7e <HAL_TIM_Base_Init>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d104      	bne.n	8007476 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 800746c:	4806      	ldr	r0, [pc, #24]	; (8007488 <HAL_InitTick+0xa8>)
 800746e:	f7fb fb3b 	bl	8002ae8 <HAL_TIM_Base_Start_IT>
 8007472:	4603      	mov	r3, r0
 8007474:	e000      	b.n	8007478 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
}
 8007478:	4618      	mov	r0, r3
 800747a:	3730      	adds	r7, #48	; 0x30
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	40023800 	.word	0x40023800
 8007484:	431bde83 	.word	0x431bde83
 8007488:	20003fc0 	.word	0x20003fc0
 800748c:	40014400 	.word	0x40014400

08007490 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8007490:	b480      	push	{r7}
 8007492:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007494:	bf00      	nop
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800749e:	b480      	push	{r7}
 80074a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80074a2:	e7fe      	b.n	80074a2 <HardFault_Handler+0x4>

080074a4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80074a4:	b480      	push	{r7}
 80074a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80074a8:	e7fe      	b.n	80074a8 <MemManage_Handler+0x4>

080074aa <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80074aa:	b480      	push	{r7}
 80074ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80074ae:	e7fe      	b.n	80074ae <BusFault_Handler+0x4>

080074b0 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80074b0:	b480      	push	{r7}
 80074b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80074b4:	e7fe      	b.n	80074b4 <UsageFault_Handler+0x4>

080074b6 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80074b6:	b480      	push	{r7}
 80074b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80074ba:	bf00      	nop
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 80074c8:	f7fe f90e 	bl	80056e8 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074cc:	bf00      	nop
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80074d4:	4802      	ldr	r0, [pc, #8]	; (80074e0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80074d6:	f7fb fb22 	bl	8002b1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80074da:	bf00      	nop
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	20003fc0 	.word	0x20003fc0

080074e4 <OTG_FS_IRQHandler>:

/**
* @brief This function handles USB On The Go FS global interrupt.
*/
void OTG_FS_IRQHandler(void)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80074e8:	4802      	ldr	r0, [pc, #8]	; (80074f4 <OTG_FS_IRQHandler+0x10>)
 80074ea:	f7f9 fc63 	bl	8000db4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80074ee:	bf00      	nop
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	20005220 	.word	0x20005220

080074f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80074fc:	4a16      	ldr	r2, [pc, #88]	; (8007558 <SystemInit+0x60>)
 80074fe:	4b16      	ldr	r3, [pc, #88]	; (8007558 <SystemInit+0x60>)
 8007500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800750c:	4a13      	ldr	r2, [pc, #76]	; (800755c <SystemInit+0x64>)
 800750e:	4b13      	ldr	r3, [pc, #76]	; (800755c <SystemInit+0x64>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f043 0301 	orr.w	r3, r3, #1
 8007516:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007518:	4b10      	ldr	r3, [pc, #64]	; (800755c <SystemInit+0x64>)
 800751a:	2200      	movs	r2, #0
 800751c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800751e:	4a0f      	ldr	r2, [pc, #60]	; (800755c <SystemInit+0x64>)
 8007520:	4b0e      	ldr	r3, [pc, #56]	; (800755c <SystemInit+0x64>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800752c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800752e:	4b0b      	ldr	r3, [pc, #44]	; (800755c <SystemInit+0x64>)
 8007530:	4a0b      	ldr	r2, [pc, #44]	; (8007560 <SystemInit+0x68>)
 8007532:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007534:	4a09      	ldr	r2, [pc, #36]	; (800755c <SystemInit+0x64>)
 8007536:	4b09      	ldr	r3, [pc, #36]	; (800755c <SystemInit+0x64>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800753e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007540:	4b06      	ldr	r3, [pc, #24]	; (800755c <SystemInit+0x64>)
 8007542:	2200      	movs	r2, #0
 8007544:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007546:	4b04      	ldr	r3, [pc, #16]	; (8007558 <SystemInit+0x60>)
 8007548:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800754c:	609a      	str	r2, [r3, #8]
#endif
}
 800754e:	bf00      	nop
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr
 8007558:	e000ed00 	.word	0xe000ed00
 800755c:	40023800 	.word	0x40023800
 8007560:	24003010 	.word	0x24003010

08007564 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8007568:	2200      	movs	r2, #0
 800756a:	4908      	ldr	r1, [pc, #32]	; (800758c <MX_USB_DEVICE_Init+0x28>)
 800756c:	4808      	ldr	r0, [pc, #32]	; (8007590 <MX_USB_DEVICE_Init+0x2c>)
 800756e:	f7fd f902 	bl	8004776 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8007572:	4908      	ldr	r1, [pc, #32]	; (8007594 <MX_USB_DEVICE_Init+0x30>)
 8007574:	4806      	ldr	r0, [pc, #24]	; (8007590 <MX_USB_DEVICE_Init+0x2c>)
 8007576:	f7fd f929 	bl	80047cc <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800757a:	4907      	ldr	r1, [pc, #28]	; (8007598 <MX_USB_DEVICE_Init+0x34>)
 800757c:	4804      	ldr	r0, [pc, #16]	; (8007590 <MX_USB_DEVICE_Init+0x2c>)
 800757e:	f7fd f861 	bl	8004644 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8007582:	4803      	ldr	r0, [pc, #12]	; (8007590 <MX_USB_DEVICE_Init+0x2c>)
 8007584:	f7fd f93c 	bl	8004800 <USBD_Start>

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007588:	bf00      	nop
 800758a:	bd80      	pop	{r7, pc}
 800758c:	2000012c 	.word	0x2000012c
 8007590:	20003ffc 	.word	0x20003ffc
 8007594:	20000010 	.word	0x20000010
 8007598:	2000011c 	.word	0x2000011c

0800759c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80075a0:	2200      	movs	r2, #0
 80075a2:	4905      	ldr	r1, [pc, #20]	; (80075b8 <CDC_Init_FS+0x1c>)
 80075a4:	4805      	ldr	r0, [pc, #20]	; (80075bc <CDC_Init_FS+0x20>)
 80075a6:	f7fd f864 	bl	8004672 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80075aa:	4905      	ldr	r1, [pc, #20]	; (80075c0 <CDC_Init_FS+0x24>)
 80075ac:	4803      	ldr	r0, [pc, #12]	; (80075bc <CDC_Init_FS+0x20>)
 80075ae:	f7fd f87a 	bl	80046a6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80075b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20004a20 	.word	0x20004a20
 80075bc:	20003ffc 	.word	0x20003ffc
 80075c0:	20004220 	.word	0x20004220

080075c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80075c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	6039      	str	r1, [r7, #0]
 80075de:	71fb      	strb	r3, [r7, #7]
 80075e0:	4613      	mov	r3, r2
 80075e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80075e4:	79fb      	ldrb	r3, [r7, #7]
 80075e6:	2b23      	cmp	r3, #35	; 0x23
 80075e8:	d84a      	bhi.n	8007680 <CDC_Control_FS+0xac>
 80075ea:	a201      	add	r2, pc, #4	; (adr r2, 80075f0 <CDC_Control_FS+0x1c>)
 80075ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f0:	08007681 	.word	0x08007681
 80075f4:	08007681 	.word	0x08007681
 80075f8:	08007681 	.word	0x08007681
 80075fc:	08007681 	.word	0x08007681
 8007600:	08007681 	.word	0x08007681
 8007604:	08007681 	.word	0x08007681
 8007608:	08007681 	.word	0x08007681
 800760c:	08007681 	.word	0x08007681
 8007610:	08007681 	.word	0x08007681
 8007614:	08007681 	.word	0x08007681
 8007618:	08007681 	.word	0x08007681
 800761c:	08007681 	.word	0x08007681
 8007620:	08007681 	.word	0x08007681
 8007624:	08007681 	.word	0x08007681
 8007628:	08007681 	.word	0x08007681
 800762c:	08007681 	.word	0x08007681
 8007630:	08007681 	.word	0x08007681
 8007634:	08007681 	.word	0x08007681
 8007638:	08007681 	.word	0x08007681
 800763c:	08007681 	.word	0x08007681
 8007640:	08007681 	.word	0x08007681
 8007644:	08007681 	.word	0x08007681
 8007648:	08007681 	.word	0x08007681
 800764c:	08007681 	.word	0x08007681
 8007650:	08007681 	.word	0x08007681
 8007654:	08007681 	.word	0x08007681
 8007658:	08007681 	.word	0x08007681
 800765c:	08007681 	.word	0x08007681
 8007660:	08007681 	.word	0x08007681
 8007664:	08007681 	.word	0x08007681
 8007668:	08007681 	.word	0x08007681
 800766c:	08007681 	.word	0x08007681
 8007670:	08007681 	.word	0x08007681
 8007674:	08007681 	.word	0x08007681
 8007678:	08007681 	.word	0x08007681
 800767c:	08007681 	.word	0x08007681
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007680:	bf00      	nop
  }

  return (USBD_OK);
 8007682:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_Transmit_FS(Buf, *Len);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	b29b      	uxth	r3, r3
 80076a0:	4619      	mov	r1, r3
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 f80e 	bl	80076c4 <CDC_Transmit_FS>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076a8:	6879      	ldr	r1, [r7, #4]
 80076aa:	4805      	ldr	r0, [pc, #20]	; (80076c0 <CDC_Receive_FS+0x30>)
 80076ac:	f7fc fffb 	bl	80046a6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076b0:	4803      	ldr	r0, [pc, #12]	; (80076c0 <CDC_Receive_FS+0x30>)
 80076b2:	f7fd f836 	bl	8004722 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80076b6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3708      	adds	r7, #8
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	20003ffc 	.word	0x20003ffc

080076c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	460b      	mov	r3, r1
 80076ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80076d4:	4b0d      	ldr	r3, [pc, #52]	; (800770c <CDC_Transmit_FS+0x48>)
 80076d6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80076da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e00b      	b.n	8007702 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80076ea:	887b      	ldrh	r3, [r7, #2]
 80076ec:	461a      	mov	r2, r3
 80076ee:	6879      	ldr	r1, [r7, #4]
 80076f0:	4806      	ldr	r0, [pc, #24]	; (800770c <CDC_Transmit_FS+0x48>)
 80076f2:	f7fc ffbe 	bl	8004672 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80076f6:	4805      	ldr	r0, [pc, #20]	; (800770c <CDC_Transmit_FS+0x48>)
 80076f8:	f7fc ffe9 	bl	80046ce <USBD_CDC_TransmitPacket>
 80076fc:	4603      	mov	r3, r0
 80076fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007700:	7bfb      	ldrb	r3, [r7, #15]
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20003ffc 	.word	0x20003ffc

08007710 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b088      	sub	sp, #32
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(pcdHandle->Instance==USB_OTG_FS)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007720:	d12c      	bne.n	800777c <HAL_PCD_MspInit+0x6c>
  
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007722:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007726:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007728:	2302      	movs	r3, #2
 800772a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007730:	2303      	movs	r3, #3
 8007732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007734:	230a      	movs	r3, #10
 8007736:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007738:	f107 030c 	add.w	r3, r7, #12
 800773c:	4619      	mov	r1, r3
 800773e:	4811      	ldr	r0, [pc, #68]	; (8007784 <HAL_PCD_MspInit+0x74>)
 8007740:	f7f9 f862 	bl	8000808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007744:	4a10      	ldr	r2, [pc, #64]	; (8007788 <HAL_PCD_MspInit+0x78>)
 8007746:	4b10      	ldr	r3, [pc, #64]	; (8007788 <HAL_PCD_MspInit+0x78>)
 8007748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800774e:	6353      	str	r3, [r2, #52]	; 0x34
 8007750:	2300      	movs	r3, #0
 8007752:	60bb      	str	r3, [r7, #8]
 8007754:	4a0c      	ldr	r2, [pc, #48]	; (8007788 <HAL_PCD_MspInit+0x78>)
 8007756:	4b0c      	ldr	r3, [pc, #48]	; (8007788 <HAL_PCD_MspInit+0x78>)
 8007758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800775e:	6453      	str	r3, [r2, #68]	; 0x44
 8007760:	4b09      	ldr	r3, [pc, #36]	; (8007788 <HAL_PCD_MspInit+0x78>)
 8007762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007764:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007768:	60bb      	str	r3, [r7, #8]
 800776a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800776c:	2200      	movs	r2, #0
 800776e:	2105      	movs	r1, #5
 8007770:	2043      	movs	r0, #67	; 0x43
 8007772:	f7f8 fff6 	bl	8000762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007776:	2043      	movs	r0, #67	; 0x43
 8007778:	f7f9 f80f 	bl	800079a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800777c:	bf00      	nop
 800777e:	3720      	adds	r7, #32
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	40020000 	.word	0x40020000
 8007788:	40023800 	.word	0x40023800

0800778c <HAL_PCD_SetupStageCallback>:
  * @brief  Setup stage callback
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 23ec 	ldr.w	r2, [r3, #1004]	; 0x3ec
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f503 736f 	add.w	r3, r3, #956	; 0x3bc
 80077a0:	4619      	mov	r1, r3
 80077a2:	4610      	mov	r0, r2
 80077a4:	f7fd f875 	bl	8004892 <USBD_LL_SetupStage>
}
 80077a8:	bf00      	nop
 80077aa:	3708      	adds	r7, #8
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <HAL_PCD_DataOutStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b082      	sub	sp, #8
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	460b      	mov	r3, r1
 80077ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 80077c2:	78fa      	ldrb	r2, [r7, #3]
 80077c4:	6879      	ldr	r1, [r7, #4]
 80077c6:	4613      	mov	r3, r2
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	1a9b      	subs	r3, r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	440b      	add	r3, r1
 80077d0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	78fb      	ldrb	r3, [r7, #3]
 80077d8:	4619      	mov	r1, r3
 80077da:	f7fd f8a4 	bl	8004926 <USBD_LL_DataOutStage>
}
 80077de:	bf00      	nop
 80077e0:	3708      	adds	r7, #8
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <HAL_PCD_DataInStageCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b082      	sub	sp, #8
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	460b      	mov	r3, r1
 80077f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	; 0x3ec
 80077f8:	78fa      	ldrb	r2, [r7, #3]
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	4613      	mov	r3, r2
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	3344      	adds	r3, #68	; 0x44
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	4619      	mov	r1, r3
 800780e:	f7fd f8e5 	bl	80049dc <USBD_LL_DataInStage>
}
 8007812:	bf00      	nop
 8007814:	3708      	adds	r7, #8
 8007816:	46bd      	mov	sp, r7
 8007818:	bd80      	pop	{r7, pc}

0800781a <HAL_PCD_SOFCallback>:
  * @brief  SOF callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
 800781a:	b580      	push	{r7, lr}
 800781c:	b082      	sub	sp, #8
 800781e:	af00      	add	r7, sp, #0
 8007820:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007828:	4618      	mov	r0, r3
 800782a:	f7fd f9cb 	bl	8004bc4 <USBD_LL_SOF>
}
 800782e:	bf00      	nop
 8007830:	3708      	adds	r7, #8
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}

08007836 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8007836:	b580      	push	{r7, lr}
 8007838:	b084      	sub	sp, #16
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800783e:	2301      	movs	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]

  /* Set USB current speed. */
  switch (hpcd->Init.speed)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <HAL_PCD_ResetCallback+0x1a>
 800784a:	2b02      	cmp	r3, #2
 800784c:	d003      	beq.n	8007856 <HAL_PCD_ResetCallback+0x20>
 800784e:	e005      	b.n	800785c <HAL_PCD_ResetCallback+0x26>
  {
  case PCD_SPEED_HIGH:
    speed = USBD_SPEED_HIGH;
 8007850:	2300      	movs	r3, #0
 8007852:	73fb      	strb	r3, [r7, #15]
    break;
 8007854:	e005      	b.n	8007862 <HAL_PCD_ResetCallback+0x2c>
  case PCD_SPEED_FULL:
    speed = USBD_SPEED_FULL;
 8007856:	2301      	movs	r3, #1
 8007858:	73fb      	strb	r3, [r7, #15]
    break;
 800785a:	e002      	b.n	8007862 <HAL_PCD_ResetCallback+0x2c>
	
  default:
    speed = USBD_SPEED_FULL;
 800785c:	2301      	movs	r3, #1
 800785e:	73fb      	strb	r3, [r7, #15]
    break;    
 8007860:	bf00      	nop
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007868:	7bfa      	ldrb	r2, [r7, #15]
 800786a:	4611      	mov	r1, r2
 800786c:	4618      	mov	r0, r3
 800786e:	f7fd f973 	bl	8004b58 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007878:	4618      	mov	r0, r3
 800787a:	f7fd f93e 	bl	8004afa <USBD_LL_Reset>
}
 800787e:	bf00      	nop
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007896:	4618      	mov	r0, r3
 8007898:	f7fd f96e 	bl	8004b78 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078a4:	461a      	mov	r2, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f043 0301 	orr.w	r3, r3, #1
 80078b4:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d005      	beq.n	80078ca <HAL_PCD_SuspendCallback+0x42>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80078be:	4a05      	ldr	r2, [pc, #20]	; (80078d4 <HAL_PCD_SuspendCallback+0x4c>)
 80078c0:	4b04      	ldr	r3, [pc, #16]	; (80078d4 <HAL_PCD_SuspendCallback+0x4c>)
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f043 0306 	orr.w	r3, r3, #6
 80078c8:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	e000ed00 	.word	0xe000ed00

080078d8 <HAL_PCD_ResumeCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fd f95b 	bl	8004ba2 <USBD_LL_Resume>
}
 80078ec:	bf00      	nop
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <HAL_PCD_ISOOUTIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b082      	sub	sp, #8
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007906:	78fa      	ldrb	r2, [r7, #3]
 8007908:	4611      	mov	r1, r2
 800790a:	4618      	mov	r0, r3
 800790c:	f7fd f981 	bl	8004c12 <USBD_LL_IsoOUTIncomplete>
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_PCD_ISOINIncompleteCallback>:
  * @param  hpcd: PCD handle
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	460b      	mov	r3, r1
 8007922:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800792a:	78fa      	ldrb	r2, [r7, #3]
 800792c:	4611      	mov	r1, r2
 800792e:	4618      	mov	r0, r3
 8007930:	f7fd f962 	bl	8004bf8 <USBD_LL_IsoINIncomplete>
}
 8007934:	bf00      	nop
 8007936:	3708      	adds	r7, #8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_PCD_ConnectCallback>:
  * @brief  Connect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 800794a:	4618      	mov	r0, r3
 800794c:	f7fd f96e 	bl	8004c2c <USBD_LL_DevConnected>
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_PCD_DisconnectCallback>:
  * @brief  Disconnect callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	; 0x3ec
 8007966:	4618      	mov	r0, r3
 8007968:	f7fd f96b 	bl	8004c42 <USBD_LL_DevDisconnected>
}
 800796c:	bf00      	nop
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}

08007974 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d142      	bne.n	8007a0a <USBD_LL_Init+0x96>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007984:	4a23      	ldr	r2, [pc, #140]	; (8007a14 <USBD_LL_Init+0xa0>)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8c2 33ec 	str.w	r3, [r2, #1004]	; 0x3ec
  pdev->pData = &hpcd_USB_OTG_FS;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	4a21      	ldr	r2, [pc, #132]	; (8007a14 <USBD_LL_Init+0xa0>)
 8007990:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007994:	4b1f      	ldr	r3, [pc, #124]	; (8007a14 <USBD_LL_Init+0xa0>)
 8007996:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800799a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800799c:	4b1d      	ldr	r3, [pc, #116]	; (8007a14 <USBD_LL_Init+0xa0>)
 800799e:	2204      	movs	r2, #4
 80079a0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079a2:	4b1c      	ldr	r3, [pc, #112]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079a4:	2202      	movs	r2, #2
 80079a6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079a8:	4b1a      	ldr	r3, [pc, #104]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 80079ae:	4b19      	ldr	r3, [pc, #100]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	615a      	str	r2, [r3, #20]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079b4:	4b17      	ldr	r3, [pc, #92]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079b6:	2202      	movs	r2, #2
 80079b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079ba:	4b16      	ldr	r3, [pc, #88]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079bc:	2200      	movs	r2, #0
 80079be:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80079c0:	4b14      	ldr	r3, [pc, #80]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079c2:	2200      	movs	r2, #0
 80079c4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80079c6:	4b13      	ldr	r3, [pc, #76]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079c8:	2200      	movs	r2, #0
 80079ca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80079cc:	4b11      	ldr	r3, [pc, #68]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80079d2:	4b10      	ldr	r3, [pc, #64]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079d4:	2200      	movs	r2, #0
 80079d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80079d8:	480e      	ldr	r0, [pc, #56]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079da:	f7f9 f8c2 	bl	8000b62 <HAL_PCD_Init>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d004      	beq.n	80079ee <USBD_LL_Init+0x7a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80079e4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80079e8:	480b      	ldr	r0, [pc, #44]	; (8007a18 <USBD_LL_Init+0xa4>)
 80079ea:	f7ff f911 	bl	8006c10 <_Error_Handler>
  }

  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80079ee:	2180      	movs	r1, #128	; 0x80
 80079f0:	4808      	ldr	r0, [pc, #32]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079f2:	f7fa f95b 	bl	8001cac <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80079f6:	2240      	movs	r2, #64	; 0x40
 80079f8:	2100      	movs	r1, #0
 80079fa:	4806      	ldr	r0, [pc, #24]	; (8007a14 <USBD_LL_Init+0xa0>)
 80079fc:	f7fa f90b 	bl	8001c16 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a00:	2280      	movs	r2, #128	; 0x80
 8007a02:	2101      	movs	r1, #1
 8007a04:	4803      	ldr	r0, [pc, #12]	; (8007a14 <USBD_LL_Init+0xa0>)
 8007a06:	f7fa f906 	bl	8001c16 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3708      	adds	r7, #8
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20005220 	.word	0x20005220
 8007a18:	08008220 	.word	0x08008220

08007a1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a24:	2300      	movs	r3, #0
 8007a26:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	73fb      	strb	r3, [r7, #15]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7f9 f99c 	bl	8000d70 <HAL_PCD_Start>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8007a3c:	7bbb      	ldrb	r3, [r7, #14]
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d816      	bhi.n	8007a70 <USBD_LL_Start+0x54>
 8007a42:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <USBD_LL_Start+0x2c>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007a59 	.word	0x08007a59
 8007a4c:	08007a5f 	.word	0x08007a5f
 8007a50:	08007a65 	.word	0x08007a65
 8007a54:	08007a6b 	.word	0x08007a6b
    case HAL_OK :
      usb_status = USBD_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a5c:	e00b      	b.n	8007a76 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a5e:	2302      	movs	r3, #2
 8007a60:	73fb      	strb	r3, [r7, #15]
    break;
 8007a62:	e008      	b.n	8007a76 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a64:	2301      	movs	r3, #1
 8007a66:	73fb      	strb	r3, [r7, #15]
    break;
 8007a68:	e005      	b.n	8007a76 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a6a:	2302      	movs	r3, #2
 8007a6c:	73fb      	strb	r3, [r7, #15]
    break;
 8007a6e:	e002      	b.n	8007a76 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8007a70:	2302      	movs	r3, #2
 8007a72:	73fb      	strb	r3, [r7, #15]
    break;
 8007a74:	bf00      	nop
  }
  return usb_status;
 8007a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3710      	adds	r7, #16
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	4608      	mov	r0, r1
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	4603      	mov	r3, r0
 8007a90:	70fb      	strb	r3, [r7, #3]
 8007a92:	460b      	mov	r3, r1
 8007a94:	70bb      	strb	r3, [r7, #2]
 8007a96:	4613      	mov	r3, r2
 8007a98:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007aa8:	78bb      	ldrb	r3, [r7, #2]
 8007aaa:	883a      	ldrh	r2, [r7, #0]
 8007aac:	78f9      	ldrb	r1, [r7, #3]
 8007aae:	f7f9 fe2c 	bl	800170a <HAL_PCD_EP_Open>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007ab6:	7bbb      	ldrb	r3, [r7, #14]
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d817      	bhi.n	8007aec <USBD_LL_OpenEP+0x6c>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <USBD_LL_OpenEP+0x44>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007ad5 	.word	0x08007ad5
 8007ac8:	08007adb 	.word	0x08007adb
 8007acc:	08007ae1 	.word	0x08007ae1
 8007ad0:	08007ae7 	.word	0x08007ae7
    case HAL_OK :
      usb_status = USBD_OK;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ad8:	e00b      	b.n	8007af2 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ada:	2302      	movs	r3, #2
 8007adc:	73fb      	strb	r3, [r7, #15]
    break;
 8007ade:	e008      	b.n	8007af2 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	73fb      	strb	r3, [r7, #15]
    break;
 8007ae4:	e005      	b.n	8007af2 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007ae6:	2302      	movs	r3, #2
 8007ae8:	73fb      	strb	r3, [r7, #15]
    break;
 8007aea:	e002      	b.n	8007af2 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007aec:	2302      	movs	r3, #2
 8007aee:	73fb      	strb	r3, [r7, #15]
    break;
 8007af0:	bf00      	nop
  }
  return usb_status;
 8007af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	3710      	adds	r7, #16
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bd80      	pop	{r7, pc}

08007afc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007b16:	78fa      	ldrb	r2, [r7, #3]
 8007b18:	4611      	mov	r1, r2
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7f9 fe5d 	bl	80017da <HAL_PCD_EP_Close>
 8007b20:	4603      	mov	r3, r0
 8007b22:	73bb      	strb	r3, [r7, #14]
      
  switch (hal_status) {
 8007b24:	7bbb      	ldrb	r3, [r7, #14]
 8007b26:	2b03      	cmp	r3, #3
 8007b28:	d816      	bhi.n	8007b58 <USBD_LL_CloseEP+0x5c>
 8007b2a:	a201      	add	r2, pc, #4	; (adr r2, 8007b30 <USBD_LL_CloseEP+0x34>)
 8007b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b30:	08007b41 	.word	0x08007b41
 8007b34:	08007b47 	.word	0x08007b47
 8007b38:	08007b4d 	.word	0x08007b4d
 8007b3c:	08007b53 	.word	0x08007b53
    case HAL_OK :
      usb_status = USBD_OK;
 8007b40:	2300      	movs	r3, #0
 8007b42:	73fb      	strb	r3, [r7, #15]
    break;
 8007b44:	e00b      	b.n	8007b5e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b46:	2302      	movs	r3, #2
 8007b48:	73fb      	strb	r3, [r7, #15]
    break;
 8007b4a:	e008      	b.n	8007b5e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b50:	e005      	b.n	8007b5e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b52:	2302      	movs	r3, #2
 8007b54:	73fb      	strb	r3, [r7, #15]
    break;
 8007b56:	e002      	b.n	8007b5e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	73fb      	strb	r3, [r7, #15]
    break;
 8007b5c:	bf00      	nop
  }
  return usb_status;  
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b084      	sub	sp, #16
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
 8007b70:	460b      	mov	r3, r1
 8007b72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007b82:	78fa      	ldrb	r2, [r7, #3]
 8007b84:	4611      	mov	r1, r2
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7f9 ff1d 	bl	80019c6 <HAL_PCD_EP_SetStall>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b03      	cmp	r3, #3
 8007b94:	d816      	bhi.n	8007bc4 <USBD_LL_StallEP+0x5c>
 8007b96:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <USBD_LL_StallEP+0x34>)
 8007b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9c:	08007bad 	.word	0x08007bad
 8007ba0:	08007bb3 	.word	0x08007bb3
 8007ba4:	08007bb9 	.word	0x08007bb9
 8007ba8:	08007bbf 	.word	0x08007bbf
    case HAL_OK :
      usb_status = USBD_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb0:	e00b      	b.n	8007bca <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	73fb      	strb	r3, [r7, #15]
    break;
 8007bb6:	e008      	b.n	8007bca <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	73fb      	strb	r3, [r7, #15]
    break;
 8007bbc:	e005      	b.n	8007bca <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007bbe:	2302      	movs	r3, #2
 8007bc0:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc2:	e002      	b.n	8007bca <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007bc4:	2302      	movs	r3, #2
 8007bc6:	73fb      	strb	r3, [r7, #15]
    break;
 8007bc8:	bf00      	nop
  }
  return usb_status;  
 8007bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3710      	adds	r7, #16
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	460b      	mov	r3, r1
 8007bde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007be4:	2300      	movs	r3, #0
 8007be6:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007bee:	78fa      	ldrb	r2, [r7, #3]
 8007bf0:	4611      	mov	r1, r2
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7f9 ff42 	bl	8001a7c <HAL_PCD_EP_ClrStall>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8007bfc:	7bbb      	ldrb	r3, [r7, #14]
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d816      	bhi.n	8007c30 <USBD_LL_ClearStallEP+0x5c>
 8007c02:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <USBD_LL_ClearStallEP+0x34>)
 8007c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c08:	08007c19 	.word	0x08007c19
 8007c0c:	08007c1f 	.word	0x08007c1f
 8007c10:	08007c25 	.word	0x08007c25
 8007c14:	08007c2b 	.word	0x08007c2b
    case HAL_OK :
      usb_status = USBD_OK;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007c1c:	e00b      	b.n	8007c36 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007c1e:	2302      	movs	r3, #2
 8007c20:	73fb      	strb	r3, [r7, #15]
    break;
 8007c22:	e008      	b.n	8007c36 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007c24:	2301      	movs	r3, #1
 8007c26:	73fb      	strb	r3, [r7, #15]
    break;
 8007c28:	e005      	b.n	8007c36 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007c2a:	2302      	movs	r3, #2
 8007c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007c2e:	e002      	b.n	8007c36 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007c30:	2302      	movs	r3, #2
 8007c32:	73fb      	strb	r3, [r7, #15]
    break;
 8007c34:	bf00      	nop
  }
  return usb_status; 
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3710      	adds	r7, #16
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007c52:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8007c54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	da0b      	bge.n	8007c74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8007c5c:	78fb      	ldrb	r3, [r7, #3]
 8007c5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c62:	68f9      	ldr	r1, [r7, #12]
 8007c64:	4613      	mov	r3, r2
 8007c66:	00db      	lsls	r3, r3, #3
 8007c68:	1a9b      	subs	r3, r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	333a      	adds	r3, #58	; 0x3a
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	e00b      	b.n	8007c8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8007c74:	78fb      	ldrb	r3, [r7, #3]
 8007c76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c7a:	68f9      	ldr	r1, [r7, #12]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	1a9b      	subs	r3, r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	440b      	add	r3, r1
 8007c86:	f503 73fd 	add.w	r3, r3, #506	; 0x1fa
 8007c8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3714      	adds	r7, #20
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	460b      	mov	r3, r1
 8007ca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	73fb      	strb	r3, [r7, #15]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007cb2:	78fa      	ldrb	r2, [r7, #3]
 8007cb4:	4611      	mov	r1, r2
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7f9 fd06 	bl	80016c8 <HAL_PCD_SetAddress>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	73bb      	strb	r3, [r7, #14]
     
  switch (hal_status) {
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d816      	bhi.n	8007cf4 <USBD_LL_SetUSBAddress+0x5c>
 8007cc6:	a201      	add	r2, pc, #4	; (adr r2, 8007ccc <USBD_LL_SetUSBAddress+0x34>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007cdd 	.word	0x08007cdd
 8007cd0:	08007ce3 	.word	0x08007ce3
 8007cd4:	08007ce9 	.word	0x08007ce9
 8007cd8:	08007cef 	.word	0x08007cef
    case HAL_OK :
      usb_status = USBD_OK;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce0:	e00b      	b.n	8007cfa <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	73fb      	strb	r3, [r7, #15]
    break;
 8007ce6:	e008      	b.n	8007cfa <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ce8:	2301      	movs	r3, #1
 8007cea:	73fb      	strb	r3, [r7, #15]
    break;
 8007cec:	e005      	b.n	8007cfa <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007cee:	2302      	movs	r3, #2
 8007cf0:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf2:	e002      	b.n	8007cfa <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8007cf8:	bf00      	nop
  }
  return usb_status;  
 8007cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3710      	adds	r7, #16
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b086      	sub	sp, #24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	607a      	str	r2, [r7, #4]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	460b      	mov	r3, r1
 8007d12:	72fb      	strb	r3, [r7, #11]
 8007d14:	4613      	mov	r3, r2
 8007d16:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007d26:	893b      	ldrh	r3, [r7, #8]
 8007d28:	7af9      	ldrb	r1, [r7, #11]
 8007d2a:	687a      	ldr	r2, [r7, #4]
 8007d2c:	f7f9 fe02 	bl	8001934 <HAL_PCD_EP_Transmit>
 8007d30:	4603      	mov	r3, r0
 8007d32:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007d34:	7dbb      	ldrb	r3, [r7, #22]
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d816      	bhi.n	8007d68 <USBD_LL_Transmit+0x64>
 8007d3a:	a201      	add	r2, pc, #4	; (adr r2, 8007d40 <USBD_LL_Transmit+0x3c>)
 8007d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d40:	08007d51 	.word	0x08007d51
 8007d44:	08007d57 	.word	0x08007d57
 8007d48:	08007d5d 	.word	0x08007d5d
 8007d4c:	08007d63 	.word	0x08007d63
    case HAL_OK :
      usb_status = USBD_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	75fb      	strb	r3, [r7, #23]
    break;
 8007d54:	e00b      	b.n	8007d6e <USBD_LL_Transmit+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d56:	2302      	movs	r3, #2
 8007d58:	75fb      	strb	r3, [r7, #23]
    break;
 8007d5a:	e008      	b.n	8007d6e <USBD_LL_Transmit+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	75fb      	strb	r3, [r7, #23]
    break;
 8007d60:	e005      	b.n	8007d6e <USBD_LL_Transmit+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d62:	2302      	movs	r3, #2
 8007d64:	75fb      	strb	r3, [r7, #23]
    break;
 8007d66:	e002      	b.n	8007d6e <USBD_LL_Transmit+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007d68:	2302      	movs	r3, #2
 8007d6a:	75fb      	strb	r3, [r7, #23]
    break;
 8007d6c:	bf00      	nop
  }
  return usb_status;    
 8007d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	3718      	adds	r7, #24
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	60f8      	str	r0, [r7, #12]
 8007d80:	607a      	str	r2, [r7, #4]
 8007d82:	461a      	mov	r2, r3
 8007d84:	460b      	mov	r3, r1
 8007d86:	72fb      	strb	r3, [r7, #11]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d90:	2300      	movs	r3, #0
 8007d92:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 0220 	ldr.w	r0, [r3, #544]	; 0x220
 8007d9a:	893b      	ldrh	r3, [r7, #8]
 8007d9c:	7af9      	ldrb	r1, [r7, #11]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	f7f9 fd65 	bl	800186e <HAL_PCD_EP_Receive>
 8007da4:	4603      	mov	r3, r0
 8007da6:	75bb      	strb	r3, [r7, #22]
     
  switch (hal_status) {
 8007da8:	7dbb      	ldrb	r3, [r7, #22]
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d816      	bhi.n	8007ddc <USBD_LL_PrepareReceive+0x64>
 8007dae:	a201      	add	r2, pc, #4	; (adr r2, 8007db4 <USBD_LL_PrepareReceive+0x3c>)
 8007db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007db4:	08007dc5 	.word	0x08007dc5
 8007db8:	08007dcb 	.word	0x08007dcb
 8007dbc:	08007dd1 	.word	0x08007dd1
 8007dc0:	08007dd7 	.word	0x08007dd7
    case HAL_OK :
      usb_status = USBD_OK;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	75fb      	strb	r3, [r7, #23]
    break;
 8007dc8:	e00b      	b.n	8007de2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007dca:	2302      	movs	r3, #2
 8007dcc:	75fb      	strb	r3, [r7, #23]
    break;
 8007dce:	e008      	b.n	8007de2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	75fb      	strb	r3, [r7, #23]
    break;
 8007dd4:	e005      	b.n	8007de2 <USBD_LL_PrepareReceive+0x6a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	75fb      	strb	r3, [r7, #23]
    break;
 8007dda:	e002      	b.n	8007de2 <USBD_LL_PrepareReceive+0x6a>
    default :
      usb_status = USBD_FAIL;
 8007ddc:	2302      	movs	r3, #2
 8007dde:	75fb      	strb	r3, [r7, #23]
    break;
 8007de0:	bf00      	nop
  }
  return usb_status; 
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007dfe:	78fa      	ldrb	r2, [r7, #3]
 8007e00:	4611      	mov	r1, r2
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7f9 fd7d 	bl	8001902 <HAL_PCD_EP_GetRxCount>
 8007e08:	4603      	mov	r3, r0
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3708      	adds	r7, #8
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
	...

08007e14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	6039      	str	r1, [r7, #0]
 8007e1e:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_FS_DeviceDesc);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2212      	movs	r2, #18
 8007e24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007e26:	4b03      	ldr	r3, [pc, #12]	; (8007e34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	370c      	adds	r7, #12
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	20000148 	.word	0x20000148

08007e38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b083      	sub	sp, #12
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	4603      	mov	r3, r0
 8007e40:	6039      	str	r1, [r7, #0]
 8007e42:	71fb      	strb	r3, [r7, #7]
  *length = sizeof(USBD_LangIDDesc);
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2204      	movs	r2, #4
 8007e48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007e4a:	4b03      	ldr	r3, [pc, #12]	; (8007e58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr
 8007e58:	2000015c 	.word	0x2000015c

08007e5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	4603      	mov	r3, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e68:	79fb      	ldrb	r3, [r7, #7]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d105      	bne.n	8007e7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	4907      	ldr	r1, [pc, #28]	; (8007e90 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e72:	4808      	ldr	r0, [pc, #32]	; (8007e94 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e74:	f7fd faff 	bl	8005476 <USBD_GetString>
 8007e78:	e004      	b.n	8007e84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	4904      	ldr	r1, [pc, #16]	; (8007e90 <USBD_FS_ProductStrDescriptor+0x34>)
 8007e7e:	4805      	ldr	r0, [pc, #20]	; (8007e94 <USBD_FS_ProductStrDescriptor+0x38>)
 8007e80:	f7fd faf9 	bl	8005476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e84:	4b02      	ldr	r3, [pc, #8]	; (8007e90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20005610 	.word	0x20005610
 8007e94:	08008234 	.word	0x08008234

08007e98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	6039      	str	r1, [r7, #0]
 8007ea2:	71fb      	strb	r3, [r7, #7]
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007ea4:	683a      	ldr	r2, [r7, #0]
 8007ea6:	4904      	ldr	r1, [pc, #16]	; (8007eb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007ea8:	4804      	ldr	r0, [pc, #16]	; (8007ebc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007eaa:	f7fd fae4 	bl	8005476 <USBD_GetString>
  return USBD_StrDesc;
 8007eae:	4b02      	ldr	r3, [pc, #8]	; (8007eb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3708      	adds	r7, #8
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20005610 	.word	0x20005610
 8007ebc:	0800824c 	.word	0x0800824c

08007ec0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007ecc:	79fb      	ldrb	r3, [r7, #7]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d105      	bne.n	8007ede <USBD_FS_SerialStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8007ed2:	683a      	ldr	r2, [r7, #0]
 8007ed4:	4907      	ldr	r1, [pc, #28]	; (8007ef4 <USBD_FS_SerialStrDescriptor+0x34>)
 8007ed6:	4808      	ldr	r0, [pc, #32]	; (8007ef8 <USBD_FS_SerialStrDescriptor+0x38>)
 8007ed8:	f7fd facd 	bl	8005476 <USBD_GetString>
 8007edc:	e004      	b.n	8007ee8 <USBD_FS_SerialStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8007ede:	683a      	ldr	r2, [r7, #0]
 8007ee0:	4904      	ldr	r1, [pc, #16]	; (8007ef4 <USBD_FS_SerialStrDescriptor+0x34>)
 8007ee2:	4805      	ldr	r0, [pc, #20]	; (8007ef8 <USBD_FS_SerialStrDescriptor+0x38>)
 8007ee4:	f7fd fac7 	bl	8005476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ee8:	4b02      	ldr	r3, [pc, #8]	; (8007ef4 <USBD_FS_SerialStrDescriptor+0x34>)
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20005610 	.word	0x20005610
 8007ef8:	08008260 	.word	0x08008260

08007efc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	4603      	mov	r3, r0
 8007f04:	6039      	str	r1, [r7, #0]
 8007f06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007f08:	79fb      	ldrb	r3, [r7, #7]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d105      	bne.n	8007f1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	4907      	ldr	r1, [pc, #28]	; (8007f30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f12:	4808      	ldr	r0, [pc, #32]	; (8007f34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f14:	f7fd faaf 	bl	8005476 <USBD_GetString>
 8007f18:	e004      	b.n	8007f24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	4904      	ldr	r1, [pc, #16]	; (8007f30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007f1e:	4805      	ldr	r0, [pc, #20]	; (8007f34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007f20:	f7fd faa9 	bl	8005476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f24:	4b02      	ldr	r3, [pc, #8]	; (8007f30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3708      	adds	r7, #8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20005610 	.word	0x20005610
 8007f34:	08008270 	.word	0x08008270

08007f38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	6039      	str	r1, [r7, #0]
 8007f42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d105      	bne.n	8007f56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	4907      	ldr	r1, [pc, #28]	; (8007f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f4e:	4808      	ldr	r0, [pc, #32]	; (8007f70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f50:	f7fd fa91 	bl	8005476 <USBD_GetString>
 8007f54:	e004      	b.n	8007f60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007f56:	683a      	ldr	r2, [r7, #0]
 8007f58:	4904      	ldr	r1, [pc, #16]	; (8007f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007f5a:	4805      	ldr	r0, [pc, #20]	; (8007f70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007f5c:	f7fd fa8b 	bl	8005476 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f60:	4b02      	ldr	r3, [pc, #8]	; (8007f6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3708      	adds	r7, #8
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	20005610 	.word	0x20005610
 8007f70:	0800827c 	.word	0x0800827c

08007f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007fac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007f78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007f7a:	e003      	b.n	8007f84 <LoopCopyDataInit>

08007f7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007f7c:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007f7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007f80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007f82:	3104      	adds	r1, #4

08007f84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007f84:	480b      	ldr	r0, [pc, #44]	; (8007fb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007f88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007f8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007f8c:	d3f6      	bcc.n	8007f7c <CopyDataInit>
  ldr  r2, =_sbss
 8007f8e:	4a0b      	ldr	r2, [pc, #44]	; (8007fbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007f90:	e002      	b.n	8007f98 <LoopFillZerobss>

08007f92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007f92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007f94:	f842 3b04 	str.w	r3, [r2], #4

08007f98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007f98:	4b09      	ldr	r3, [pc, #36]	; (8007fc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007f9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007f9c:	d3f9      	bcc.n	8007f92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007f9e:	f7ff faab 	bl	80074f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007fa2:	f000 f811 	bl	8007fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007fa6:	f7fe fcbd 	bl	8006924 <main>
  bx  lr    
 8007faa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007fac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8007fb0:	080082c8 	.word	0x080082c8
  ldr  r0, =_sdata
 8007fb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007fb8:	200001c4 	.word	0x200001c4
  ldr  r2, =_sbss
 8007fbc:	200001c4 	.word	0x200001c4
  ldr  r3, = _ebss
 8007fc0:	20005814 	.word	0x20005814

08007fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007fc4:	e7fe      	b.n	8007fc4 <ADC_IRQHandler>
	...

08007fc8 <__libc_init_array>:
 8007fc8:	b570      	push	{r4, r5, r6, lr}
 8007fca:	4e0d      	ldr	r6, [pc, #52]	; (8008000 <__libc_init_array+0x38>)
 8007fcc:	4c0d      	ldr	r4, [pc, #52]	; (8008004 <__libc_init_array+0x3c>)
 8007fce:	1ba4      	subs	r4, r4, r6
 8007fd0:	10a4      	asrs	r4, r4, #2
 8007fd2:	2500      	movs	r5, #0
 8007fd4:	42a5      	cmp	r5, r4
 8007fd6:	d109      	bne.n	8007fec <__libc_init_array+0x24>
 8007fd8:	4e0b      	ldr	r6, [pc, #44]	; (8008008 <__libc_init_array+0x40>)
 8007fda:	4c0c      	ldr	r4, [pc, #48]	; (800800c <__libc_init_array+0x44>)
 8007fdc:	f000 f8f4 	bl	80081c8 <_init>
 8007fe0:	1ba4      	subs	r4, r4, r6
 8007fe2:	10a4      	asrs	r4, r4, #2
 8007fe4:	2500      	movs	r5, #0
 8007fe6:	42a5      	cmp	r5, r4
 8007fe8:	d105      	bne.n	8007ff6 <__libc_init_array+0x2e>
 8007fea:	bd70      	pop	{r4, r5, r6, pc}
 8007fec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ff0:	4798      	blx	r3
 8007ff2:	3501      	adds	r5, #1
 8007ff4:	e7ee      	b.n	8007fd4 <__libc_init_array+0xc>
 8007ff6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ffa:	4798      	blx	r3
 8007ffc:	3501      	adds	r5, #1
 8007ffe:	e7f2      	b.n	8007fe6 <__libc_init_array+0x1e>
 8008000:	080082c0 	.word	0x080082c0
 8008004:	080082c0 	.word	0x080082c0
 8008008:	080082c0 	.word	0x080082c0
 800800c:	080082c4 	.word	0x080082c4

08008010 <malloc>:
 8008010:	4b02      	ldr	r3, [pc, #8]	; (800801c <malloc+0xc>)
 8008012:	4601      	mov	r1, r0
 8008014:	6818      	ldr	r0, [r3, #0]
 8008016:	f000 b859 	b.w	80080cc <_malloc_r>
 800801a:	bf00      	nop
 800801c:	20000160 	.word	0x20000160

08008020 <free>:
 8008020:	4b02      	ldr	r3, [pc, #8]	; (800802c <free+0xc>)
 8008022:	4601      	mov	r1, r0
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	f000 b803 	b.w	8008030 <_free_r>
 800802a:	bf00      	nop
 800802c:	20000160 	.word	0x20000160

08008030 <_free_r>:
 8008030:	b538      	push	{r3, r4, r5, lr}
 8008032:	4605      	mov	r5, r0
 8008034:	2900      	cmp	r1, #0
 8008036:	d045      	beq.n	80080c4 <_free_r+0x94>
 8008038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800803c:	1f0c      	subs	r4, r1, #4
 800803e:	2b00      	cmp	r3, #0
 8008040:	bfb8      	it	lt
 8008042:	18e4      	addlt	r4, r4, r3
 8008044:	f000 f8b0 	bl	80081a8 <__malloc_lock>
 8008048:	4a1f      	ldr	r2, [pc, #124]	; (80080c8 <_free_r+0x98>)
 800804a:	6813      	ldr	r3, [r2, #0]
 800804c:	4610      	mov	r0, r2
 800804e:	b933      	cbnz	r3, 800805e <_free_r+0x2e>
 8008050:	6063      	str	r3, [r4, #4]
 8008052:	6014      	str	r4, [r2, #0]
 8008054:	4628      	mov	r0, r5
 8008056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800805a:	f000 b8a6 	b.w	80081aa <__malloc_unlock>
 800805e:	42a3      	cmp	r3, r4
 8008060:	d90c      	bls.n	800807c <_free_r+0x4c>
 8008062:	6821      	ldr	r1, [r4, #0]
 8008064:	1862      	adds	r2, r4, r1
 8008066:	4293      	cmp	r3, r2
 8008068:	bf04      	itt	eq
 800806a:	681a      	ldreq	r2, [r3, #0]
 800806c:	685b      	ldreq	r3, [r3, #4]
 800806e:	6063      	str	r3, [r4, #4]
 8008070:	bf04      	itt	eq
 8008072:	1852      	addeq	r2, r2, r1
 8008074:	6022      	streq	r2, [r4, #0]
 8008076:	6004      	str	r4, [r0, #0]
 8008078:	e7ec      	b.n	8008054 <_free_r+0x24>
 800807a:	4613      	mov	r3, r2
 800807c:	685a      	ldr	r2, [r3, #4]
 800807e:	b10a      	cbz	r2, 8008084 <_free_r+0x54>
 8008080:	42a2      	cmp	r2, r4
 8008082:	d9fa      	bls.n	800807a <_free_r+0x4a>
 8008084:	6819      	ldr	r1, [r3, #0]
 8008086:	1858      	adds	r0, r3, r1
 8008088:	42a0      	cmp	r0, r4
 800808a:	d10b      	bne.n	80080a4 <_free_r+0x74>
 800808c:	6820      	ldr	r0, [r4, #0]
 800808e:	4401      	add	r1, r0
 8008090:	1858      	adds	r0, r3, r1
 8008092:	4282      	cmp	r2, r0
 8008094:	6019      	str	r1, [r3, #0]
 8008096:	d1dd      	bne.n	8008054 <_free_r+0x24>
 8008098:	6810      	ldr	r0, [r2, #0]
 800809a:	6852      	ldr	r2, [r2, #4]
 800809c:	605a      	str	r2, [r3, #4]
 800809e:	4401      	add	r1, r0
 80080a0:	6019      	str	r1, [r3, #0]
 80080a2:	e7d7      	b.n	8008054 <_free_r+0x24>
 80080a4:	d902      	bls.n	80080ac <_free_r+0x7c>
 80080a6:	230c      	movs	r3, #12
 80080a8:	602b      	str	r3, [r5, #0]
 80080aa:	e7d3      	b.n	8008054 <_free_r+0x24>
 80080ac:	6820      	ldr	r0, [r4, #0]
 80080ae:	1821      	adds	r1, r4, r0
 80080b0:	428a      	cmp	r2, r1
 80080b2:	bf04      	itt	eq
 80080b4:	6811      	ldreq	r1, [r2, #0]
 80080b6:	6852      	ldreq	r2, [r2, #4]
 80080b8:	6062      	str	r2, [r4, #4]
 80080ba:	bf04      	itt	eq
 80080bc:	1809      	addeq	r1, r1, r0
 80080be:	6021      	streq	r1, [r4, #0]
 80080c0:	605c      	str	r4, [r3, #4]
 80080c2:	e7c7      	b.n	8008054 <_free_r+0x24>
 80080c4:	bd38      	pop	{r3, r4, r5, pc}
 80080c6:	bf00      	nop
 80080c8:	20003f2c 	.word	0x20003f2c

080080cc <_malloc_r>:
 80080cc:	b570      	push	{r4, r5, r6, lr}
 80080ce:	1ccd      	adds	r5, r1, #3
 80080d0:	f025 0503 	bic.w	r5, r5, #3
 80080d4:	3508      	adds	r5, #8
 80080d6:	2d0c      	cmp	r5, #12
 80080d8:	bf38      	it	cc
 80080da:	250c      	movcc	r5, #12
 80080dc:	2d00      	cmp	r5, #0
 80080de:	4606      	mov	r6, r0
 80080e0:	db01      	blt.n	80080e6 <_malloc_r+0x1a>
 80080e2:	42a9      	cmp	r1, r5
 80080e4:	d903      	bls.n	80080ee <_malloc_r+0x22>
 80080e6:	230c      	movs	r3, #12
 80080e8:	6033      	str	r3, [r6, #0]
 80080ea:	2000      	movs	r0, #0
 80080ec:	bd70      	pop	{r4, r5, r6, pc}
 80080ee:	f000 f85b 	bl	80081a8 <__malloc_lock>
 80080f2:	4a23      	ldr	r2, [pc, #140]	; (8008180 <_malloc_r+0xb4>)
 80080f4:	6814      	ldr	r4, [r2, #0]
 80080f6:	4621      	mov	r1, r4
 80080f8:	b991      	cbnz	r1, 8008120 <_malloc_r+0x54>
 80080fa:	4c22      	ldr	r4, [pc, #136]	; (8008184 <_malloc_r+0xb8>)
 80080fc:	6823      	ldr	r3, [r4, #0]
 80080fe:	b91b      	cbnz	r3, 8008108 <_malloc_r+0x3c>
 8008100:	4630      	mov	r0, r6
 8008102:	f000 f841 	bl	8008188 <_sbrk_r>
 8008106:	6020      	str	r0, [r4, #0]
 8008108:	4629      	mov	r1, r5
 800810a:	4630      	mov	r0, r6
 800810c:	f000 f83c 	bl	8008188 <_sbrk_r>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d126      	bne.n	8008162 <_malloc_r+0x96>
 8008114:	230c      	movs	r3, #12
 8008116:	6033      	str	r3, [r6, #0]
 8008118:	4630      	mov	r0, r6
 800811a:	f000 f846 	bl	80081aa <__malloc_unlock>
 800811e:	e7e4      	b.n	80080ea <_malloc_r+0x1e>
 8008120:	680b      	ldr	r3, [r1, #0]
 8008122:	1b5b      	subs	r3, r3, r5
 8008124:	d41a      	bmi.n	800815c <_malloc_r+0x90>
 8008126:	2b0b      	cmp	r3, #11
 8008128:	d90f      	bls.n	800814a <_malloc_r+0x7e>
 800812a:	600b      	str	r3, [r1, #0]
 800812c:	50cd      	str	r5, [r1, r3]
 800812e:	18cc      	adds	r4, r1, r3
 8008130:	4630      	mov	r0, r6
 8008132:	f000 f83a 	bl	80081aa <__malloc_unlock>
 8008136:	f104 000b 	add.w	r0, r4, #11
 800813a:	1d23      	adds	r3, r4, #4
 800813c:	f020 0007 	bic.w	r0, r0, #7
 8008140:	1ac3      	subs	r3, r0, r3
 8008142:	d01b      	beq.n	800817c <_malloc_r+0xb0>
 8008144:	425a      	negs	r2, r3
 8008146:	50e2      	str	r2, [r4, r3]
 8008148:	bd70      	pop	{r4, r5, r6, pc}
 800814a:	428c      	cmp	r4, r1
 800814c:	bf0d      	iteet	eq
 800814e:	6863      	ldreq	r3, [r4, #4]
 8008150:	684b      	ldrne	r3, [r1, #4]
 8008152:	6063      	strne	r3, [r4, #4]
 8008154:	6013      	streq	r3, [r2, #0]
 8008156:	bf18      	it	ne
 8008158:	460c      	movne	r4, r1
 800815a:	e7e9      	b.n	8008130 <_malloc_r+0x64>
 800815c:	460c      	mov	r4, r1
 800815e:	6849      	ldr	r1, [r1, #4]
 8008160:	e7ca      	b.n	80080f8 <_malloc_r+0x2c>
 8008162:	1cc4      	adds	r4, r0, #3
 8008164:	f024 0403 	bic.w	r4, r4, #3
 8008168:	42a0      	cmp	r0, r4
 800816a:	d005      	beq.n	8008178 <_malloc_r+0xac>
 800816c:	1a21      	subs	r1, r4, r0
 800816e:	4630      	mov	r0, r6
 8008170:	f000 f80a 	bl	8008188 <_sbrk_r>
 8008174:	3001      	adds	r0, #1
 8008176:	d0cd      	beq.n	8008114 <_malloc_r+0x48>
 8008178:	6025      	str	r5, [r4, #0]
 800817a:	e7d9      	b.n	8008130 <_malloc_r+0x64>
 800817c:	bd70      	pop	{r4, r5, r6, pc}
 800817e:	bf00      	nop
 8008180:	20003f2c 	.word	0x20003f2c
 8008184:	20003f30 	.word	0x20003f30

08008188 <_sbrk_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4c06      	ldr	r4, [pc, #24]	; (80081a4 <_sbrk_r+0x1c>)
 800818c:	2300      	movs	r3, #0
 800818e:	4605      	mov	r5, r0
 8008190:	4608      	mov	r0, r1
 8008192:	6023      	str	r3, [r4, #0]
 8008194:	f000 f80a 	bl	80081ac <_sbrk>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_sbrk_r+0x1a>
 800819c:	6823      	ldr	r3, [r4, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_sbrk_r+0x1a>
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	20005810 	.word	0x20005810

080081a8 <__malloc_lock>:
 80081a8:	4770      	bx	lr

080081aa <__malloc_unlock>:
 80081aa:	4770      	bx	lr

080081ac <_sbrk>:
 80081ac:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <_sbrk+0x14>)
 80081ae:	6819      	ldr	r1, [r3, #0]
 80081b0:	4602      	mov	r2, r0
 80081b2:	b909      	cbnz	r1, 80081b8 <_sbrk+0xc>
 80081b4:	4903      	ldr	r1, [pc, #12]	; (80081c4 <_sbrk+0x18>)
 80081b6:	6019      	str	r1, [r3, #0]
 80081b8:	6818      	ldr	r0, [r3, #0]
 80081ba:	4402      	add	r2, r0
 80081bc:	601a      	str	r2, [r3, #0]
 80081be:	4770      	bx	lr
 80081c0:	20003f34 	.word	0x20003f34
 80081c4:	20005814 	.word	0x20005814

080081c8 <_init>:
 80081c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ca:	bf00      	nop
 80081cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081ce:	bc08      	pop	{r3}
 80081d0:	469e      	mov	lr, r3
 80081d2:	4770      	bx	lr

080081d4 <_fini>:
 80081d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081d6:	bf00      	nop
 80081d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081da:	bc08      	pop	{r3}
 80081dc:	469e      	mov	lr, r3
 80081de:	4770      	bx	lr
